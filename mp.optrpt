Intel(R) Advisor can now assist with vectorization and show optimization
  report messages with your source code.
See "https://software.intel.com/en-us/intel-advisor-xe" for details.


    Report from: Interprocedural optimizations [ipo]

INLINING OPTION VALUES:
  -inline-factor: 100
  -inline-min-size: 30
  -inline-max-size: 230
  -inline-max-total-size: 2000
  -inline-max-per-routine: 10000
  -inline-max-per-compile: 500000


Begin optimization report for: mp._

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (mp._) [1] mp.f90(2,8)


    Report from: Code generation optimizations [cg]

mp.f90(2,8):remark #34051: REGISTER ALLOCATION : [mp._] mp.f90:2

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :    0[ reg_null]
        
    Routine temporaries
        Total         :       6
            Global    :       0
            Local     :       6
        Regenerable   :       0
        Spilled       :       0
        
    Routine stack
        Variables     :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
        Spills        :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: MP::SCATTER_REAL_ARRAY

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (MP::SCATTER_REAL_ARRAY) [2] mp.f90(180,14)


    Report from: Loop nest, Vector & Auto-parallelization optimizations [loop, vec, par]


LOOP BEGIN at mp.f90(187,22)
<Multiversioned v1>
   remark #25233: Loop multiversioned for stride tests on Assumed shape arrays
   remark #15300: LOOP WAS VECTORIZED
LOOP END

LOOP BEGIN at mp.f90(187,22)
<Remainder loop for vectorization, Multiversioned v1>
LOOP END

LOOP BEGIN at mp.f90(187,22)
<Multiversioned v2>
   remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
   remark #25439: unrolled with remainder by 2  
LOOP END

LOOP BEGIN at mp.f90(187,22)
<Remainder, Multiversioned v2>
LOOP END

LOOP BEGIN at mp.f90(187,53)
<Multiversioned v1>
   remark #25233: Loop multiversioned for stride tests on Assumed shape arrays
   remark #15300: LOOP WAS VECTORIZED
LOOP END

LOOP BEGIN at mp.f90(187,53)
<Remainder loop for vectorization, Multiversioned v1>
LOOP END

LOOP BEGIN at mp.f90(187,53)
<Multiversioned v2>
   remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
   remark #25439: unrolled with remainder by 2  
LOOP END

LOOP BEGIN at mp.f90(187,53)
<Remainder, Multiversioned v2>
LOOP END

LOOP BEGIN at mp.f90(187,53)
<Multiversioned v1>
   remark #25233: Loop multiversioned for stride tests on Assumed shape arrays
   remark #15300: LOOP WAS VECTORIZED
LOOP END

LOOP BEGIN at mp.f90(187,53)
<Alternate Alignment Vectorized Loop, Multiversioned v1>
LOOP END

LOOP BEGIN at mp.f90(187,53)
<Remainder loop for vectorization, Multiversioned v1>
LOOP END

LOOP BEGIN at mp.f90(187,53)
<Multiversioned v2>
   remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
   remark #25439: unrolled with remainder by 2  
LOOP END

LOOP BEGIN at mp.f90(187,53)
<Remainder, Multiversioned v2>
LOOP END

    Report from: Code generation optimizations [cg]

mp.f90(180,14):remark #34051: REGISTER ALLOCATION : [mp_mp_scatter_real_array_] mp.f90:180

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :   15[ rax rdx rcx rbx rsi rdi r8-r15 zmm0]
        
    Routine temporaries
        Total         :      99
            Global    :      52
            Local     :      47
        Regenerable   :      10
        Spilled       :       8
        
    Routine stack
        Variables     :      12 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       2 [2.00e+00 ~ 1.3%]
        Spills        :      16 bytes*
            Reads     :       2 [4.50e-01 ~ 0.3%]
            Writes    :       2 [4.50e-01 ~ 0.3%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: MP::SCATTER_DOUBLE_ARRAY

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (MP::SCATTER_DOUBLE_ARRAY) [3] mp.f90(192,14)


    Report from: Loop nest, Vector & Auto-parallelization optimizations [loop, vec, par]


LOOP BEGIN at mp.f90(199,22)
<Multiversioned v1>
   remark #25233: Loop multiversioned for stride tests on Assumed shape arrays
   remark #15300: LOOP WAS VECTORIZED
LOOP END

LOOP BEGIN at mp.f90(199,22)
<Remainder loop for vectorization, Multiversioned v1>
LOOP END

LOOP BEGIN at mp.f90(199,22)
<Multiversioned v2>
   remark #15300: LOOP WAS VECTORIZED
LOOP END

LOOP BEGIN at mp.f90(199,22)
<Remainder loop for vectorization, Multiversioned v2>
LOOP END

LOOP BEGIN at mp.f90(199,65)
<Multiversioned v1>
   remark #25233: Loop multiversioned for stride tests on Assumed shape arrays
   remark #15300: LOOP WAS VECTORIZED
LOOP END

LOOP BEGIN at mp.f90(199,65)
<Remainder loop for vectorization, Multiversioned v1>
LOOP END

LOOP BEGIN at mp.f90(199,65)
<Multiversioned v2>
   remark #15300: LOOP WAS VECTORIZED
LOOP END

LOOP BEGIN at mp.f90(199,65)
<Remainder loop for vectorization, Multiversioned v2>
LOOP END

LOOP BEGIN at mp.f90(199,65)
<Multiversioned v1>
   remark #25233: Loop multiversioned for stride tests on Assumed shape arrays
   remark #15300: LOOP WAS VECTORIZED
LOOP END

LOOP BEGIN at mp.f90(199,65)
<Alternate Alignment Vectorized Loop, Multiversioned v1>
LOOP END

LOOP BEGIN at mp.f90(199,65)
<Remainder loop for vectorization, Multiversioned v1>
LOOP END

LOOP BEGIN at mp.f90(199,65)
<Multiversioned v2>
   remark #15300: LOOP WAS VECTORIZED
LOOP END

LOOP BEGIN at mp.f90(199,65)
<Remainder loop for vectorization, Multiversioned v2>
LOOP END

    Report from: Code generation optimizations [cg]

mp.f90(192,14):remark #34051: REGISTER ALLOCATION : [mp_mp_scatter_double_array_] mp.f90:192

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :   15[ rax rdx rcx rbx rsi rdi r8-r15 zmm0]
        
    Routine temporaries
        Total         :      86
            Global    :      43
            Local     :      43
        Regenerable   :      10
        Spilled       :       5
        
    Routine stack
        Variables     :      12 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       2 [2.00e+00 ~ 1.1%]
        Spills        :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: MP::GATHER_REAL_ARRAY

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (MP::GATHER_REAL_ARRAY) [4] mp.f90(205,14)


    Report from: Loop nest, Vector & Auto-parallelization optimizations [loop, vec, par]


LOOP BEGIN at mp.f90(212,21)
<Multiversioned v1>
   remark #25233: Loop multiversioned for stride tests on Assumed shape arrays
   remark #15300: LOOP WAS VECTORIZED
LOOP END

LOOP BEGIN at mp.f90(212,21)
<Remainder loop for vectorization, Multiversioned v1>
LOOP END

LOOP BEGIN at mp.f90(212,21)
<Multiversioned v2>
   remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
   remark #25439: unrolled with remainder by 2  
LOOP END

LOOP BEGIN at mp.f90(212,21)
<Remainder, Multiversioned v2>
LOOP END

LOOP BEGIN at mp.f90(212,42)
<Multiversioned v1>
   remark #25233: Loop multiversioned for stride tests on Assumed shape arrays
   remark #15300: LOOP WAS VECTORIZED
LOOP END

LOOP BEGIN at mp.f90(212,42)
<Remainder loop for vectorization, Multiversioned v1>
LOOP END

LOOP BEGIN at mp.f90(212,42)
<Multiversioned v2>
   remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
   remark #25439: unrolled with remainder by 2  
LOOP END

LOOP BEGIN at mp.f90(212,42)
<Remainder, Multiversioned v2>
LOOP END

LOOP BEGIN at mp.f90(212,42)
<Multiversioned v1>
   remark #25233: Loop multiversioned for stride tests on Assumed shape arrays
   remark #15300: LOOP WAS VECTORIZED
LOOP END

LOOP BEGIN at mp.f90(212,42)
<Alternate Alignment Vectorized Loop, Multiversioned v1>
LOOP END

LOOP BEGIN at mp.f90(212,42)
<Remainder loop for vectorization, Multiversioned v1>
LOOP END

LOOP BEGIN at mp.f90(212,42)
<Multiversioned v2>
   remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
   remark #25439: unrolled with remainder by 2  
LOOP END

LOOP BEGIN at mp.f90(212,42)
<Remainder, Multiversioned v2>
LOOP END

    Report from: Code generation optimizations [cg]

mp.f90(205,14):remark #34051: REGISTER ALLOCATION : [mp_mp_gather_real_array_] mp.f90:205

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :   15[ rax rdx rcx rbx rsi rdi r8-r15 zmm0]
        
    Routine temporaries
        Total         :      99
            Global    :      50
            Local     :      49
        Regenerable   :      10
        Spilled       :       8
        
    Routine stack
        Variables     :      12 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       2 [2.00e+00 ~ 1.3%]
        Spills        :      16 bytes*
            Reads     :       2 [4.50e-01 ~ 0.3%]
            Writes    :       2 [4.50e-01 ~ 0.3%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: MP::GATHER_DOUBLE_ARRAY

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (MP::GATHER_DOUBLE_ARRAY) [5] mp.f90(217,14)


    Report from: Loop nest, Vector & Auto-parallelization optimizations [loop, vec, par]


LOOP BEGIN at mp.f90(223,21)
<Multiversioned v1>
   remark #25233: Loop multiversioned for stride tests on Assumed shape arrays
   remark #15300: LOOP WAS VECTORIZED
LOOP END

LOOP BEGIN at mp.f90(223,21)
<Remainder loop for vectorization, Multiversioned v1>
LOOP END

LOOP BEGIN at mp.f90(223,21)
<Multiversioned v2>
   remark #15300: LOOP WAS VECTORIZED
LOOP END

LOOP BEGIN at mp.f90(223,21)
<Remainder loop for vectorization, Multiversioned v2>
LOOP END

LOOP BEGIN at mp.f90(223,54)
<Multiversioned v1>
   remark #25233: Loop multiversioned for stride tests on Assumed shape arrays
   remark #15300: LOOP WAS VECTORIZED
LOOP END

LOOP BEGIN at mp.f90(223,54)
<Remainder loop for vectorization, Multiversioned v1>
LOOP END

LOOP BEGIN at mp.f90(223,54)
<Multiversioned v2>
   remark #15300: LOOP WAS VECTORIZED
LOOP END

LOOP BEGIN at mp.f90(223,54)
<Remainder loop for vectorization, Multiversioned v2>
LOOP END

LOOP BEGIN at mp.f90(223,54)
<Multiversioned v1>
   remark #25233: Loop multiversioned for stride tests on Assumed shape arrays
   remark #15300: LOOP WAS VECTORIZED
LOOP END

LOOP BEGIN at mp.f90(223,54)
<Alternate Alignment Vectorized Loop, Multiversioned v1>
LOOP END

LOOP BEGIN at mp.f90(223,54)
<Remainder loop for vectorization, Multiversioned v1>
LOOP END

LOOP BEGIN at mp.f90(223,54)
<Multiversioned v2>
   remark #15300: LOOP WAS VECTORIZED
LOOP END

LOOP BEGIN at mp.f90(223,54)
<Remainder loop for vectorization, Multiversioned v2>
LOOP END

    Report from: Code generation optimizations [cg]

mp.f90(217,14):remark #34051: REGISTER ALLOCATION : [mp_mp_gather_double_array_] mp.f90:217

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :   15[ rax rdx rcx rbx rsi rdi r8-r15 zmm0]
        
    Routine temporaries
        Total         :      86
            Global    :      41
            Local     :      45
        Regenerable   :      10
        Spilled       :       5
        
    Routine stack
        Variables     :      12 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       2 [2.00e+00 ~ 1.0%]
        Spills        :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: MP::GATHER_INTEGER_ARRAY

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (MP::GATHER_INTEGER_ARRAY) [6] mp.f90(227,14)


    Report from: Loop nest, Vector & Auto-parallelization optimizations [loop, vec, par]


LOOP BEGIN at mp.f90(234,21)
<Multiversioned v1>
   remark #25233: Loop multiversioned for stride tests on Assumed shape arrays
   remark #15300: LOOP WAS VECTORIZED
LOOP END

LOOP BEGIN at mp.f90(234,21)
<Remainder loop for vectorization, Multiversioned v1>
LOOP END

LOOP BEGIN at mp.f90(234,21)
<Multiversioned v2>
   remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
   remark #25439: unrolled with remainder by 2  
LOOP END

LOOP BEGIN at mp.f90(234,21)
<Remainder, Multiversioned v2>
LOOP END

LOOP BEGIN at mp.f90(234,45)
<Multiversioned v1>
   remark #25233: Loop multiversioned for stride tests on Assumed shape arrays
   remark #15300: LOOP WAS VECTORIZED
LOOP END

LOOP BEGIN at mp.f90(234,45)
<Remainder loop for vectorization, Multiversioned v1>
LOOP END

LOOP BEGIN at mp.f90(234,45)
<Multiversioned v2>
   remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
   remark #25439: unrolled with remainder by 2  
LOOP END

LOOP BEGIN at mp.f90(234,45)
<Remainder, Multiversioned v2>
LOOP END

LOOP BEGIN at mp.f90(234,45)
<Multiversioned v1>
   remark #25233: Loop multiversioned for stride tests on Assumed shape arrays
   remark #15300: LOOP WAS VECTORIZED
LOOP END

LOOP BEGIN at mp.f90(234,45)
<Alternate Alignment Vectorized Loop, Multiversioned v1>
LOOP END

LOOP BEGIN at mp.f90(234,45)
<Remainder loop for vectorization, Multiversioned v1>
LOOP END

LOOP BEGIN at mp.f90(234,45)
<Multiversioned v2>
   remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
   remark #25439: unrolled with remainder by 2  
LOOP END

LOOP BEGIN at mp.f90(234,45)
<Remainder, Multiversioned v2>
LOOP END

    Report from: Code generation optimizations [cg]

mp.f90(227,14):remark #34051: REGISTER ALLOCATION : [mp_mp_gather_integer_array_] mp.f90:227

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :   15[ rax rdx rcx rbx rsi rdi r8-r15 zmm0]
        
    Routine temporaries
        Total         :      99
            Global    :      50
            Local     :      49
        Regenerable   :      10
        Spilled       :       8
        
    Routine stack
        Variables     :      12 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       2 [2.00e+00 ~ 1.3%]
        Spills        :      16 bytes*
            Reads     :       2 [4.50e-01 ~ 0.3%]
            Writes    :       2 [4.50e-01 ~ 0.3%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: MP::GATHER_INTEGER1_ARRAY

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (MP::GATHER_INTEGER1_ARRAY) [7] mp.f90(238,14)


    Report from: Loop nest, Vector & Auto-parallelization optimizations [loop, vec, par]


LOOP BEGIN at mp.f90(245,21)
<Multiversioned v1>
   remark #25233: Loop multiversioned for stride tests on Assumed shape arrays
   remark #15300: LOOP WAS VECTORIZED
LOOP END

LOOP BEGIN at mp.f90(245,21)
<Remainder loop for vectorization, Multiversioned v1>
LOOP END

LOOP BEGIN at mp.f90(245,21)
<Multiversioned v2>
   remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
   remark #25439: unrolled with remainder by 2  
LOOP END

LOOP BEGIN at mp.f90(245,21)
<Remainder, Multiversioned v2>
LOOP END

LOOP BEGIN at mp.f90(245,46)
<Multiversioned v1>
   remark #25233: Loop multiversioned for stride tests on Assumed shape arrays
   remark #15300: LOOP WAS VECTORIZED
LOOP END

LOOP BEGIN at mp.f90(245,46)
<Remainder loop for vectorization, Multiversioned v1>
LOOP END

LOOP BEGIN at mp.f90(245,46)
<Multiversioned v2>
   remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
   remark #25439: unrolled with remainder by 2  
LOOP END

LOOP BEGIN at mp.f90(245,46)
<Remainder, Multiversioned v2>
LOOP END

LOOP BEGIN at mp.f90(245,46)
<Multiversioned v1>
   remark #25233: Loop multiversioned for stride tests on Assumed shape arrays
   remark #15300: LOOP WAS VECTORIZED
LOOP END

LOOP BEGIN at mp.f90(245,46)
<Alternate Alignment Vectorized Loop, Multiversioned v1>
LOOP END

LOOP BEGIN at mp.f90(245,46)
<Remainder loop for vectorization, Multiversioned v1>
LOOP END

LOOP BEGIN at mp.f90(245,46)
<Multiversioned v2>
   remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
   remark #25439: unrolled with remainder by 2  
LOOP END

LOOP BEGIN at mp.f90(245,46)
<Remainder, Multiversioned v2>
LOOP END

    Report from: Code generation optimizations [cg]

mp.f90(238,14):remark #34051: REGISTER ALLOCATION : [mp_mp_gather_integer1_array_] mp.f90:238

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :   15[ rax rdx rcx rbx rsi rdi r8-r15 zmm0]
        
    Routine temporaries
        Total         :      97
            Global    :      50
            Local     :      47
        Regenerable   :      10
        Spilled       :       8
        
    Routine stack
        Variables     :      12 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       2 [2.00e+00 ~ 1.3%]
        Spills        :      16 bytes*
            Reads     :       2 [4.50e-01 ~ 0.3%]
            Writes    :       2 [4.50e-01 ~ 0.3%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: MP::GATHER_INTEGER2_ARRAY

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (MP::GATHER_INTEGER2_ARRAY) [8] mp.f90(249,14)


    Report from: Loop nest, Vector & Auto-parallelization optimizations [loop, vec, par]


LOOP BEGIN at mp.f90(256,21)
<Multiversioned v1>
   remark #25233: Loop multiversioned for stride tests on Assumed shape arrays
   remark #15300: LOOP WAS VECTORIZED
LOOP END

LOOP BEGIN at mp.f90(256,21)
<Remainder loop for vectorization, Multiversioned v1>
LOOP END

LOOP BEGIN at mp.f90(256,21)
<Multiversioned v2>
   remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
   remark #25439: unrolled with remainder by 2  
LOOP END

LOOP BEGIN at mp.f90(256,21)
<Remainder, Multiversioned v2>
LOOP END

LOOP BEGIN at mp.f90(256,46)
<Multiversioned v1>
   remark #25233: Loop multiversioned for stride tests on Assumed shape arrays
   remark #15300: LOOP WAS VECTORIZED
LOOP END

LOOP BEGIN at mp.f90(256,46)
<Remainder loop for vectorization, Multiversioned v1>
LOOP END

LOOP BEGIN at mp.f90(256,46)
<Multiversioned v2>
   remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
   remark #25439: unrolled with remainder by 2  
LOOP END

LOOP BEGIN at mp.f90(256,46)
<Remainder, Multiversioned v2>
LOOP END

LOOP BEGIN at mp.f90(256,46)
<Multiversioned v1>
   remark #25233: Loop multiversioned for stride tests on Assumed shape arrays
   remark #15300: LOOP WAS VECTORIZED
LOOP END

LOOP BEGIN at mp.f90(256,46)
<Alternate Alignment Vectorized Loop, Multiversioned v1>
LOOP END

LOOP BEGIN at mp.f90(256,46)
<Remainder loop for vectorization, Multiversioned v1>
LOOP END

LOOP BEGIN at mp.f90(256,46)
<Multiversioned v2>
   remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
   remark #25439: unrolled with remainder by 2  
LOOP END

LOOP BEGIN at mp.f90(256,46)
<Remainder, Multiversioned v2>
LOOP END

    Report from: Code generation optimizations [cg]

mp.f90(249,14):remark #34051: REGISTER ALLOCATION : [mp_mp_gather_integer2_array_] mp.f90:249

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :   15[ rax rdx rcx rbx rsi rdi r8-r15 zmm0]
        
    Routine temporaries
        Total         :      99
            Global    :      50
            Local     :      49
        Regenerable   :      10
        Spilled       :       8
        
    Routine stack
        Variables     :      12 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       2 [2.00e+00 ~ 1.3%]
        Spills        :      16 bytes*
            Reads     :       2 [4.50e-01 ~ 0.3%]
            Writes    :       2 [4.50e-01 ~ 0.3%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: MP::GATHER_CHAR_ARRAY

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (MP::GATHER_CHAR_ARRAY) [9] mp.f90(260,14)


    Report from: Loop nest, Vector & Auto-parallelization optimizations [loop, vec, par]


LOOP BEGIN at mp.f90(267,21)
<Multiversioned v1>
   remark #25233: Loop multiversioned for stride tests on Assumed shape arrays
   remark #15300: LOOP WAS VECTORIZED
LOOP END

LOOP BEGIN at mp.f90(267,21)
<Remainder loop for vectorization, Multiversioned v1>
LOOP END

LOOP BEGIN at mp.f90(267,21)
<Multiversioned v2>
   remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
   remark #25439: unrolled with remainder by 2  
LOOP END

LOOP BEGIN at mp.f90(267,21)
<Remainder, Multiversioned v2>
LOOP END

LOOP BEGIN at mp.f90(267,47)
<Multiversioned v1>
   remark #25233: Loop multiversioned for stride tests on Assumed shape arrays
   remark #15300: LOOP WAS VECTORIZED
LOOP END

LOOP BEGIN at mp.f90(267,47)
<Remainder loop for vectorization, Multiversioned v1>
LOOP END

LOOP BEGIN at mp.f90(267,47)
<Multiversioned v2>
   remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
   remark #25439: unrolled with remainder by 2  
LOOP END

LOOP BEGIN at mp.f90(267,47)
<Remainder, Multiversioned v2>
LOOP END

LOOP BEGIN at mp.f90(267,47)
<Multiversioned v1>
   remark #25233: Loop multiversioned for stride tests on Assumed shape arrays
   remark #15300: LOOP WAS VECTORIZED
LOOP END

LOOP BEGIN at mp.f90(267,47)
<Alternate Alignment Vectorized Loop, Multiversioned v1>
LOOP END

LOOP BEGIN at mp.f90(267,47)
<Remainder loop for vectorization, Multiversioned v1>
LOOP END

LOOP BEGIN at mp.f90(267,47)
<Multiversioned v2>
   remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
   remark #25439: unrolled with remainder by 2  
LOOP END

LOOP BEGIN at mp.f90(267,47)
<Remainder, Multiversioned v2>
LOOP END

    Report from: Code generation optimizations [cg]

mp.f90(260,14):remark #34051: REGISTER ALLOCATION : [mp_mp_gather_char_array_] mp.f90:260

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :   15[ rax rdx rcx rbx rsi rdi r8-r15 zmm0]
        
    Routine temporaries
        Total         :      98
            Global    :      51
            Local     :      47
        Regenerable   :      11
        Spilled       :       8
        
    Routine stack
        Variables     :      12 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       2 [2.00e+00 ~ 1.3%]
        Spills        :      16 bytes*
            Reads     :       2 [4.50e-01 ~ 0.3%]
            Writes    :       2 [4.50e-01 ~ 0.3%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: MP::ALLGATHER_REAL

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (MP::ALLGATHER_REAL) [10] mp.f90(272,14)


    Report from: Loop nest, Vector & Auto-parallelization optimizations [loop, vec, par]


LOOP BEGIN at mp.f90(278,38)
<Multiversioned v1>
   remark #25233: Loop multiversioned for stride tests on Assumed shape arrays
   remark #15300: LOOP WAS VECTORIZED
LOOP END

LOOP BEGIN at mp.f90(278,38)
<Remainder loop for vectorization, Multiversioned v1>
LOOP END

LOOP BEGIN at mp.f90(278,38)
<Multiversioned v2>
   remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
   remark #25439: unrolled with remainder by 2  
LOOP END

LOOP BEGIN at mp.f90(278,38)
<Remainder, Multiversioned v2>
LOOP END

LOOP BEGIN at mp.f90(278,38)
<Multiversioned v1>
   remark #25233: Loop multiversioned for stride tests on Assumed shape arrays
   remark #15300: LOOP WAS VECTORIZED
LOOP END

LOOP BEGIN at mp.f90(278,38)
<Alternate Alignment Vectorized Loop, Multiversioned v1>
LOOP END

LOOP BEGIN at mp.f90(278,38)
<Remainder loop for vectorization, Multiversioned v1>
LOOP END

LOOP BEGIN at mp.f90(278,38)
<Multiversioned v2>
   remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
   remark #25439: unrolled with remainder by 2  
LOOP END

LOOP BEGIN at mp.f90(278,38)
<Remainder, Multiversioned v2>
LOOP END

    Report from: Code generation optimizations [cg]

mp.f90(272,14):remark #34051: REGISTER ALLOCATION : [mp_mp_allgather_real_] mp.f90:272

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :   15[ rax rdx rcx rbx rsi rdi r8-r15 zmm0]
        
    Routine temporaries
        Total         :      72
            Global    :      36
            Local     :      36
        Regenerable   :      11
        Spilled       :       5
        
    Routine stack
        Variables     :       8 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       1 [1.00e+00 ~ 0.9%]
        Spills        :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: MP::ALLGATHER_DOUBLE

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (MP::ALLGATHER_DOUBLE) [11] mp.f90(283,14)


    Report from: Loop nest, Vector & Auto-parallelization optimizations [loop, vec, par]


LOOP BEGIN at mp.f90(289,50)
<Multiversioned v1>
   remark #25233: Loop multiversioned for stride tests on Assumed shape arrays
   remark #15300: LOOP WAS VECTORIZED
LOOP END

LOOP BEGIN at mp.f90(289,50)
<Remainder loop for vectorization, Multiversioned v1>
LOOP END

LOOP BEGIN at mp.f90(289,50)
<Multiversioned v2>
   remark #15300: LOOP WAS VECTORIZED
LOOP END

LOOP BEGIN at mp.f90(289,50)
<Remainder loop for vectorization, Multiversioned v2>
LOOP END

LOOP BEGIN at mp.f90(289,50)
<Multiversioned v1>
   remark #25233: Loop multiversioned for stride tests on Assumed shape arrays
   remark #15300: LOOP WAS VECTORIZED
LOOP END

LOOP BEGIN at mp.f90(289,50)
<Alternate Alignment Vectorized Loop, Multiversioned v1>
LOOP END

LOOP BEGIN at mp.f90(289,50)
<Remainder loop for vectorization, Multiversioned v1>
LOOP END

LOOP BEGIN at mp.f90(289,50)
<Multiversioned v2>
   remark #15300: LOOP WAS VECTORIZED
LOOP END

LOOP BEGIN at mp.f90(289,50)
<Remainder loop for vectorization, Multiversioned v2>
LOOP END

    Report from: Code generation optimizations [cg]

mp.f90(283,14):remark #34051: REGISTER ALLOCATION : [mp_mp_allgather_double_] mp.f90:283

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :   15[ rax rdx rcx rbx rsi rdi r8-r15 zmm0]
        
    Routine temporaries
        Total         :      63
            Global    :      30
            Local     :      33
        Regenerable   :      11
        Spilled       :       5
        
    Routine stack
        Variables     :       8 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       1 [1.00e+00 ~ 0.7%]
        Spills        :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: MP::CHECK_MP

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (MP::CHECK_MP) [12] mp.f90(331,14)
  -> (338,13) MP::FINISH_MP


    Report from: Code generation optimizations [cg]

mp.f90(331,14):remark #34051: REGISTER ALLOCATION : [mp_mp_check_mp_] mp.f90:331

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :    9[ rax rdx rcx rbp rsi rdi r8-r9 r12]
        
    Routine temporaries
        Total         :      54
            Global    :      10
            Local     :      44
        Regenerable   :      37
        Spilled       :       2
        
    Routine stack
        Variables     :     112 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       8 [4.00e+00 ~ 8.9%]
        Spills        :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: MP::FINISH_MP

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (MP::FINISH_MP) [13] mp.f90(343,14)


    Report from: Code generation optimizations [cg]

mp.f90(343,14):remark #34051: REGISTER ALLOCATION : [mp_mp_finish_mp_] mp.f90:343

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :    2[ rax rdi]
        
    Routine temporaries
        Total         :       9
            Global    :       6
            Local     :       3
        Regenerable   :       3
        Spilled       :       0
        
    Routine stack
        Variables     :       4 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
        Spills        :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: MP::BROADCAST_CHARACTER

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (MP::BROADCAST_CHARACTER) [14] mp.f90(357,14)


    Report from: Code generation optimizations [cg]

mp.f90(357,14):remark #34051: REGISTER ALLOCATION : [mp_mp_broadcast_character_] mp.f90:357

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :    7[ rax rdx rcx rsi rdi r8-r9]
        
    Routine temporaries
        Total         :      22
            Global    :       6
            Local     :      16
        Regenerable   :      11
        Spilled       :       0
        
    Routine stack
        Variables     :       8 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       1 [1.00e+00 ~ 4.2%]
        Spills        :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: MP::BROADCAST_CHARACTER_ARRAY

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (MP::BROADCAST_CHARACTER_ARRAY) [15] mp.f90(364,14)


    Report from: Loop nest, Vector & Auto-parallelization optimizations [loop, vec, par]


LOOP BEGIN at mp.f90(368,21)
   remark #15527: loop was not vectorized: function call to memcpy cannot be vectorized
LOOP END

LOOP BEGIN at mp.f90(368,21)
   remark #15527: loop was not vectorized: function call to for_cpystr cannot be vectorized
LOOP END

    Report from: Code generation optimizations [cg]

mp.f90(368,21):remark #34026: call to memcpy implemented as a call to optimized library version
mp.f90(364,14):remark #34051: REGISTER ALLOCATION : [mp_mp_broadcast_character_array_] mp.f90:364

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :   13[ rax rdx rcx rbx rsi rdi r8-r10 r12-r15]
        
    Routine temporaries
        Total         :      63
            Global    :      24
            Local     :      39
        Regenerable   :      13
        Spilled       :      12
        
    Routine stack
        Variables     :       8 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       1 [1.00e+00 ~ 0.7%]
        Spills        :      56 bytes*
            Reads     :       7 [5.75e+00 ~ 4.2%]
            Writes    :       7 [3.70e+00 ~ 2.7%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: MP::BROADCAST_INTEGER

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (MP::BROADCAST_INTEGER) [16] mp.f90(372,14)


    Report from: Code generation optimizations [cg]

mp.f90(372,14):remark #34051: REGISTER ALLOCATION : [mp_mp_broadcast_integer_] mp.f90:372

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :    7[ rax rdx rcx rsi rdi r8-r9]
        
    Routine temporaries
        Total         :      20
            Global    :       6
            Local     :      14
        Regenerable   :      11
        Spilled       :       0
        
    Routine stack
        Variables     :       4 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
        Spills        :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: MP::BROADCAST_INTEGER_ARRAY

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (MP::BROADCAST_INTEGER_ARRAY) [17] mp.f90(379,14)


    Report from: Loop nest, Vector & Auto-parallelization optimizations [loop, vec, par]


LOOP BEGIN at mp.f90(383,21)
<Multiversioned v1>
   remark #25233: Loop multiversioned for stride tests on Assumed shape arrays
   remark #15300: LOOP WAS VECTORIZED
LOOP END

LOOP BEGIN at mp.f90(383,21)
<Remainder loop for vectorization, Multiversioned v1>
LOOP END

LOOP BEGIN at mp.f90(383,21)
<Multiversioned v2>
   remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
   remark #25439: unrolled with remainder by 2  
LOOP END

LOOP BEGIN at mp.f90(383,21)
<Remainder, Multiversioned v2>
LOOP END

LOOP BEGIN at mp.f90(383,21)
<Multiversioned v1>
   remark #25233: Loop multiversioned for stride tests on Assumed shape arrays
   remark #15300: LOOP WAS VECTORIZED
LOOP END

LOOP BEGIN at mp.f90(383,21)
<Alternate Alignment Vectorized Loop, Multiversioned v1>
LOOP END

LOOP BEGIN at mp.f90(383,21)
<Remainder loop for vectorization, Multiversioned v1>
LOOP END

LOOP BEGIN at mp.f90(383,21)
<Multiversioned v2>
   remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
   remark #25439: unrolled with remainder by 2  
LOOP END

LOOP BEGIN at mp.f90(383,21)
<Remainder, Multiversioned v2>
LOOP END

    Report from: Code generation optimizations [cg]

mp.f90(379,14):remark #34051: REGISTER ALLOCATION : [mp_mp_broadcast_integer_array_] mp.f90:379

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :   15[ rax rdx rcx rbx rsi rdi r8-r15 zmm0]
        
    Routine temporaries
        Total         :      70
            Global    :      35
            Local     :      35
        Regenerable   :      12
        Spilled       :       5
        
    Routine stack
        Variables     :       8 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       1 [1.00e+00 ~ 0.9%]
        Spills        :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: MP::BROADCAST_REAL

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (MP::BROADCAST_REAL) [18] mp.f90(386,14)


    Report from: Code generation optimizations [cg]

mp.f90(386,14):remark #34051: REGISTER ALLOCATION : [mp_mp_broadcast_real_] mp.f90:386

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :    7[ rax rdx rcx rsi rdi r8-r9]
        
    Routine temporaries
        Total         :      20
            Global    :       6
            Local     :      14
        Regenerable   :      11
        Spilled       :       0
        
    Routine stack
        Variables     :       4 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
        Spills        :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: MP::BROADCAST_REAL_ARRAY

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (MP::BROADCAST_REAL_ARRAY) [19] mp.f90(393,14)


    Report from: Loop nest, Vector & Auto-parallelization optimizations [loop, vec, par]


LOOP BEGIN at mp.f90(397,21)
<Multiversioned v1>
   remark #25233: Loop multiversioned for stride tests on Assumed shape arrays
   remark #15300: LOOP WAS VECTORIZED
LOOP END

LOOP BEGIN at mp.f90(397,21)
<Remainder loop for vectorization, Multiversioned v1>
LOOP END

LOOP BEGIN at mp.f90(397,21)
<Multiversioned v2>
   remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
   remark #25439: unrolled with remainder by 2  
LOOP END

LOOP BEGIN at mp.f90(397,21)
<Remainder, Multiversioned v2>
LOOP END

LOOP BEGIN at mp.f90(397,21)
<Multiversioned v1>
   remark #25233: Loop multiversioned for stride tests on Assumed shape arrays
   remark #15300: LOOP WAS VECTORIZED
LOOP END

LOOP BEGIN at mp.f90(397,21)
<Alternate Alignment Vectorized Loop, Multiversioned v1>
LOOP END

LOOP BEGIN at mp.f90(397,21)
<Remainder loop for vectorization, Multiversioned v1>
LOOP END

LOOP BEGIN at mp.f90(397,21)
<Multiversioned v2>
   remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
   remark #25439: unrolled with remainder by 2  
LOOP END

LOOP BEGIN at mp.f90(397,21)
<Remainder, Multiversioned v2>
LOOP END

    Report from: Code generation optimizations [cg]

mp.f90(393,14):remark #34051: REGISTER ALLOCATION : [mp_mp_broadcast_real_array_] mp.f90:393

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :   15[ rax rdx rcx rbx rsi rdi r8-r15 zmm0]
        
    Routine temporaries
        Total         :      70
            Global    :      35
            Local     :      35
        Regenerable   :      12
        Spilled       :       5
        
    Routine stack
        Variables     :       8 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       1 [1.00e+00 ~ 0.9%]
        Spills        :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: MP::BROADCAST_DOUBLE

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (MP::BROADCAST_DOUBLE) [20] mp.f90(400,14)


    Report from: Code generation optimizations [cg]

mp.f90(400,14):remark #34051: REGISTER ALLOCATION : [mp_mp_broadcast_double_] mp.f90:400

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :    7[ rax rdx rcx rsi rdi r8-r9]
        
    Routine temporaries
        Total         :      20
            Global    :       6
            Local     :      14
        Regenerable   :      11
        Spilled       :       0
        
    Routine stack
        Variables     :       4 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
        Spills        :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: MP::BROADCAST_DOUBLE_ARRAY

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (MP::BROADCAST_DOUBLE_ARRAY) [21] mp.f90(407,14)


    Report from: Loop nest, Vector & Auto-parallelization optimizations [loop, vec, par]


LOOP BEGIN at mp.f90(411,21)
<Multiversioned v1>
   remark #25233: Loop multiversioned for stride tests on Assumed shape arrays
   remark #15300: LOOP WAS VECTORIZED
LOOP END

LOOP BEGIN at mp.f90(411,21)
<Remainder loop for vectorization, Multiversioned v1>
LOOP END

LOOP BEGIN at mp.f90(411,21)
<Multiversioned v2>
   remark #15300: LOOP WAS VECTORIZED
LOOP END

LOOP BEGIN at mp.f90(411,21)
<Remainder loop for vectorization, Multiversioned v2>
LOOP END

LOOP BEGIN at mp.f90(411,21)
<Multiversioned v1>
   remark #25233: Loop multiversioned for stride tests on Assumed shape arrays
   remark #15300: LOOP WAS VECTORIZED
LOOP END

LOOP BEGIN at mp.f90(411,21)
<Alternate Alignment Vectorized Loop, Multiversioned v1>
LOOP END

LOOP BEGIN at mp.f90(411,21)
<Remainder loop for vectorization, Multiversioned v1>
LOOP END

LOOP BEGIN at mp.f90(411,21)
<Multiversioned v2>
   remark #15300: LOOP WAS VECTORIZED
LOOP END

LOOP BEGIN at mp.f90(411,21)
<Remainder loop for vectorization, Multiversioned v2>
LOOP END

    Report from: Code generation optimizations [cg]

mp.f90(407,14):remark #34051: REGISTER ALLOCATION : [mp_mp_broadcast_double_array_] mp.f90:407

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :   14[ rax rdx rcx rbx rsi rdi r8-r10 r12-r15 zmm0]
        
    Routine temporaries
        Total         :      61
            Global    :      29
            Local     :      32
        Regenerable   :      12
        Spilled       :       5
        
    Routine stack
        Variables     :       8 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       1 [1.00e+00 ~ 0.7%]
        Spills        :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: MP::BROADCAST_COMPLEX

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (MP::BROADCAST_COMPLEX) [22] mp.f90(415,14)


    Report from: Code generation optimizations [cg]

mp.f90(415,14):remark #34051: REGISTER ALLOCATION : [mp_mp_broadcast_complex_] mp.f90:415

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :    7[ rax rdx rcx rsi rdi r8-r9]
        
    Routine temporaries
        Total         :      20
            Global    :       6
            Local     :      14
        Regenerable   :      11
        Spilled       :       0
        
    Routine stack
        Variables     :       4 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
        Spills        :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: MP::BROADCAST_COMPLEX_ARRAY

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (MP::BROADCAST_COMPLEX_ARRAY) [23] mp.f90(422,14)


    Report from: Loop nest, Vector & Auto-parallelization optimizations [loop, vec, par]


LOOP BEGIN at mp.f90(426,21)
<Multiversioned v1>
   remark #25233: Loop multiversioned for stride tests on Assumed shape arrays
   remark #15300: LOOP WAS VECTORIZED
LOOP END

LOOP BEGIN at mp.f90(426,21)
<Remainder loop for vectorization, Multiversioned v1>
LOOP END

LOOP BEGIN at mp.f90(426,21)
<Multiversioned v2>
   remark #15300: LOOP WAS VECTORIZED
LOOP END

LOOP BEGIN at mp.f90(426,21)
<Remainder loop for vectorization, Multiversioned v2>
LOOP END

LOOP BEGIN at mp.f90(426,21)
<Multiversioned v1>
   remark #25233: Loop multiversioned for stride tests on Assumed shape arrays
   remark #15300: LOOP WAS VECTORIZED
LOOP END

LOOP BEGIN at mp.f90(426,21)
<Alternate Alignment Vectorized Loop, Multiversioned v1>
LOOP END

LOOP BEGIN at mp.f90(426,21)
<Remainder loop for vectorization, Multiversioned v1>
LOOP END

LOOP BEGIN at mp.f90(426,21)
<Multiversioned v2>
   remark #15300: LOOP WAS VECTORIZED
LOOP END

LOOP BEGIN at mp.f90(426,21)
<Remainder loop for vectorization, Multiversioned v2>
LOOP END

    Report from: Code generation optimizations [cg]

mp.f90(422,14):remark #34051: REGISTER ALLOCATION : [mp_mp_broadcast_complex_array_] mp.f90:422

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :   14[ rax rdx rcx rbx rsi rdi r8-r10 r12-r15 zmm0]
        
    Routine temporaries
        Total         :      61
            Global    :      29
            Local     :      32
        Regenerable   :      12
        Spilled       :       5
        
    Routine stack
        Variables     :       8 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       1 [1.00e+00 ~ 0.7%]
        Spills        :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: MP::BROADCAST_DOUBLE_COMPLEX

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (MP::BROADCAST_DOUBLE_COMPLEX) [24] mp.f90(429,14)


    Report from: Code generation optimizations [cg]

mp.f90(429,14):remark #34051: REGISTER ALLOCATION : [mp_mp_broadcast_double_complex_] mp.f90:429

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :    7[ rax rdx rcx rsi rdi r8-r9]
        
    Routine temporaries
        Total         :      20
            Global    :       6
            Local     :      14
        Regenerable   :      11
        Spilled       :       0
        
    Routine stack
        Variables     :       4 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
        Spills        :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: MP::BROADCAST_DOUBLE_COMPLEX_ARRAY

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (MP::BROADCAST_DOUBLE_COMPLEX_ARRAY) [25] mp.f90(436,14)


    Report from: Loop nest, Vector & Auto-parallelization optimizations [loop, vec, par]


LOOP BEGIN at mp.f90(440,21)
<Multiversioned v1>
   remark #25233: Loop multiversioned for stride tests on Assumed shape arrays
   remark #15516: loop was not vectorized: cost model has chosen vectorlength of 1 -- maybe possible to override via pragma/directive with vectorlength clause
   remark #25439: unrolled with remainder by 2  
LOOP END

LOOP BEGIN at mp.f90(440,21)
<Remainder, Multiversioned v1>
LOOP END

LOOP BEGIN at mp.f90(440,21)
<Multiversioned v2>
   remark #15516: loop was not vectorized: cost model has chosen vectorlength of 1 -- maybe possible to override via pragma/directive with vectorlength clause
   remark #25439: unrolled with remainder by 2  
LOOP END

LOOP BEGIN at mp.f90(440,21)
<Remainder, Multiversioned v2>
LOOP END

LOOP BEGIN at mp.f90(440,21)
<Multiversioned v1>
   remark #25233: Loop multiversioned for stride tests on Assumed shape arrays
   remark #15516: loop was not vectorized: cost model has chosen vectorlength of 1 -- maybe possible to override via pragma/directive with vectorlength clause
   remark #25439: unrolled with remainder by 2  
LOOP END

LOOP BEGIN at mp.f90(440,21)
<Remainder, Multiversioned v1>
LOOP END

LOOP BEGIN at mp.f90(440,21)
<Multiversioned v2>
   remark #15516: loop was not vectorized: cost model has chosen vectorlength of 1 -- maybe possible to override via pragma/directive with vectorlength clause
   remark #25439: unrolled with remainder by 2  
LOOP END

LOOP BEGIN at mp.f90(440,21)
<Remainder, Multiversioned v2>
LOOP END

    Report from: Code generation optimizations [cg]

mp.f90(436,14):remark #34051: REGISTER ALLOCATION : [mp_mp_broadcast_double_complex_array_] mp.f90:436

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :   16[ rax rdx rcx rbx rsi rdi r8-r15 zmm0-zmm1]
        
    Routine temporaries
        Total         :      80
            Global    :      40
            Local     :      40
        Regenerable   :      12
        Spilled       :       5
        
    Routine stack
        Variables     :       8 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       1 [1.00e+00 ~ 1.1%]
        Spills        :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: MP::BROADCAST_LOGICAL

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (MP::BROADCAST_LOGICAL) [26] mp.f90(443,14)


    Report from: Code generation optimizations [cg]

mp.f90(443,14):remark #34051: REGISTER ALLOCATION : [mp_mp_broadcast_logical_] mp.f90:443

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :    7[ rax rdx rcx rsi rdi r8-r9]
        
    Routine temporaries
        Total         :      20
            Global    :       6
            Local     :      14
        Regenerable   :      11
        Spilled       :       0
        
    Routine stack
        Variables     :       4 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
        Spills        :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: MP::BROADCAST_LOGICAL_ARRAY

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (MP::BROADCAST_LOGICAL_ARRAY) [27] mp.f90(450,14)


    Report from: Loop nest, Vector & Auto-parallelization optimizations [loop, vec, par]


LOOP BEGIN at mp.f90(454,21)
<Multiversioned v1>
   remark #25233: Loop multiversioned for stride tests on Assumed shape arrays
   remark #15300: LOOP WAS VECTORIZED
LOOP END

LOOP BEGIN at mp.f90(454,21)
<Remainder loop for vectorization, Multiversioned v1>
LOOP END

LOOP BEGIN at mp.f90(454,21)
<Multiversioned v2>
   remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
   remark #25439: unrolled with remainder by 2  
LOOP END

LOOP BEGIN at mp.f90(454,21)
<Remainder, Multiversioned v2>
LOOP END

LOOP BEGIN at mp.f90(454,21)
<Multiversioned v1>
   remark #25233: Loop multiversioned for stride tests on Assumed shape arrays
   remark #15300: LOOP WAS VECTORIZED
LOOP END

LOOP BEGIN at mp.f90(454,21)
<Alternate Alignment Vectorized Loop, Multiversioned v1>
LOOP END

LOOP BEGIN at mp.f90(454,21)
<Remainder loop for vectorization, Multiversioned v1>
LOOP END

LOOP BEGIN at mp.f90(454,21)
<Multiversioned v2>
   remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
   remark #25439: unrolled with remainder by 2  
LOOP END

LOOP BEGIN at mp.f90(454,21)
<Remainder, Multiversioned v2>
LOOP END

    Report from: Code generation optimizations [cg]

mp.f90(450,14):remark #34051: REGISTER ALLOCATION : [mp_mp_broadcast_logical_array_] mp.f90:450

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :   15[ rax rdx rcx rbx rsi rdi r8-r15 zmm0]
        
    Routine temporaries
        Total         :      70
            Global    :      35
            Local     :      35
        Regenerable   :      12
        Spilled       :       5
        
    Routine stack
        Variables     :       8 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       1 [1.00e+00 ~ 0.9%]
        Spills        :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: MP::BCASTFROM_CHARACTER

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (MP::BCASTFROM_CHARACTER) [28] mp.f90(458,14)


    Report from: Code generation optimizations [cg]

mp.f90(458,14):remark #34051: REGISTER ALLOCATION : [mp_mp_bcastfrom_character_] mp.f90:458

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :    7[ rax rdx rcx rsi rdi r8-r9]
        
    Routine temporaries
        Total         :      23
            Global    :       6
            Local     :      17
        Regenerable   :       9
        Spilled       :       0
        
    Routine stack
        Variables     :       8 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       1 [1.00e+00 ~ 4.0%]
        Spills        :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: MP::BCASTFROM_CHARACTER_ARRAY

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (MP::BCASTFROM_CHARACTER_ARRAY) [29] mp.f90(466,14)


    Report from: Loop nest, Vector & Auto-parallelization optimizations [loop, vec, par]


LOOP BEGIN at mp.f90(471,21)
   remark #15527: loop was not vectorized: function call to memcpy cannot be vectorized
LOOP END

LOOP BEGIN at mp.f90(471,21)
   remark #15527: loop was not vectorized: function call to for_cpystr cannot be vectorized
LOOP END

    Report from: Code generation optimizations [cg]

mp.f90(471,21):remark #34026: call to memcpy implemented as a call to optimized library version
mp.f90(466,14):remark #34051: REGISTER ALLOCATION : [mp_mp_bcastfrom_character_array_] mp.f90:466

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :   13[ rax rdx rcx rbx rsi rdi r8-r10 r12-r15]
        
    Routine temporaries
        Total         :      64
            Global    :      25
            Local     :      39
        Regenerable   :      11
        Spilled       :      13
        
    Routine stack
        Variables     :       8 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       1 [1.00e+00 ~ 0.7%]
        Spills        :      64 bytes*
            Reads     :       8 [6.20e+00 ~ 4.5%]
            Writes    :       8 [4.15e+00 ~ 3.0%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: MP::BCASTFROM_INTEGER

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (MP::BCASTFROM_INTEGER) [30] mp.f90(474,14)


    Report from: Code generation optimizations [cg]

mp.f90(474,14):remark #34051: REGISTER ALLOCATION : [mp_mp_bcastfrom_integer_] mp.f90:474

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :    7[ rax rdx rcx rsi rdi r8-r9]
        
    Routine temporaries
        Total         :      21
            Global    :       6
            Local     :      15
        Regenerable   :       9
        Spilled       :       0
        
    Routine stack
        Variables     :       4 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
        Spills        :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: MP::BCASTFROM_INTEGER_ARRAY

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (MP::BCASTFROM_INTEGER_ARRAY) [31] mp.f90(482,14)


    Report from: Loop nest, Vector & Auto-parallelization optimizations [loop, vec, par]


LOOP BEGIN at mp.f90(487,21)
<Multiversioned v1>
   remark #25233: Loop multiversioned for stride tests on Assumed shape arrays
   remark #15300: LOOP WAS VECTORIZED
LOOP END

LOOP BEGIN at mp.f90(487,21)
<Remainder loop for vectorization, Multiversioned v1>
LOOP END

LOOP BEGIN at mp.f90(487,21)
<Multiversioned v2>
   remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
   remark #25439: unrolled with remainder by 2  
LOOP END

LOOP BEGIN at mp.f90(487,21)
<Remainder, Multiversioned v2>
LOOP END

LOOP BEGIN at mp.f90(487,21)
<Multiversioned v1>
   remark #25233: Loop multiversioned for stride tests on Assumed shape arrays
   remark #15300: LOOP WAS VECTORIZED
LOOP END

LOOP BEGIN at mp.f90(487,21)
<Alternate Alignment Vectorized Loop, Multiversioned v1>
LOOP END

LOOP BEGIN at mp.f90(487,21)
<Remainder loop for vectorization, Multiversioned v1>
LOOP END

LOOP BEGIN at mp.f90(487,21)
<Multiversioned v2>
   remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
   remark #25439: unrolled with remainder by 2  
LOOP END

LOOP BEGIN at mp.f90(487,21)
<Remainder, Multiversioned v2>
LOOP END

    Report from: Code generation optimizations [cg]

mp.f90(482,14):remark #34051: REGISTER ALLOCATION : [mp_mp_bcastfrom_integer_array_] mp.f90:482

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :   15[ rax rdx rcx rbx rsi rdi r8-r15 zmm0]
        
    Routine temporaries
        Total         :      71
            Global    :      36
            Local     :      35
        Regenerable   :      10
        Spilled       :       5
        
    Routine stack
        Variables     :       8 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       1 [1.00e+00 ~ 0.9%]
        Spills        :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: MP::BCASTFROM_REAL

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (MP::BCASTFROM_REAL) [32] mp.f90(490,14)


    Report from: Code generation optimizations [cg]

mp.f90(490,14):remark #34051: REGISTER ALLOCATION : [mp_mp_bcastfrom_real_] mp.f90:490

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :    7[ rax rdx rcx rsi rdi r8-r9]
        
    Routine temporaries
        Total         :      21
            Global    :       6
            Local     :      15
        Regenerable   :       9
        Spilled       :       0
        
    Routine stack
        Variables     :       4 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
        Spills        :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: MP::BCASTFROM_REAL_ARRAY

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (MP::BCASTFROM_REAL_ARRAY) [33] mp.f90(498,14)


    Report from: Loop nest, Vector & Auto-parallelization optimizations [loop, vec, par]


LOOP BEGIN at mp.f90(503,21)
<Multiversioned v1>
   remark #25233: Loop multiversioned for stride tests on Assumed shape arrays
   remark #15300: LOOP WAS VECTORIZED
LOOP END

LOOP BEGIN at mp.f90(503,21)
<Remainder loop for vectorization, Multiversioned v1>
LOOP END

LOOP BEGIN at mp.f90(503,21)
<Multiversioned v2>
   remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
   remark #25439: unrolled with remainder by 2  
LOOP END

LOOP BEGIN at mp.f90(503,21)
<Remainder, Multiversioned v2>
LOOP END

LOOP BEGIN at mp.f90(503,21)
<Multiversioned v1>
   remark #25233: Loop multiversioned for stride tests on Assumed shape arrays
   remark #15300: LOOP WAS VECTORIZED
LOOP END

LOOP BEGIN at mp.f90(503,21)
<Alternate Alignment Vectorized Loop, Multiversioned v1>
LOOP END

LOOP BEGIN at mp.f90(503,21)
<Remainder loop for vectorization, Multiversioned v1>
LOOP END

LOOP BEGIN at mp.f90(503,21)
<Multiversioned v2>
   remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
   remark #25439: unrolled with remainder by 2  
LOOP END

LOOP BEGIN at mp.f90(503,21)
<Remainder, Multiversioned v2>
LOOP END

    Report from: Code generation optimizations [cg]

mp.f90(498,14):remark #34051: REGISTER ALLOCATION : [mp_mp_bcastfrom_real_array_] mp.f90:498

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :   15[ rax rdx rcx rbx rsi rdi r8-r15 zmm0]
        
    Routine temporaries
        Total         :      71
            Global    :      36
            Local     :      35
        Regenerable   :      10
        Spilled       :       5
        
    Routine stack
        Variables     :       8 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       1 [1.00e+00 ~ 0.9%]
        Spills        :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: MP::BCASTFROM_DOUBLE

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (MP::BCASTFROM_DOUBLE) [34] mp.f90(506,14)


    Report from: Code generation optimizations [cg]

mp.f90(506,14):remark #34051: REGISTER ALLOCATION : [mp_mp_bcastfrom_double_] mp.f90:506

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :    7[ rax rdx rcx rsi rdi r8-r9]
        
    Routine temporaries
        Total         :      21
            Global    :       6
            Local     :      15
        Regenerable   :       9
        Spilled       :       0
        
    Routine stack
        Variables     :       4 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
        Spills        :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: MP::BCASTFROM_DOUBLE_ARRAY

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (MP::BCASTFROM_DOUBLE_ARRAY) [35] mp.f90(514,14)


    Report from: Loop nest, Vector & Auto-parallelization optimizations [loop, vec, par]


LOOP BEGIN at mp.f90(519,21)
<Multiversioned v1>
   remark #25233: Loop multiversioned for stride tests on Assumed shape arrays
   remark #15300: LOOP WAS VECTORIZED
LOOP END

LOOP BEGIN at mp.f90(519,21)
<Remainder loop for vectorization, Multiversioned v1>
LOOP END

LOOP BEGIN at mp.f90(519,21)
<Multiversioned v2>
   remark #15300: LOOP WAS VECTORIZED
LOOP END

LOOP BEGIN at mp.f90(519,21)
<Remainder loop for vectorization, Multiversioned v2>
LOOP END

LOOP BEGIN at mp.f90(519,21)
<Multiversioned v1>
   remark #25233: Loop multiversioned for stride tests on Assumed shape arrays
   remark #15300: LOOP WAS VECTORIZED
LOOP END

LOOP BEGIN at mp.f90(519,21)
<Alternate Alignment Vectorized Loop, Multiversioned v1>
LOOP END

LOOP BEGIN at mp.f90(519,21)
<Remainder loop for vectorization, Multiversioned v1>
LOOP END

LOOP BEGIN at mp.f90(519,21)
<Multiversioned v2>
   remark #15300: LOOP WAS VECTORIZED
LOOP END

LOOP BEGIN at mp.f90(519,21)
<Remainder loop for vectorization, Multiversioned v2>
LOOP END

    Report from: Code generation optimizations [cg]

mp.f90(514,14):remark #34051: REGISTER ALLOCATION : [mp_mp_bcastfrom_double_array_] mp.f90:514

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :   14[ rax rdx rcx rbx rsi rdi r8-r10 r12-r15 zmm0]
        
    Routine temporaries
        Total         :      62
            Global    :      30
            Local     :      32
        Regenerable   :      10
        Spilled       :       5
        
    Routine stack
        Variables     :       8 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       1 [1.00e+00 ~ 0.7%]
        Spills        :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: MP::BCASTFROM_COMPLEX

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (MP::BCASTFROM_COMPLEX) [36] mp.f90(523,14)


    Report from: Code generation optimizations [cg]

mp.f90(523,14):remark #34051: REGISTER ALLOCATION : [mp_mp_bcastfrom_complex_] mp.f90:523

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :    7[ rax rdx rcx rsi rdi r8-r9]
        
    Routine temporaries
        Total         :      21
            Global    :       6
            Local     :      15
        Regenerable   :       9
        Spilled       :       0
        
    Routine stack
        Variables     :       4 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
        Spills        :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: MP::BCASTFROM_COMPLEX_ARRAY

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (MP::BCASTFROM_COMPLEX_ARRAY) [37] mp.f90(531,14)


    Report from: Loop nest, Vector & Auto-parallelization optimizations [loop, vec, par]


LOOP BEGIN at mp.f90(536,21)
<Multiversioned v1>
   remark #25233: Loop multiversioned for stride tests on Assumed shape arrays
   remark #15300: LOOP WAS VECTORIZED
LOOP END

LOOP BEGIN at mp.f90(536,21)
<Remainder loop for vectorization, Multiversioned v1>
LOOP END

LOOP BEGIN at mp.f90(536,21)
<Multiversioned v2>
   remark #15300: LOOP WAS VECTORIZED
LOOP END

LOOP BEGIN at mp.f90(536,21)
<Remainder loop for vectorization, Multiversioned v2>
LOOP END

LOOP BEGIN at mp.f90(536,21)
<Multiversioned v1>
   remark #25233: Loop multiversioned for stride tests on Assumed shape arrays
   remark #15300: LOOP WAS VECTORIZED
LOOP END

LOOP BEGIN at mp.f90(536,21)
<Alternate Alignment Vectorized Loop, Multiversioned v1>
LOOP END

LOOP BEGIN at mp.f90(536,21)
<Remainder loop for vectorization, Multiversioned v1>
LOOP END

LOOP BEGIN at mp.f90(536,21)
<Multiversioned v2>
   remark #15300: LOOP WAS VECTORIZED
LOOP END

LOOP BEGIN at mp.f90(536,21)
<Remainder loop for vectorization, Multiversioned v2>
LOOP END

    Report from: Code generation optimizations [cg]

mp.f90(531,14):remark #34051: REGISTER ALLOCATION : [mp_mp_bcastfrom_complex_array_] mp.f90:531

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :   14[ rax rdx rcx rbx rsi rdi r8-r10 r12-r15 zmm0]
        
    Routine temporaries
        Total         :      62
            Global    :      30
            Local     :      32
        Regenerable   :      10
        Spilled       :       5
        
    Routine stack
        Variables     :       8 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       1 [1.00e+00 ~ 0.7%]
        Spills        :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: MP::BCASTFROM_DOUBLE_COMPLEX

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (MP::BCASTFROM_DOUBLE_COMPLEX) [38] mp.f90(539,14)


    Report from: Code generation optimizations [cg]

mp.f90(539,14):remark #34051: REGISTER ALLOCATION : [mp_mp_bcastfrom_double_complex_] mp.f90:539

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :    7[ rax rdx rcx rsi rdi r8-r9]
        
    Routine temporaries
        Total         :      21
            Global    :       6
            Local     :      15
        Regenerable   :       9
        Spilled       :       0
        
    Routine stack
        Variables     :       4 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
        Spills        :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: MP::BCASTFROM_DOUBLE_COMPLEX_ARRAY

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (MP::BCASTFROM_DOUBLE_COMPLEX_ARRAY) [39] mp.f90(547,14)


    Report from: Loop nest, Vector & Auto-parallelization optimizations [loop, vec, par]


LOOP BEGIN at mp.f90(552,21)
<Multiversioned v1>
   remark #25233: Loop multiversioned for stride tests on Assumed shape arrays
   remark #15516: loop was not vectorized: cost model has chosen vectorlength of 1 -- maybe possible to override via pragma/directive with vectorlength clause
   remark #25439: unrolled with remainder by 2  
LOOP END

LOOP BEGIN at mp.f90(552,21)
<Remainder, Multiversioned v1>
LOOP END

LOOP BEGIN at mp.f90(552,21)
<Multiversioned v2>
   remark #15516: loop was not vectorized: cost model has chosen vectorlength of 1 -- maybe possible to override via pragma/directive with vectorlength clause
   remark #25439: unrolled with remainder by 2  
LOOP END

LOOP BEGIN at mp.f90(552,21)
<Remainder, Multiversioned v2>
LOOP END

LOOP BEGIN at mp.f90(552,21)
<Multiversioned v1>
   remark #25233: Loop multiversioned for stride tests on Assumed shape arrays
   remark #15516: loop was not vectorized: cost model has chosen vectorlength of 1 -- maybe possible to override via pragma/directive with vectorlength clause
   remark #25439: unrolled with remainder by 2  
LOOP END

LOOP BEGIN at mp.f90(552,21)
<Remainder, Multiversioned v1>
LOOP END

LOOP BEGIN at mp.f90(552,21)
<Multiversioned v2>
   remark #15516: loop was not vectorized: cost model has chosen vectorlength of 1 -- maybe possible to override via pragma/directive with vectorlength clause
   remark #25439: unrolled with remainder by 2  
LOOP END

LOOP BEGIN at mp.f90(552,21)
<Remainder, Multiversioned v2>
LOOP END

    Report from: Code generation optimizations [cg]

mp.f90(547,14):remark #34051: REGISTER ALLOCATION : [mp_mp_bcastfrom_double_complex_array_] mp.f90:547

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :   16[ rax rdx rcx rbx rsi rdi r8-r15 zmm0-zmm1]
        
    Routine temporaries
        Total         :      81
            Global    :      41
            Local     :      40
        Regenerable   :      10
        Spilled       :       5
        
    Routine stack
        Variables     :       8 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       1 [1.00e+00 ~ 1.1%]
        Spills        :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: MP::BCASTFROM_LOGICAL

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (MP::BCASTFROM_LOGICAL) [40] mp.f90(555,14)


    Report from: Code generation optimizations [cg]

mp.f90(555,14):remark #34051: REGISTER ALLOCATION : [mp_mp_bcastfrom_logical_] mp.f90:555

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :    7[ rax rdx rcx rsi rdi r8-r9]
        
    Routine temporaries
        Total         :      21
            Global    :       6
            Local     :      15
        Regenerable   :       9
        Spilled       :       0
        
    Routine stack
        Variables     :       4 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
        Spills        :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: MP::BCASTFROM_LOGICAL_ARRAY

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (MP::BCASTFROM_LOGICAL_ARRAY) [41] mp.f90(563,14)


    Report from: Loop nest, Vector & Auto-parallelization optimizations [loop, vec, par]


LOOP BEGIN at mp.f90(568,21)
<Multiversioned v1>
   remark #25233: Loop multiversioned for stride tests on Assumed shape arrays
   remark #15300: LOOP WAS VECTORIZED
LOOP END

LOOP BEGIN at mp.f90(568,21)
<Remainder loop for vectorization, Multiversioned v1>
LOOP END

LOOP BEGIN at mp.f90(568,21)
<Multiversioned v2>
   remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
   remark #25439: unrolled with remainder by 2  
LOOP END

LOOP BEGIN at mp.f90(568,21)
<Remainder, Multiversioned v2>
LOOP END

LOOP BEGIN at mp.f90(568,21)
<Multiversioned v1>
   remark #25233: Loop multiversioned for stride tests on Assumed shape arrays
   remark #15300: LOOP WAS VECTORIZED
LOOP END

LOOP BEGIN at mp.f90(568,21)
<Alternate Alignment Vectorized Loop, Multiversioned v1>
LOOP END

LOOP BEGIN at mp.f90(568,21)
<Remainder loop for vectorization, Multiversioned v1>
LOOP END

LOOP BEGIN at mp.f90(568,21)
<Multiversioned v2>
   remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
   remark #25439: unrolled with remainder by 2  
LOOP END

LOOP BEGIN at mp.f90(568,21)
<Remainder, Multiversioned v2>
LOOP END

    Report from: Code generation optimizations [cg]

mp.f90(563,14):remark #34051: REGISTER ALLOCATION : [mp_mp_bcastfrom_logical_array_] mp.f90:563

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :   15[ rax rdx rcx rbx rsi rdi r8-r15 zmm0]
        
    Routine temporaries
        Total         :      71
            Global    :      36
            Local     :      35
        Regenerable   :      10
        Spilled       :       5
        
    Routine stack
        Variables     :       8 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       1 [1.00e+00 ~ 0.9%]
        Spills        :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: MP::BCASTFROMTO_CHARACTER

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (MP::BCASTFROMTO_CHARACTER) [42] mp.f90(573,14)


    Report from: Code generation optimizations [cg]

mp.f90(573,14):remark #34051: REGISTER ALLOCATION : [mp_mp_bcastfromto_character_] mp.f90:573

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :    7[ rax rdx rcx rsi rdi r8-r9]
        
    Routine temporaries
        Total         :      24
            Global    :       6
            Local     :      18
        Regenerable   :       7
        Spilled       :       0
        
    Routine stack
        Variables     :       8 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       1 [1.00e+00 ~ 3.7%]
        Spills        :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: MP::BCASTFROMTO_CHARACTER_ARRAY

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (MP::BCASTFROMTO_CHARACTER_ARRAY) [43] mp.f90(581,14)


    Report from: Loop nest, Vector & Auto-parallelization optimizations [loop, vec, par]


LOOP BEGIN at mp.f90(586,21)
   remark #15527: loop was not vectorized: function call to memcpy cannot be vectorized
LOOP END

LOOP BEGIN at mp.f90(586,21)
   remark #15527: loop was not vectorized: function call to for_cpystr cannot be vectorized
LOOP END

    Report from: Code generation optimizations [cg]

mp.f90(586,21):remark #34026: call to memcpy implemented as a call to optimized library version
mp.f90(581,14):remark #34051: REGISTER ALLOCATION : [mp_mp_bcastfromto_character_array_] mp.f90:581

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :   13[ rax rdx rcx rbx rsi rdi r8-r10 r12-r15]
        
    Routine temporaries
        Total         :      65
            Global    :      26
            Local     :      39
        Regenerable   :       9
        Spilled       :      14
        
    Routine stack
        Variables     :       8 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       1 [1.00e+00 ~ 0.7%]
        Spills        :      72 bytes*
            Reads     :       9 [6.65e+00 ~ 4.8%]
            Writes    :       9 [4.60e+00 ~ 3.3%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: MP::BCASTFROMTO_INTEGER

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (MP::BCASTFROMTO_INTEGER) [44] mp.f90(589,14)


    Report from: Code generation optimizations [cg]

mp.f90(589,14):remark #34051: REGISTER ALLOCATION : [mp_mp_bcastfromto_integer_] mp.f90:589

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :    7[ rax rdx rcx rsi rdi r8-r9]
        
    Routine temporaries
        Total         :      22
            Global    :       6
            Local     :      16
        Regenerable   :       7
        Spilled       :       0
        
    Routine stack
        Variables     :       4 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
        Spills        :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: MP::BCASTFROMTO_INTEGER_ARRAY

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (MP::BCASTFROMTO_INTEGER_ARRAY) [45] mp.f90(597,14)


    Report from: Loop nest, Vector & Auto-parallelization optimizations [loop, vec, par]


LOOP BEGIN at mp.f90(602,21)
<Multiversioned v1>
   remark #25233: Loop multiversioned for stride tests on Assumed shape arrays
   remark #15300: LOOP WAS VECTORIZED
LOOP END

LOOP BEGIN at mp.f90(602,21)
<Remainder loop for vectorization, Multiversioned v1>
LOOP END

LOOP BEGIN at mp.f90(602,21)
<Multiversioned v2>
   remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
   remark #25439: unrolled with remainder by 2  
LOOP END

LOOP BEGIN at mp.f90(602,21)
<Remainder, Multiversioned v2>
LOOP END

LOOP BEGIN at mp.f90(602,21)
<Multiversioned v1>
   remark #25233: Loop multiversioned for stride tests on Assumed shape arrays
   remark #15300: LOOP WAS VECTORIZED
LOOP END

LOOP BEGIN at mp.f90(602,21)
<Alternate Alignment Vectorized Loop, Multiversioned v1>
LOOP END

LOOP BEGIN at mp.f90(602,21)
<Remainder loop for vectorization, Multiversioned v1>
LOOP END

LOOP BEGIN at mp.f90(602,21)
<Multiversioned v2>
   remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
   remark #25439: unrolled with remainder by 2  
LOOP END

LOOP BEGIN at mp.f90(602,21)
<Remainder, Multiversioned v2>
LOOP END

    Report from: Code generation optimizations [cg]

mp.f90(597,14):remark #34051: REGISTER ALLOCATION : [mp_mp_bcastfromto_integer_array_] mp.f90:597

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :   15[ rax rdx rcx rbx rsi rdi r8-r15 zmm0]
        
    Routine temporaries
        Total         :      72
            Global    :      37
            Local     :      35
        Regenerable   :       8
        Spilled       :       6
        
    Routine stack
        Variables     :       8 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       1 [1.00e+00 ~ 0.9%]
        Spills        :       8 bytes*
            Reads     :       1 [2.25e-01 ~ 0.2%]
            Writes    :       1 [2.25e-01 ~ 0.2%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: MP::BCASTFROMTO_REAL

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (MP::BCASTFROMTO_REAL) [46] mp.f90(605,14)


    Report from: Code generation optimizations [cg]

mp.f90(605,14):remark #34051: REGISTER ALLOCATION : [mp_mp_bcastfromto_real_] mp.f90:605

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :    7[ rax rdx rcx rsi rdi r8-r9]
        
    Routine temporaries
        Total         :      22
            Global    :       6
            Local     :      16
        Regenerable   :       7
        Spilled       :       0
        
    Routine stack
        Variables     :       4 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
        Spills        :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: MP::BCASTFROMTO_REAL_ARRAY

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (MP::BCASTFROMTO_REAL_ARRAY) [47] mp.f90(613,14)


    Report from: Loop nest, Vector & Auto-parallelization optimizations [loop, vec, par]


LOOP BEGIN at mp.f90(618,21)
<Multiversioned v1>
   remark #25233: Loop multiversioned for stride tests on Assumed shape arrays
   remark #15300: LOOP WAS VECTORIZED
LOOP END

LOOP BEGIN at mp.f90(618,21)
<Remainder loop for vectorization, Multiversioned v1>
LOOP END

LOOP BEGIN at mp.f90(618,21)
<Multiversioned v2>
   remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
   remark #25439: unrolled with remainder by 2  
LOOP END

LOOP BEGIN at mp.f90(618,21)
<Remainder, Multiversioned v2>
LOOP END

LOOP BEGIN at mp.f90(618,21)
<Multiversioned v1>
   remark #25233: Loop multiversioned for stride tests on Assumed shape arrays
   remark #15300: LOOP WAS VECTORIZED
LOOP END

LOOP BEGIN at mp.f90(618,21)
<Alternate Alignment Vectorized Loop, Multiversioned v1>
LOOP END

LOOP BEGIN at mp.f90(618,21)
<Remainder loop for vectorization, Multiversioned v1>
LOOP END

LOOP BEGIN at mp.f90(618,21)
<Multiversioned v2>
   remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
   remark #25439: unrolled with remainder by 2  
LOOP END

LOOP BEGIN at mp.f90(618,21)
<Remainder, Multiversioned v2>
LOOP END

    Report from: Code generation optimizations [cg]

mp.f90(613,14):remark #34051: REGISTER ALLOCATION : [mp_mp_bcastfromto_real_array_] mp.f90:613

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :   15[ rax rdx rcx rbx rsi rdi r8-r15 zmm0]
        
    Routine temporaries
        Total         :      72
            Global    :      37
            Local     :      35
        Regenerable   :       8
        Spilled       :       6
        
    Routine stack
        Variables     :       8 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       1 [1.00e+00 ~ 0.9%]
        Spills        :       8 bytes*
            Reads     :       1 [2.25e-01 ~ 0.2%]
            Writes    :       1 [2.25e-01 ~ 0.2%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: MP::BCASTFROMTO_DOUBLE

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (MP::BCASTFROMTO_DOUBLE) [48] mp.f90(621,14)


    Report from: Code generation optimizations [cg]

mp.f90(621,14):remark #34051: REGISTER ALLOCATION : [mp_mp_bcastfromto_double_] mp.f90:621

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :    7[ rax rdx rcx rsi rdi r8-r9]
        
    Routine temporaries
        Total         :      22
            Global    :       6
            Local     :      16
        Regenerable   :       7
        Spilled       :       0
        
    Routine stack
        Variables     :       4 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
        Spills        :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: MP::BCASTFROMTO_DOUBLE_ARRAY

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (MP::BCASTFROMTO_DOUBLE_ARRAY) [49] mp.f90(629,14)


    Report from: Loop nest, Vector & Auto-parallelization optimizations [loop, vec, par]


LOOP BEGIN at mp.f90(634,21)
<Multiversioned v1>
   remark #25233: Loop multiversioned for stride tests on Assumed shape arrays
   remark #15300: LOOP WAS VECTORIZED
LOOP END

LOOP BEGIN at mp.f90(634,21)
<Remainder loop for vectorization, Multiversioned v1>
LOOP END

LOOP BEGIN at mp.f90(634,21)
<Multiversioned v2>
   remark #15300: LOOP WAS VECTORIZED
LOOP END

LOOP BEGIN at mp.f90(634,21)
<Remainder loop for vectorization, Multiversioned v2>
LOOP END

LOOP BEGIN at mp.f90(634,21)
<Multiversioned v1>
   remark #25233: Loop multiversioned for stride tests on Assumed shape arrays
   remark #15300: LOOP WAS VECTORIZED
LOOP END

LOOP BEGIN at mp.f90(634,21)
<Alternate Alignment Vectorized Loop, Multiversioned v1>
LOOP END

LOOP BEGIN at mp.f90(634,21)
<Remainder loop for vectorization, Multiversioned v1>
LOOP END

LOOP BEGIN at mp.f90(634,21)
<Multiversioned v2>
   remark #15300: LOOP WAS VECTORIZED
LOOP END

LOOP BEGIN at mp.f90(634,21)
<Remainder loop for vectorization, Multiversioned v2>
LOOP END

    Report from: Code generation optimizations [cg]

mp.f90(629,14):remark #34051: REGISTER ALLOCATION : [mp_mp_bcastfromto_double_array_] mp.f90:629

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :   15[ rax rdx rcx rbx rsi rdi r8-r15 zmm0]
        
    Routine temporaries
        Total         :      63
            Global    :      31
            Local     :      32
        Regenerable   :       8
        Spilled       :       5
        
    Routine stack
        Variables     :       8 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       1 [1.00e+00 ~ 0.7%]
        Spills        :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: MP::BCASTFROMTO_COMPLEX

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (MP::BCASTFROMTO_COMPLEX) [50] mp.f90(638,14)


    Report from: Code generation optimizations [cg]

mp.f90(638,14):remark #34051: REGISTER ALLOCATION : [mp_mp_bcastfromto_complex_] mp.f90:638

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :    7[ rax rdx rcx rsi rdi r8-r9]
        
    Routine temporaries
        Total         :      22
            Global    :       6
            Local     :      16
        Regenerable   :       7
        Spilled       :       0
        
    Routine stack
        Variables     :       4 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
        Spills        :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: MP::BCASTFROMTO_COMPLEX_ARRAY

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (MP::BCASTFROMTO_COMPLEX_ARRAY) [51] mp.f90(646,14)


    Report from: Loop nest, Vector & Auto-parallelization optimizations [loop, vec, par]


LOOP BEGIN at mp.f90(651,21)
<Multiversioned v1>
   remark #25233: Loop multiversioned for stride tests on Assumed shape arrays
   remark #15300: LOOP WAS VECTORIZED
LOOP END

LOOP BEGIN at mp.f90(651,21)
<Remainder loop for vectorization, Multiversioned v1>
LOOP END

LOOP BEGIN at mp.f90(651,21)
<Multiversioned v2>
   remark #15300: LOOP WAS VECTORIZED
LOOP END

LOOP BEGIN at mp.f90(651,21)
<Remainder loop for vectorization, Multiversioned v2>
LOOP END

LOOP BEGIN at mp.f90(651,21)
<Multiversioned v1>
   remark #25233: Loop multiversioned for stride tests on Assumed shape arrays
   remark #15300: LOOP WAS VECTORIZED
LOOP END

LOOP BEGIN at mp.f90(651,21)
<Alternate Alignment Vectorized Loop, Multiversioned v1>
LOOP END

LOOP BEGIN at mp.f90(651,21)
<Remainder loop for vectorization, Multiversioned v1>
LOOP END

LOOP BEGIN at mp.f90(651,21)
<Multiversioned v2>
   remark #15300: LOOP WAS VECTORIZED
LOOP END

LOOP BEGIN at mp.f90(651,21)
<Remainder loop for vectorization, Multiversioned v2>
LOOP END

    Report from: Code generation optimizations [cg]

mp.f90(646,14):remark #34051: REGISTER ALLOCATION : [mp_mp_bcastfromto_complex_array_] mp.f90:646

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :   15[ rax rdx rcx rbx rsi rdi r8-r15 zmm0]
        
    Routine temporaries
        Total         :      63
            Global    :      31
            Local     :      32
        Regenerable   :       8
        Spilled       :       5
        
    Routine stack
        Variables     :       8 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       1 [1.00e+00 ~ 0.7%]
        Spills        :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: MP::BCASTFROMTO_DOUBLE_COMPLEX

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (MP::BCASTFROMTO_DOUBLE_COMPLEX) [52] mp.f90(654,14)


    Report from: Code generation optimizations [cg]

mp.f90(654,14):remark #34051: REGISTER ALLOCATION : [mp_mp_bcastfromto_double_complex_] mp.f90:654

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :    7[ rax rdx rcx rsi rdi r8-r9]
        
    Routine temporaries
        Total         :      22
            Global    :       6
            Local     :      16
        Regenerable   :       7
        Spilled       :       0
        
    Routine stack
        Variables     :       4 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
        Spills        :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: MP::BCASTFROMTO_DOUBLE_COMPLEX_ARRAY

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (MP::BCASTFROMTO_DOUBLE_COMPLEX_ARRAY) [53] mp.f90(662,14)


    Report from: Loop nest, Vector & Auto-parallelization optimizations [loop, vec, par]


LOOP BEGIN at mp.f90(667,21)
<Multiversioned v1>
   remark #25233: Loop multiversioned for stride tests on Assumed shape arrays
   remark #15516: loop was not vectorized: cost model has chosen vectorlength of 1 -- maybe possible to override via pragma/directive with vectorlength clause
   remark #25439: unrolled with remainder by 2  
LOOP END

LOOP BEGIN at mp.f90(667,21)
<Remainder, Multiversioned v1>
LOOP END

LOOP BEGIN at mp.f90(667,21)
<Multiversioned v2>
   remark #15516: loop was not vectorized: cost model has chosen vectorlength of 1 -- maybe possible to override via pragma/directive with vectorlength clause
   remark #25439: unrolled with remainder by 2  
LOOP END

LOOP BEGIN at mp.f90(667,21)
<Remainder, Multiversioned v2>
LOOP END

LOOP BEGIN at mp.f90(667,21)
<Multiversioned v1>
   remark #25233: Loop multiversioned for stride tests on Assumed shape arrays
   remark #15516: loop was not vectorized: cost model has chosen vectorlength of 1 -- maybe possible to override via pragma/directive with vectorlength clause
   remark #25439: unrolled with remainder by 2  
LOOP END

LOOP BEGIN at mp.f90(667,21)
<Remainder, Multiversioned v1>
LOOP END

LOOP BEGIN at mp.f90(667,21)
<Multiversioned v2>
   remark #15516: loop was not vectorized: cost model has chosen vectorlength of 1 -- maybe possible to override via pragma/directive with vectorlength clause
   remark #25439: unrolled with remainder by 2  
LOOP END

LOOP BEGIN at mp.f90(667,21)
<Remainder, Multiversioned v2>
LOOP END

    Report from: Code generation optimizations [cg]

mp.f90(662,14):remark #34051: REGISTER ALLOCATION : [mp_mp_bcastfromto_double_complex_array_] mp.f90:662

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :   16[ rax rdx rcx rbx rsi rdi r8-r15 zmm0-zmm1]
        
    Routine temporaries
        Total         :      82
            Global    :      42
            Local     :      40
        Regenerable   :       8
        Spilled       :       7
        
    Routine stack
        Variables     :       8 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       1 [1.00e+00 ~ 1.1%]
        Spills        :       8 bytes*
            Reads     :       1 [2.25e-01 ~ 0.2%]
            Writes    :       1 [2.25e-01 ~ 0.2%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: MP::BCASTFROMTO_LOGICAL

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (MP::BCASTFROMTO_LOGICAL) [54] mp.f90(670,14)


    Report from: Code generation optimizations [cg]

mp.f90(670,14):remark #34051: REGISTER ALLOCATION : [mp_mp_bcastfromto_logical_] mp.f90:670

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :    7[ rax rdx rcx rsi rdi r8-r9]
        
    Routine temporaries
        Total         :      22
            Global    :       6
            Local     :      16
        Regenerable   :       7
        Spilled       :       0
        
    Routine stack
        Variables     :       4 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
        Spills        :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: MP::BCASTFROMTO_LOGICAL_ARRAY

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (MP::BCASTFROMTO_LOGICAL_ARRAY) [55] mp.f90(678,14)


    Report from: Loop nest, Vector & Auto-parallelization optimizations [loop, vec, par]


LOOP BEGIN at mp.f90(683,21)
<Multiversioned v1>
   remark #25233: Loop multiversioned for stride tests on Assumed shape arrays
   remark #15300: LOOP WAS VECTORIZED
LOOP END

LOOP BEGIN at mp.f90(683,21)
<Remainder loop for vectorization, Multiversioned v1>
LOOP END

LOOP BEGIN at mp.f90(683,21)
<Multiversioned v2>
   remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
   remark #25439: unrolled with remainder by 2  
LOOP END

LOOP BEGIN at mp.f90(683,21)
<Remainder, Multiversioned v2>
LOOP END

LOOP BEGIN at mp.f90(683,21)
<Multiversioned v1>
   remark #25233: Loop multiversioned for stride tests on Assumed shape arrays
   remark #15300: LOOP WAS VECTORIZED
LOOP END

LOOP BEGIN at mp.f90(683,21)
<Alternate Alignment Vectorized Loop, Multiversioned v1>
LOOP END

LOOP BEGIN at mp.f90(683,21)
<Remainder loop for vectorization, Multiversioned v1>
LOOP END

LOOP BEGIN at mp.f90(683,21)
<Multiversioned v2>
   remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
   remark #25439: unrolled with remainder by 2  
LOOP END

LOOP BEGIN at mp.f90(683,21)
<Remainder, Multiversioned v2>
LOOP END

    Report from: Code generation optimizations [cg]

mp.f90(678,14):remark #34051: REGISTER ALLOCATION : [mp_mp_bcastfromto_logical_array_] mp.f90:678

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :   15[ rax rdx rcx rbx rsi rdi r8-r15 zmm0]
        
    Routine temporaries
        Total         :      72
            Global    :      37
            Local     :      35
        Regenerable   :       8
        Spilled       :       6
        
    Routine stack
        Variables     :       8 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       1 [1.00e+00 ~ 0.9%]
        Spills        :       8 bytes*
            Reads     :       1 [2.25e-01 ~ 0.2%]
            Writes    :       1 [2.25e-01 ~ 0.2%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: MP::SUM_REDUCE_INTEGER

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (MP::SUM_REDUCE_INTEGER) [56] mp.f90(689,14)


    Report from: Code generation optimizations [cg]

mp.f90(689,14):remark #34051: REGISTER ALLOCATION : [mp_mp_sum_reduce_integer_] mp.f90:689

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :    9[ rax rdx rcx rsi rdi r8-r11]
        
    Routine temporaries
        Total         :      24
            Global    :       6
            Local     :      18
        Regenerable   :      11
        Spilled       :       0
        
    Routine stack
        Variables     :       8 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       1 [1.00e+00 ~ 3.6%]
        Spills        :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: MP::SUM_REDUCE_INTEGER_ARRAY

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (MP::SUM_REDUCE_INTEGER_ARRAY) [57] mp.f90(699,14)


    Report from: Loop nest, Vector & Auto-parallelization optimizations [loop, vec, par]


LOOP BEGIN at mp.f90(705,5)
<Multiversioned v1>
   remark #25233: Loop multiversioned for stride tests on Assumed shape arrays
   remark #15300: LOOP WAS VECTORIZED
LOOP END

LOOP BEGIN at mp.f90(705,5)
<Remainder loop for vectorization, Multiversioned v1>
LOOP END

LOOP BEGIN at mp.f90(705,5)
<Multiversioned v2>
   remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
   remark #25439: unrolled with remainder by 2  
LOOP END

LOOP BEGIN at mp.f90(705,5)
<Remainder, Multiversioned v2>
LOOP END

LOOP BEGIN at mp.f90(707,15)
<Multiversioned v1>
   remark #25233: Loop multiversioned for stride tests on Assumed shape arrays
   remark #15300: LOOP WAS VECTORIZED
LOOP END

LOOP BEGIN at mp.f90(707,15)
<Remainder loop for vectorization, Multiversioned v1>
LOOP END

LOOP BEGIN at mp.f90(707,15)
<Multiversioned v2>
   remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
   remark #25439: unrolled with remainder by 2  
LOOP END

LOOP BEGIN at mp.f90(707,15)
<Remainder, Multiversioned v2>
LOOP END

LOOP BEGIN at mp.f90(707,15)
<Multiversioned v1>
   remark #25233: Loop multiversioned for stride tests on Assumed shape arrays
   remark #15300: LOOP WAS VECTORIZED
LOOP END

LOOP BEGIN at mp.f90(707,15)
<Alternate Alignment Vectorized Loop, Multiversioned v1>
LOOP END

LOOP BEGIN at mp.f90(707,15)
<Remainder loop for vectorization, Multiversioned v1>
LOOP END

LOOP BEGIN at mp.f90(707,15)
<Multiversioned v2>
   remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
   remark #25439: unrolled with remainder by 2  
LOOP END

LOOP BEGIN at mp.f90(707,15)
<Remainder, Multiversioned v2>
LOOP END

    Report from: Code generation optimizations [cg]

mp.f90(699,14):remark #34051: REGISTER ALLOCATION : [mp_mp_sum_reduce_integer_array_] mp.f90:699

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :   15[ rax rdx rcx rbx rsi rdi r8-r15 zmm0]
        
    Routine temporaries
        Total         :      97
            Global    :      51
            Local     :      46
        Regenerable   :      11
        Spilled       :       7
        
    Routine stack
        Variables     :       8 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       1 [1.00e+00 ~ 0.6%]
        Spills        :      16 bytes*
            Reads     :       2 [1.23e+00 ~ 0.7%]
            Writes    :       2 [1.13e+00 ~ 0.6%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: MP::SUM_REDUCE_REAL

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (MP::SUM_REDUCE_REAL) [58] mp.f90(710,14)


    Report from: Code generation optimizations [cg]

mp.f90(710,14):remark #34051: REGISTER ALLOCATION : [mp_mp_sum_reduce_real_] mp.f90:710

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :    9[ rax rdx rcx rsi rdi r8-r11]
        
    Routine temporaries
        Total         :      24
            Global    :       6
            Local     :      18
        Regenerable   :      11
        Spilled       :       0
        
    Routine stack
        Variables     :       8 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       1 [1.00e+00 ~ 3.6%]
        Spills        :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: MP::SUM_REDUCE_REAL_ARRAY

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (MP::SUM_REDUCE_REAL_ARRAY) [59] mp.f90(722,14)


    Report from: Loop nest, Vector & Auto-parallelization optimizations [loop, vec, par]


LOOP BEGIN at mp.f90(728,5)
<Multiversioned v1>
   remark #25233: Loop multiversioned for stride tests on Assumed shape arrays
   remark #15300: LOOP WAS VECTORIZED
LOOP END

LOOP BEGIN at mp.f90(728,5)
<Remainder loop for vectorization, Multiversioned v1>
LOOP END

LOOP BEGIN at mp.f90(728,5)
<Multiversioned v2>
   remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
   remark #25439: unrolled with remainder by 2  
LOOP END

LOOP BEGIN at mp.f90(728,5)
<Remainder, Multiversioned v2>
LOOP END

LOOP BEGIN at mp.f90(730,15)
<Multiversioned v1>
   remark #25233: Loop multiversioned for stride tests on Assumed shape arrays
   remark #15300: LOOP WAS VECTORIZED
LOOP END

LOOP BEGIN at mp.f90(730,15)
<Remainder loop for vectorization, Multiversioned v1>
LOOP END

LOOP BEGIN at mp.f90(730,15)
<Multiversioned v2>
   remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
   remark #25439: unrolled with remainder by 2  
LOOP END

LOOP BEGIN at mp.f90(730,15)
<Remainder, Multiversioned v2>
LOOP END

LOOP BEGIN at mp.f90(730,15)
<Multiversioned v1>
   remark #25233: Loop multiversioned for stride tests on Assumed shape arrays
   remark #15300: LOOP WAS VECTORIZED
LOOP END

LOOP BEGIN at mp.f90(730,15)
<Alternate Alignment Vectorized Loop, Multiversioned v1>
LOOP END

LOOP BEGIN at mp.f90(730,15)
<Remainder loop for vectorization, Multiversioned v1>
LOOP END

LOOP BEGIN at mp.f90(730,15)
<Multiversioned v2>
   remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
   remark #25439: unrolled with remainder by 2  
LOOP END

LOOP BEGIN at mp.f90(730,15)
<Remainder, Multiversioned v2>
LOOP END

    Report from: Code generation optimizations [cg]

mp.f90(722,14):remark #34051: REGISTER ALLOCATION : [mp_mp_sum_reduce_real_array_] mp.f90:722

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :   15[ rax rdx rcx rbx rsi rdi r8-r15 zmm0]
        
    Routine temporaries
        Total         :      97
            Global    :      51
            Local     :      46
        Regenerable   :      11
        Spilled       :       7
        
    Routine stack
        Variables     :       8 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       1 [1.00e+00 ~ 0.6%]
        Spills        :      16 bytes*
            Reads     :       2 [1.23e+00 ~ 0.7%]
            Writes    :       2 [1.13e+00 ~ 0.6%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: MP::SUM_REDUCE_DOUBLE

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (MP::SUM_REDUCE_DOUBLE) [60] mp.f90(733,14)


    Report from: Code generation optimizations [cg]

mp.f90(733,14):remark #34051: REGISTER ALLOCATION : [mp_mp_sum_reduce_double_] mp.f90:733

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :    9[ rax rdx rcx rsi rdi r8-r11]
        
    Routine temporaries
        Total         :      24
            Global    :       6
            Local     :      18
        Regenerable   :      11
        Spilled       :       0
        
    Routine stack
        Variables     :      12 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       1 [1.00e+00 ~ 3.6%]
        Spills        :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: MP::SUM_REDUCE_DOUBLE_ARRAY

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (MP::SUM_REDUCE_DOUBLE_ARRAY) [61] mp.f90(745,14)


    Report from: Loop nest, Vector & Auto-parallelization optimizations [loop, vec, par]


LOOP BEGIN at mp.f90(751,5)
<Multiversioned v1>
   remark #25233: Loop multiversioned for stride tests on Assumed shape arrays
   remark #15300: LOOP WAS VECTORIZED
LOOP END

LOOP BEGIN at mp.f90(751,5)
<Remainder loop for vectorization, Multiversioned v1>
LOOP END

LOOP BEGIN at mp.f90(751,5)
<Multiversioned v2>
   remark #15300: LOOP WAS VECTORIZED
LOOP END

LOOP BEGIN at mp.f90(751,5)
<Remainder loop for vectorization, Multiversioned v2>
LOOP END

LOOP BEGIN at mp.f90(753,15)
<Multiversioned v1>
   remark #25233: Loop multiversioned for stride tests on Assumed shape arrays
   remark #15300: LOOP WAS VECTORIZED
LOOP END

LOOP BEGIN at mp.f90(753,15)
<Remainder loop for vectorization, Multiversioned v1>
LOOP END

LOOP BEGIN at mp.f90(753,15)
<Multiversioned v2>
   remark #15300: LOOP WAS VECTORIZED
LOOP END

LOOP BEGIN at mp.f90(753,15)
<Remainder loop for vectorization, Multiversioned v2>
LOOP END

LOOP BEGIN at mp.f90(753,15)
<Multiversioned v1>
   remark #25233: Loop multiversioned for stride tests on Assumed shape arrays
   remark #15300: LOOP WAS VECTORIZED
LOOP END

LOOP BEGIN at mp.f90(753,15)
<Alternate Alignment Vectorized Loop, Multiversioned v1>
LOOP END

LOOP BEGIN at mp.f90(753,15)
<Remainder loop for vectorization, Multiversioned v1>
LOOP END

LOOP BEGIN at mp.f90(753,15)
<Multiversioned v2>
   remark #15300: LOOP WAS VECTORIZED
LOOP END

LOOP BEGIN at mp.f90(753,15)
<Remainder loop for vectorization, Multiversioned v2>
LOOP END

    Report from: Code generation optimizations [cg]

mp.f90(745,14):remark #34051: REGISTER ALLOCATION : [mp_mp_sum_reduce_double_array_] mp.f90:745

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :   15[ rax rdx rcx rbx rsi rdi r8-r15 zmm0]
        
    Routine temporaries
        Total         :      84
            Global    :      42
            Local     :      42
        Regenerable   :      11
        Spilled       :       6
        
    Routine stack
        Variables     :       8 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       1 [1.00e+00 ~ 0.4%]
        Spills        :       8 bytes*
            Reads     :       8 [2.08e+00 ~ 0.9%]
            Writes    :       1 [3.00e-01 ~ 0.1%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: MP::SUM_REDUCE_COMPLEX

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (MP::SUM_REDUCE_COMPLEX) [62] mp.f90(756,14)


    Report from: Code generation optimizations [cg]

mp.f90(756,14):remark #34051: REGISTER ALLOCATION : [mp_mp_sum_reduce_complex_] mp.f90:756

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :    9[ rax rdx rcx rsi rdi r8-r11]
        
    Routine temporaries
        Total         :      24
            Global    :       6
            Local     :      18
        Regenerable   :      11
        Spilled       :       0
        
    Routine stack
        Variables     :      12 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       1 [1.00e+00 ~ 3.6%]
        Spills        :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: MP::SUM_REDUCE_COMPLEX_ARRAY

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (MP::SUM_REDUCE_COMPLEX_ARRAY) [63] mp.f90(767,14)


    Report from: Loop nest, Vector & Auto-parallelization optimizations [loop, vec, par]


LOOP BEGIN at mp.f90(773,5)
<Multiversioned v1>
   remark #25233: Loop multiversioned for stride tests on Assumed shape arrays
   remark #15300: LOOP WAS VECTORIZED
LOOP END

LOOP BEGIN at mp.f90(773,5)
<Remainder loop for vectorization, Multiversioned v1>
LOOP END

LOOP BEGIN at mp.f90(773,5)
<Multiversioned v2>
   remark #15300: LOOP WAS VECTORIZED
LOOP END

LOOP BEGIN at mp.f90(773,5)
<Remainder loop for vectorization, Multiversioned v2>
LOOP END

LOOP BEGIN at mp.f90(775,15)
<Multiversioned v1>
   remark #25233: Loop multiversioned for stride tests on Assumed shape arrays
   remark #15300: LOOP WAS VECTORIZED
LOOP END

LOOP BEGIN at mp.f90(775,15)
<Remainder loop for vectorization, Multiversioned v1>
LOOP END

LOOP BEGIN at mp.f90(775,15)
<Multiversioned v2>
   remark #15300: LOOP WAS VECTORIZED
LOOP END

LOOP BEGIN at mp.f90(775,15)
<Remainder loop for vectorization, Multiversioned v2>
LOOP END

LOOP BEGIN at mp.f90(775,15)
<Multiversioned v1>
   remark #25233: Loop multiversioned for stride tests on Assumed shape arrays
   remark #15300: LOOP WAS VECTORIZED
LOOP END

LOOP BEGIN at mp.f90(775,15)
<Alternate Alignment Vectorized Loop, Multiversioned v1>
LOOP END

LOOP BEGIN at mp.f90(775,15)
<Remainder loop for vectorization, Multiversioned v1>
LOOP END

LOOP BEGIN at mp.f90(775,15)
<Multiversioned v2>
   remark #15300: LOOP WAS VECTORIZED
LOOP END

LOOP BEGIN at mp.f90(775,15)
<Remainder loop for vectorization, Multiversioned v2>
LOOP END

    Report from: Code generation optimizations [cg]

mp.f90(767,14):remark #34051: REGISTER ALLOCATION : [mp_mp_sum_reduce_complex_array_] mp.f90:767

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :   15[ rax rdx rcx rbx rsi rdi r8-r15 zmm0]
        
    Routine temporaries
        Total         :      84
            Global    :      42
            Local     :      42
        Regenerable   :      11
        Spilled       :       6
        
    Routine stack
        Variables     :       8 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       1 [1.00e+00 ~ 0.4%]
        Spills        :       8 bytes*
            Reads     :       8 [2.08e+00 ~ 0.9%]
            Writes    :       1 [3.00e-01 ~ 0.1%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: MP::SUM_REDUCE_DOUBLE_COMPLEX

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (MP::SUM_REDUCE_DOUBLE_COMPLEX) [64] mp.f90(778,14)


    Report from: Code generation optimizations [cg]

mp.f90(778,14):remark #34051: REGISTER ALLOCATION : [mp_mp_sum_reduce_double_complex_] mp.f90:778

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :    9[ rax rdx rcx rsi rdi r8-r10 zmm0]
        
    Routine temporaries
        Total         :      24
            Global    :       6
            Local     :      18
        Regenerable   :      11
        Spilled       :       0
        
    Routine stack
        Variables     :      20 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       1 [1.00e+00 ~ 3.6%]
        Spills        :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: MP::SUM_REDUCE_DOUBLE_COMPLEX_ARRAY

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (MP::SUM_REDUCE_DOUBLE_COMPLEX_ARRAY) [65] mp.f90(789,14)


    Report from: Loop nest, Vector & Auto-parallelization optimizations [loop, vec, par]


LOOP BEGIN at mp.f90(795,5)
<Multiversioned v1>
   remark #25233: Loop multiversioned for stride tests on Assumed shape arrays
   remark #15516: loop was not vectorized: cost model has chosen vectorlength of 1 -- maybe possible to override via pragma/directive with vectorlength clause
   remark #25439: unrolled with remainder by 2  
LOOP END

LOOP BEGIN at mp.f90(795,5)
<Remainder, Multiversioned v1>
LOOP END

LOOP BEGIN at mp.f90(795,5)
<Multiversioned v2>
   remark #15516: loop was not vectorized: cost model has chosen vectorlength of 1 -- maybe possible to override via pragma/directive with vectorlength clause
   remark #25439: unrolled with remainder by 2  
LOOP END

LOOP BEGIN at mp.f90(795,5)
<Remainder, Multiversioned v2>
LOOP END

LOOP BEGIN at mp.f90(797,15)
<Multiversioned v1>
   remark #25233: Loop multiversioned for stride tests on Assumed shape arrays
   remark #15516: loop was not vectorized: cost model has chosen vectorlength of 1 -- maybe possible to override via pragma/directive with vectorlength clause
   remark #25439: unrolled with remainder by 2  
LOOP END

LOOP BEGIN at mp.f90(797,15)
<Remainder, Multiversioned v1>
LOOP END

LOOP BEGIN at mp.f90(797,15)
<Multiversioned v2>
   remark #15516: loop was not vectorized: cost model has chosen vectorlength of 1 -- maybe possible to override via pragma/directive with vectorlength clause
   remark #25439: unrolled with remainder by 2  
LOOP END

LOOP BEGIN at mp.f90(797,15)
<Remainder, Multiversioned v2>
LOOP END

LOOP BEGIN at mp.f90(797,15)
<Multiversioned v1>
   remark #25233: Loop multiversioned for stride tests on Assumed shape arrays
   remark #15516: loop was not vectorized: cost model has chosen vectorlength of 1 -- maybe possible to override via pragma/directive with vectorlength clause
   remark #25439: unrolled with remainder by 2  
LOOP END

LOOP BEGIN at mp.f90(797,15)
<Remainder, Multiversioned v1>
LOOP END

LOOP BEGIN at mp.f90(797,15)
<Multiversioned v2>
   remark #15516: loop was not vectorized: cost model has chosen vectorlength of 1 -- maybe possible to override via pragma/directive with vectorlength clause
   remark #25439: unrolled with remainder by 2  
LOOP END

LOOP BEGIN at mp.f90(797,15)
<Remainder, Multiversioned v2>
LOOP END

    Report from: Code generation optimizations [cg]

mp.f90(789,14):remark #34051: REGISTER ALLOCATION : [mp_mp_sum_reduce_double_complex_array_] mp.f90:789

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :   16[ rax rdx rcx rbx rsi rdi r8-r15 zmm0-zmm1]
        
    Routine temporaries
        Total         :     112
            Global    :      58
            Local     :      54
        Regenerable   :      11
        Spilled       :       8
        
    Routine stack
        Variables     :       8 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       1 [1.00e+00 ~ 0.7%]
        Spills        :      16 bytes*
            Reads     :       2 [1.23e+00 ~ 0.8%]
            Writes    :       2 [1.13e+00 ~ 0.8%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: MP::SUM_ALLREDUCE_INTEGER

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (MP::SUM_ALLREDUCE_INTEGER) [66] mp.f90(801,14)


    Report from: Code generation optimizations [cg]

mp.f90(801,14):remark #34051: REGISTER ALLOCATION : [mp_mp_sum_allreduce_integer_] mp.f90:801

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :    7[ rax rdx rcx rsi rdi r8-r9]
        
    Routine temporaries
        Total         :      22
            Global    :       6
            Local     :      16
        Regenerable   :      12
        Spilled       :       0
        
    Routine stack
        Variables     :       8 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       1 [1.00e+00 ~ 3.8%]
        Spills        :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: MP::SUM_ALLREDUCE_INTEGER_ARRAY

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (MP::SUM_ALLREDUCE_INTEGER_ARRAY) [67] mp.f90(810,14)


    Report from: Loop nest, Vector & Auto-parallelization optimizations [loop, vec, par]


LOOP BEGIN at mp.f90(815,5)
<Multiversioned v1>
   remark #25233: Loop multiversioned for stride tests on Assumed shape arrays
   remark #15300: LOOP WAS VECTORIZED
LOOP END

LOOP BEGIN at mp.f90(815,5)
<Remainder loop for vectorization, Multiversioned v1>
LOOP END

LOOP BEGIN at mp.f90(815,5)
<Multiversioned v2>
   remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
   remark #25439: unrolled with remainder by 2  
LOOP END

LOOP BEGIN at mp.f90(815,5)
<Remainder, Multiversioned v2>
LOOP END

LOOP BEGIN at mp.f90(817,15)
<Multiversioned v1>
   remark #25233: Loop multiversioned for stride tests on Assumed shape arrays
   remark #15300: LOOP WAS VECTORIZED
LOOP END

LOOP BEGIN at mp.f90(817,15)
<Remainder loop for vectorization, Multiversioned v1>
LOOP END

LOOP BEGIN at mp.f90(817,15)
<Multiversioned v2>
   remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
   remark #25439: unrolled with remainder by 2  
LOOP END

LOOP BEGIN at mp.f90(817,15)
<Remainder, Multiversioned v2>
LOOP END

LOOP BEGIN at mp.f90(817,15)
<Multiversioned v1>
   remark #25233: Loop multiversioned for stride tests on Assumed shape arrays
   remark #15300: LOOP WAS VECTORIZED
LOOP END

LOOP BEGIN at mp.f90(817,15)
<Alternate Alignment Vectorized Loop, Multiversioned v1>
LOOP END

LOOP BEGIN at mp.f90(817,15)
<Remainder loop for vectorization, Multiversioned v1>
LOOP END

LOOP BEGIN at mp.f90(817,15)
<Multiversioned v2>
   remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
   remark #25439: unrolled with remainder by 2  
LOOP END

LOOP BEGIN at mp.f90(817,15)
<Remainder, Multiversioned v2>
LOOP END

    Report from: Code generation optimizations [cg]

mp.f90(810,14):remark #34051: REGISTER ALLOCATION : [mp_mp_sum_allreduce_integer_array_] mp.f90:810

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :   15[ rax rdx rcx rbx rsi rdi r8-r15 zmm0]
        
    Routine temporaries
        Total         :      95
            Global    :      50
            Local     :      45
        Regenerable   :      12
        Spilled       :       6
        
    Routine stack
        Variables     :       8 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       1 [1.00e+00 ~ 0.6%]
        Spills        :       8 bytes*
            Reads     :       1 [1.00e+00 ~ 0.6%]
            Writes    :       1 [9.00e-01 ~ 0.5%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: MP::SUM_ALLREDUCE_REAL

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (MP::SUM_ALLREDUCE_REAL) [68] mp.f90(820,14)


    Report from: Code generation optimizations [cg]

mp.f90(820,14):remark #34051: REGISTER ALLOCATION : [mp_mp_sum_allreduce_real_] mp.f90:820

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :    7[ rax rdx rcx rsi rdi r8-r9]
        
    Routine temporaries
        Total         :      22
            Global    :       6
            Local     :      16
        Regenerable   :      12
        Spilled       :       0
        
    Routine stack
        Variables     :       8 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       1 [1.00e+00 ~ 3.8%]
        Spills        :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: MP::SUM_ALLREDUCE_REAL_ARRAY

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (MP::SUM_ALLREDUCE_REAL_ARRAY) [69] mp.f90(830,14)


    Report from: Loop nest, Vector & Auto-parallelization optimizations [loop, vec, par]


LOOP BEGIN at mp.f90(835,5)
<Multiversioned v1>
   remark #25233: Loop multiversioned for stride tests on Assumed shape arrays
   remark #15300: LOOP WAS VECTORIZED
LOOP END

LOOP BEGIN at mp.f90(835,5)
<Remainder loop for vectorization, Multiversioned v1>
LOOP END

LOOP BEGIN at mp.f90(835,5)
<Multiversioned v2>
   remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
   remark #25439: unrolled with remainder by 2  
LOOP END

LOOP BEGIN at mp.f90(835,5)
<Remainder, Multiversioned v2>
LOOP END

LOOP BEGIN at mp.f90(837,15)
<Multiversioned v1>
   remark #25233: Loop multiversioned for stride tests on Assumed shape arrays
   remark #15300: LOOP WAS VECTORIZED
LOOP END

LOOP BEGIN at mp.f90(837,15)
<Remainder loop for vectorization, Multiversioned v1>
LOOP END

LOOP BEGIN at mp.f90(837,15)
<Multiversioned v2>
   remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
   remark #25439: unrolled with remainder by 2  
LOOP END

LOOP BEGIN at mp.f90(837,15)
<Remainder, Multiversioned v2>
LOOP END

LOOP BEGIN at mp.f90(837,15)
<Multiversioned v1>
   remark #25233: Loop multiversioned for stride tests on Assumed shape arrays
   remark #15300: LOOP WAS VECTORIZED
LOOP END

LOOP BEGIN at mp.f90(837,15)
<Alternate Alignment Vectorized Loop, Multiversioned v1>
LOOP END

LOOP BEGIN at mp.f90(837,15)
<Remainder loop for vectorization, Multiversioned v1>
LOOP END

LOOP BEGIN at mp.f90(837,15)
<Multiversioned v2>
   remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
   remark #25439: unrolled with remainder by 2  
LOOP END

LOOP BEGIN at mp.f90(837,15)
<Remainder, Multiversioned v2>
LOOP END

    Report from: Code generation optimizations [cg]

mp.f90(830,14):remark #34051: REGISTER ALLOCATION : [mp_mp_sum_allreduce_real_array_] mp.f90:830

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :   15[ rax rdx rcx rbx rsi rdi r8-r15 zmm0]
        
    Routine temporaries
        Total         :      95
            Global    :      50
            Local     :      45
        Regenerable   :      12
        Spilled       :       6
        
    Routine stack
        Variables     :       8 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       1 [1.00e+00 ~ 0.6%]
        Spills        :       8 bytes*
            Reads     :       1 [1.00e+00 ~ 0.6%]
            Writes    :       1 [9.00e-01 ~ 0.5%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: MP::SUM_ALLREDUCE_DOUBLE

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (MP::SUM_ALLREDUCE_DOUBLE) [70] mp.f90(840,14)


    Report from: Code generation optimizations [cg]

mp.f90(840,14):remark #34051: REGISTER ALLOCATION : [mp_mp_sum_allreduce_double_] mp.f90:840

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :    7[ rax rdx rcx rsi rdi r8-r9]
        
    Routine temporaries
        Total         :      22
            Global    :       6
            Local     :      16
        Regenerable   :      12
        Spilled       :       0
        
    Routine stack
        Variables     :      12 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       1 [1.00e+00 ~ 3.8%]
        Spills        :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: MP::SUM_ALLREDUCE_DOUBLE_ARRAY

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (MP::SUM_ALLREDUCE_DOUBLE_ARRAY) [71] mp.f90(850,14)


    Report from: Loop nest, Vector & Auto-parallelization optimizations [loop, vec, par]


LOOP BEGIN at mp.f90(855,5)
<Multiversioned v1>
   remark #25233: Loop multiversioned for stride tests on Assumed shape arrays
   remark #15300: LOOP WAS VECTORIZED
LOOP END

LOOP BEGIN at mp.f90(855,5)
<Remainder loop for vectorization, Multiversioned v1>
LOOP END

LOOP BEGIN at mp.f90(855,5)
<Multiversioned v2>
   remark #15300: LOOP WAS VECTORIZED
LOOP END

LOOP BEGIN at mp.f90(855,5)
<Remainder loop for vectorization, Multiversioned v2>
LOOP END

LOOP BEGIN at mp.f90(857,15)
<Multiversioned v1>
   remark #25233: Loop multiversioned for stride tests on Assumed shape arrays
   remark #15300: LOOP WAS VECTORIZED
LOOP END

LOOP BEGIN at mp.f90(857,15)
<Remainder loop for vectorization, Multiversioned v1>
LOOP END

LOOP BEGIN at mp.f90(857,15)
<Multiversioned v2>
   remark #15300: LOOP WAS VECTORIZED
LOOP END

LOOP BEGIN at mp.f90(857,15)
<Remainder loop for vectorization, Multiversioned v2>
LOOP END

LOOP BEGIN at mp.f90(857,15)
<Multiversioned v1>
   remark #25233: Loop multiversioned for stride tests on Assumed shape arrays
   remark #15300: LOOP WAS VECTORIZED
LOOP END

LOOP BEGIN at mp.f90(857,15)
<Alternate Alignment Vectorized Loop, Multiversioned v1>
LOOP END

LOOP BEGIN at mp.f90(857,15)
<Remainder loop for vectorization, Multiversioned v1>
LOOP END

LOOP BEGIN at mp.f90(857,15)
<Multiversioned v2>
   remark #15300: LOOP WAS VECTORIZED
LOOP END

LOOP BEGIN at mp.f90(857,15)
<Remainder loop for vectorization, Multiversioned v2>
LOOP END

    Report from: Code generation optimizations [cg]

mp.f90(850,14):remark #34051: REGISTER ALLOCATION : [mp_mp_sum_allreduce_double_array_] mp.f90:850

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :   15[ rax rdx rcx rbx rsi rdi r8-r15 zmm0]
        
    Routine temporaries
        Total         :      82
            Global    :      41
            Local     :      41
        Regenerable   :      12
        Spilled       :       6
        
    Routine stack
        Variables     :       8 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       1 [1.00e+00 ~ 0.5%]
        Spills        :       8 bytes*
            Reads     :       8 [2.08e+00 ~ 0.9%]
            Writes    :       1 [3.00e-01 ~ 0.1%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: MP::SUM_ALLREDUCE_COMPLEX

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (MP::SUM_ALLREDUCE_COMPLEX) [72] mp.f90(860,14)


    Report from: Code generation optimizations [cg]

mp.f90(860,14):remark #34051: REGISTER ALLOCATION : [mp_mp_sum_allreduce_complex_] mp.f90:860

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :    7[ rax rdx rcx rsi rdi r8-r9]
        
    Routine temporaries
        Total         :      22
            Global    :       6
            Local     :      16
        Regenerable   :      12
        Spilled       :       0
        
    Routine stack
        Variables     :      12 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       1 [1.00e+00 ~ 3.8%]
        Spills        :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: MP::SUM_ALLREDUCE_COMPLEX_ARRAY

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (MP::SUM_ALLREDUCE_COMPLEX_ARRAY) [73] mp.f90(870,14)


    Report from: Loop nest, Vector & Auto-parallelization optimizations [loop, vec, par]


LOOP BEGIN at mp.f90(875,5)
<Multiversioned v1>
   remark #25233: Loop multiversioned for stride tests on Assumed shape arrays
   remark #15300: LOOP WAS VECTORIZED
LOOP END

LOOP BEGIN at mp.f90(875,5)
<Remainder loop for vectorization, Multiversioned v1>
LOOP END

LOOP BEGIN at mp.f90(875,5)
<Multiversioned v2>
   remark #15300: LOOP WAS VECTORIZED
LOOP END

LOOP BEGIN at mp.f90(875,5)
<Remainder loop for vectorization, Multiversioned v2>
LOOP END

LOOP BEGIN at mp.f90(877,15)
<Multiversioned v1>
   remark #25233: Loop multiversioned for stride tests on Assumed shape arrays
   remark #15300: LOOP WAS VECTORIZED
LOOP END

LOOP BEGIN at mp.f90(877,15)
<Remainder loop for vectorization, Multiversioned v1>
LOOP END

LOOP BEGIN at mp.f90(877,15)
<Multiversioned v2>
   remark #15300: LOOP WAS VECTORIZED
LOOP END

LOOP BEGIN at mp.f90(877,15)
<Remainder loop for vectorization, Multiversioned v2>
LOOP END

LOOP BEGIN at mp.f90(877,15)
<Multiversioned v1>
   remark #25233: Loop multiversioned for stride tests on Assumed shape arrays
   remark #15300: LOOP WAS VECTORIZED
LOOP END

LOOP BEGIN at mp.f90(877,15)
<Alternate Alignment Vectorized Loop, Multiversioned v1>
LOOP END

LOOP BEGIN at mp.f90(877,15)
<Remainder loop for vectorization, Multiversioned v1>
LOOP END

LOOP BEGIN at mp.f90(877,15)
<Multiversioned v2>
   remark #15300: LOOP WAS VECTORIZED
LOOP END

LOOP BEGIN at mp.f90(877,15)
<Remainder loop for vectorization, Multiversioned v2>
LOOP END

    Report from: Code generation optimizations [cg]

mp.f90(870,14):remark #34051: REGISTER ALLOCATION : [mp_mp_sum_allreduce_complex_array_] mp.f90:870

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :   15[ rax rdx rcx rbx rsi rdi r8-r15 zmm0]
        
    Routine temporaries
        Total         :      82
            Global    :      41
            Local     :      41
        Regenerable   :      12
        Spilled       :       6
        
    Routine stack
        Variables     :       8 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       1 [1.00e+00 ~ 0.5%]
        Spills        :       8 bytes*
            Reads     :       8 [2.08e+00 ~ 0.9%]
            Writes    :       1 [3.00e-01 ~ 0.1%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: MP::SUM_ALLREDUCE_DOUBLE_COMPLEX

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (MP::SUM_ALLREDUCE_DOUBLE_COMPLEX) [74] mp.f90(880,14)


    Report from: Code generation optimizations [cg]

mp.f90(880,14):remark #34051: REGISTER ALLOCATION : [mp_mp_sum_allreduce_double_complex_] mp.f90:880

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :    8[ rax rdx rcx rsi rdi r8-r9 zmm0]
        
    Routine temporaries
        Total         :      22
            Global    :       6
            Local     :      16
        Regenerable   :      12
        Spilled       :       0
        
    Routine stack
        Variables     :      20 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       1 [1.00e+00 ~ 3.8%]
        Spills        :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: MP::SUM_ALLREDUCE_DOUBLE_COMPLEX_ARRAY

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (MP::SUM_ALLREDUCE_DOUBLE_COMPLEX_ARRAY) [75] mp.f90(890,14)


    Report from: Loop nest, Vector & Auto-parallelization optimizations [loop, vec, par]


LOOP BEGIN at mp.f90(895,5)
<Multiversioned v1>
   remark #25233: Loop multiversioned for stride tests on Assumed shape arrays
   remark #15516: loop was not vectorized: cost model has chosen vectorlength of 1 -- maybe possible to override via pragma/directive with vectorlength clause
   remark #25439: unrolled with remainder by 2  
LOOP END

LOOP BEGIN at mp.f90(895,5)
<Remainder, Multiversioned v1>
LOOP END

LOOP BEGIN at mp.f90(895,5)
<Multiversioned v2>
   remark #15516: loop was not vectorized: cost model has chosen vectorlength of 1 -- maybe possible to override via pragma/directive with vectorlength clause
   remark #25439: unrolled with remainder by 2  
LOOP END

LOOP BEGIN at mp.f90(895,5)
<Remainder, Multiversioned v2>
LOOP END

LOOP BEGIN at mp.f90(897,15)
<Multiversioned v1>
   remark #25233: Loop multiversioned for stride tests on Assumed shape arrays
   remark #15516: loop was not vectorized: cost model has chosen vectorlength of 1 -- maybe possible to override via pragma/directive with vectorlength clause
   remark #25439: unrolled with remainder by 2  
LOOP END

LOOP BEGIN at mp.f90(897,15)
<Remainder, Multiversioned v1>
LOOP END

LOOP BEGIN at mp.f90(897,15)
<Multiversioned v2>
   remark #15516: loop was not vectorized: cost model has chosen vectorlength of 1 -- maybe possible to override via pragma/directive with vectorlength clause
   remark #25439: unrolled with remainder by 2  
LOOP END

LOOP BEGIN at mp.f90(897,15)
<Remainder, Multiversioned v2>
LOOP END

LOOP BEGIN at mp.f90(897,15)
<Multiversioned v1>
   remark #25233: Loop multiversioned for stride tests on Assumed shape arrays
   remark #15516: loop was not vectorized: cost model has chosen vectorlength of 1 -- maybe possible to override via pragma/directive with vectorlength clause
   remark #25439: unrolled with remainder by 2  
LOOP END

LOOP BEGIN at mp.f90(897,15)
<Remainder, Multiversioned v1>
LOOP END

LOOP BEGIN at mp.f90(897,15)
<Multiversioned v2>
   remark #15516: loop was not vectorized: cost model has chosen vectorlength of 1 -- maybe possible to override via pragma/directive with vectorlength clause
   remark #25439: unrolled with remainder by 2  
LOOP END

LOOP BEGIN at mp.f90(897,15)
<Remainder, Multiversioned v2>
LOOP END

    Report from: Code generation optimizations [cg]

mp.f90(890,14):remark #34051: REGISTER ALLOCATION : [mp_mp_sum_allreduce_double_complex_array_] mp.f90:890

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :   16[ rax rdx rcx rbx rsi rdi r8-r15 zmm0-zmm1]
        
    Routine temporaries
        Total         :     110
            Global    :      57
            Local     :      53
        Regenerable   :      12
        Spilled       :       6
        
    Routine stack
        Variables     :       8 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       1 [1.00e+00 ~ 0.7%]
        Spills        :       8 bytes*
            Reads     :       1 [1.00e+00 ~ 0.7%]
            Writes    :       1 [9.00e-01 ~ 0.6%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: MP::BARRIER

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (MP::BARRIER) [76] mp.f90(901,14)


    Report from: Code generation optimizations [cg]

mp.f90(901,14):remark #34051: REGISTER ALLOCATION : [mp_mp_barrier_] mp.f90:901

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :    3[ rax rsi rdi]
        
    Routine temporaries
        Total         :      11
            Global    :       6
            Local     :       5
        Regenerable   :       5
        Spilled       :       0
        
    Routine stack
        Variables     :       4 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
        Spills        :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: MP::SEND_INTEGER

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (MP::SEND_INTEGER) [77] mp.f90(907,14)


    Report from: Code generation optimizations [cg]

mp.f90(907,14):remark #34051: REGISTER ALLOCATION : [mp_mp_send_integer_] mp.f90:907

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :    7[ rax rdx rcx rsi rdi r8-r9]
        
    Routine temporaries
        Total         :      25
            Global    :       9
            Local     :      16
        Regenerable   :      10
        Spilled       :       0
        
    Routine stack
        Variables     :       8 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       2 [5.20e-01 ~ 1.9%]
        Spills        :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: MP::SEND_INTEGER_ARRAY

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (MP::SEND_INTEGER_ARRAY) [78] mp.f90(919,14)


    Report from: Loop nest, Vector & Auto-parallelization optimizations [loop, vec, par]


LOOP BEGIN at mp.f90(928,20)
<Multiversioned v1>
   remark #25233: Loop multiversioned for stride tests on Assumed shape arrays
   remark #15300: LOOP WAS VECTORIZED
LOOP END

LOOP BEGIN at mp.f90(928,20)
<Remainder loop for vectorization, Multiversioned v1>
LOOP END

LOOP BEGIN at mp.f90(928,20)
<Multiversioned v2>
   remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
   remark #25439: unrolled with remainder by 2  
LOOP END

LOOP BEGIN at mp.f90(928,20)
<Remainder, Multiversioned v2>
LOOP END

    Report from: Code generation optimizations [cg]

mp.f90(919,14):remark #34051: REGISTER ALLOCATION : [mp_mp_send_integer_array_] mp.f90:919

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :   12[ rax rdx rcx rsi rdi r8-r12 r14 zmm0]
        
    Routine temporaries
        Total         :      53
            Global    :      24
            Local     :      29
        Regenerable   :      11
        Spilled       :       2
        
    Routine stack
        Variables     :      12 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       3 [1.52e+00 ~ 2.1%]
        Spills        :       8 bytes*
            Reads     :       1 [2.25e-01 ~ 0.3%]
            Writes    :       1 [2.25e-01 ~ 0.3%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: MP::SEND_REAL

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (MP::SEND_REAL) [79] mp.f90(931,14)


    Report from: Code generation optimizations [cg]

mp.f90(931,14):remark #34051: REGISTER ALLOCATION : [mp_mp_send_real_] mp.f90:931

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :    7[ rax rdx rcx rsi rdi r8-r9]
        
    Routine temporaries
        Total         :      25
            Global    :       9
            Local     :      16
        Regenerable   :      10
        Spilled       :       0
        
    Routine stack
        Variables     :       8 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       2 [5.20e-01 ~ 1.9%]
        Spills        :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: MP::SEND_REAL_ARRAY

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (MP::SEND_REAL_ARRAY) [80] mp.f90(943,14)


    Report from: Loop nest, Vector & Auto-parallelization optimizations [loop, vec, par]


LOOP BEGIN at mp.f90(952,20)
<Multiversioned v1>
   remark #25233: Loop multiversioned for stride tests on Assumed shape arrays
   remark #15300: LOOP WAS VECTORIZED
LOOP END

LOOP BEGIN at mp.f90(952,20)
<Remainder loop for vectorization, Multiversioned v1>
LOOP END

LOOP BEGIN at mp.f90(952,20)
<Multiversioned v2>
   remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
   remark #25439: unrolled with remainder by 2  
LOOP END

LOOP BEGIN at mp.f90(952,20)
<Remainder, Multiversioned v2>
LOOP END

    Report from: Code generation optimizations [cg]

mp.f90(943,14):remark #34051: REGISTER ALLOCATION : [mp_mp_send_real_array_] mp.f90:943

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :   12[ rax rdx rcx rsi rdi r8-r12 r14 zmm0]
        
    Routine temporaries
        Total         :      53
            Global    :      24
            Local     :      29
        Regenerable   :      11
        Spilled       :       2
        
    Routine stack
        Variables     :      12 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       3 [1.52e+00 ~ 2.1%]
        Spills        :       8 bytes*
            Reads     :       1 [2.25e-01 ~ 0.3%]
            Writes    :       1 [2.25e-01 ~ 0.3%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: MP::SEND_DOUBLE

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (MP::SEND_DOUBLE) [81] mp.f90(955,14)


    Report from: Code generation optimizations [cg]

mp.f90(955,14):remark #34051: REGISTER ALLOCATION : [mp_mp_send_double_] mp.f90:955

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :    7[ rax rdx rcx rsi rdi r8-r9]
        
    Routine temporaries
        Total         :      25
            Global    :       9
            Local     :      16
        Regenerable   :      10
        Spilled       :       0
        
    Routine stack
        Variables     :       8 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       2 [5.20e-01 ~ 1.9%]
        Spills        :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: MP::SEND_DOUBLE_ARRAY

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (MP::SEND_DOUBLE_ARRAY) [82] mp.f90(967,14)


    Report from: Loop nest, Vector & Auto-parallelization optimizations [loop, vec, par]


LOOP BEGIN at mp.f90(976,20)
<Multiversioned v1>
   remark #25233: Loop multiversioned for stride tests on Assumed shape arrays
   remark #15300: LOOP WAS VECTORIZED
LOOP END

LOOP BEGIN at mp.f90(976,20)
<Remainder loop for vectorization, Multiversioned v1>
LOOP END

LOOP BEGIN at mp.f90(976,20)
<Multiversioned v2>
   remark #15300: LOOP WAS VECTORIZED
LOOP END

LOOP BEGIN at mp.f90(976,20)
<Remainder loop for vectorization, Multiversioned v2>
LOOP END

    Report from: Code generation optimizations [cg]

mp.f90(967,14):remark #34051: REGISTER ALLOCATION : [mp_mp_send_double_array_] mp.f90:967

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :   11[ rax rdx rcx rsi rdi r8-r11 r13 zmm0]
        
    Routine temporaries
        Total         :      49
            Global    :      21
            Local     :      28
        Regenerable   :      11
        Spilled       :       1
        
    Routine stack
        Variables     :      12 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       3 [1.52e+00 ~ 1.9%]
        Spills        :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: MP::SEND_COMPLEX

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (MP::SEND_COMPLEX) [83] mp.f90(980,14)


    Report from: Code generation optimizations [cg]

mp.f90(980,14):remark #34051: REGISTER ALLOCATION : [mp_mp_send_complex_] mp.f90:980

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :    7[ rax rdx rcx rsi rdi r8-r9]
        
    Routine temporaries
        Total         :      25
            Global    :       9
            Local     :      16
        Regenerable   :      10
        Spilled       :       0
        
    Routine stack
        Variables     :       8 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       2 [5.20e-01 ~ 1.9%]
        Spills        :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: MP::SEND_COMPLEX_ARRAY

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (MP::SEND_COMPLEX_ARRAY) [84] mp.f90(992,14)


    Report from: Loop nest, Vector & Auto-parallelization optimizations [loop, vec, par]


LOOP BEGIN at mp.f90(1001,20)
<Multiversioned v1>
   remark #25233: Loop multiversioned for stride tests on Assumed shape arrays
   remark #15300: LOOP WAS VECTORIZED
LOOP END

LOOP BEGIN at mp.f90(1001,20)
<Remainder loop for vectorization, Multiversioned v1>
LOOP END

LOOP BEGIN at mp.f90(1001,20)
<Multiversioned v2>
   remark #15300: LOOP WAS VECTORIZED
LOOP END

LOOP BEGIN at mp.f90(1001,20)
<Remainder loop for vectorization, Multiversioned v2>
LOOP END

    Report from: Code generation optimizations [cg]

mp.f90(992,14):remark #34051: REGISTER ALLOCATION : [mp_mp_send_complex_array_] mp.f90:992

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :   11[ rax rdx rcx rsi rdi r8-r11 r13 zmm0]
        
    Routine temporaries
        Total         :      49
            Global    :      21
            Local     :      28
        Regenerable   :      11
        Spilled       :       1
        
    Routine stack
        Variables     :      12 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       3 [1.52e+00 ~ 1.9%]
        Spills        :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: MP::SEND_DOUBLE_COMPLEX

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (MP::SEND_DOUBLE_COMPLEX) [85] mp.f90(1004,14)


    Report from: Code generation optimizations [cg]

mp.f90(1004,14):remark #34051: REGISTER ALLOCATION : [mp_mp_send_double_complex_] mp.f90:1004

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :    7[ rax rdx rcx rsi rdi r8-r9]
        
    Routine temporaries
        Total         :      25
            Global    :       9
            Local     :      16
        Regenerable   :      10
        Spilled       :       0
        
    Routine stack
        Variables     :       8 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       2 [5.20e-01 ~ 1.9%]
        Spills        :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: MP::SEND_DOUBLE_COMPLEX_ARRAY

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (MP::SEND_DOUBLE_COMPLEX_ARRAY) [86] mp.f90(1016,14)


    Report from: Loop nest, Vector & Auto-parallelization optimizations [loop, vec, par]


LOOP BEGIN at mp.f90(1025,20)
<Multiversioned v1>
   remark #25233: Loop multiversioned for stride tests on Assumed shape arrays
   remark #15516: loop was not vectorized: cost model has chosen vectorlength of 1 -- maybe possible to override via pragma/directive with vectorlength clause
   remark #25439: unrolled with remainder by 2  
LOOP END

LOOP BEGIN at mp.f90(1025,20)
<Remainder, Multiversioned v1>
LOOP END

LOOP BEGIN at mp.f90(1025,20)
<Multiversioned v2>
   remark #15516: loop was not vectorized: cost model has chosen vectorlength of 1 -- maybe possible to override via pragma/directive with vectorlength clause
   remark #25439: unrolled with remainder by 2  
LOOP END

LOOP BEGIN at mp.f90(1025,20)
<Remainder, Multiversioned v2>
LOOP END

    Report from: Code generation optimizations [cg]

mp.f90(1016,14):remark #34051: REGISTER ALLOCATION : [mp_mp_send_double_complex_array_] mp.f90:1016

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :   13[ rax rdx rcx rsi rdi r8-r11 r13-r14 zmm0-zmm1]
        
    Routine temporaries
        Total         :      57
            Global    :      25
            Local     :      32
        Regenerable   :      11
        Spilled       :       2
        
    Routine stack
        Variables     :      12 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       3 [1.52e+00 ~ 2.2%]
        Spills        :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: MP::SEND_LOGICAL

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (MP::SEND_LOGICAL) [87] mp.f90(1028,14)


    Report from: Code generation optimizations [cg]

mp.f90(1028,14):remark #34051: REGISTER ALLOCATION : [mp_mp_send_logical_] mp.f90:1028

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :    7[ rax rdx rcx rsi rdi r8-r9]
        
    Routine temporaries
        Total         :      25
            Global    :       9
            Local     :      16
        Regenerable   :      10
        Spilled       :       0
        
    Routine stack
        Variables     :       8 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       2 [5.20e-01 ~ 1.9%]
        Spills        :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: MP::SEND_LOGICAL_ARRAY

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (MP::SEND_LOGICAL_ARRAY) [88] mp.f90(1040,14)


    Report from: Loop nest, Vector & Auto-parallelization optimizations [loop, vec, par]


LOOP BEGIN at mp.f90(1049,20)
<Multiversioned v1>
   remark #25233: Loop multiversioned for stride tests on Assumed shape arrays
   remark #15300: LOOP WAS VECTORIZED
LOOP END

LOOP BEGIN at mp.f90(1049,20)
<Remainder loop for vectorization, Multiversioned v1>
LOOP END

LOOP BEGIN at mp.f90(1049,20)
<Multiversioned v2>
   remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
   remark #25439: unrolled with remainder by 2  
LOOP END

LOOP BEGIN at mp.f90(1049,20)
<Remainder, Multiversioned v2>
LOOP END

    Report from: Code generation optimizations [cg]

mp.f90(1040,14):remark #34051: REGISTER ALLOCATION : [mp_mp_send_logical_array_] mp.f90:1040

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :   12[ rax rdx rcx rsi rdi r8-r12 r14 zmm0]
        
    Routine temporaries
        Total         :      53
            Global    :      24
            Local     :      29
        Regenerable   :      11
        Spilled       :       2
        
    Routine stack
        Variables     :      12 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       3 [1.52e+00 ~ 2.1%]
        Spills        :       8 bytes*
            Reads     :       1 [2.25e-01 ~ 0.3%]
            Writes    :       1 [2.25e-01 ~ 0.3%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: MP::RECEIVE_INTEGER

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (MP::RECEIVE_INTEGER) [89] mp.f90(1052,14)


    Report from: Code generation optimizations [cg]

mp.f90(1052,14):remark #34051: REGISTER ALLOCATION : [mp_mp_receive_integer_] mp.f90:1052

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :    7[ rax rdx rcx rsi rdi r8-r9]
        
    Routine temporaries
        Total         :      26
            Global    :       9
            Local     :      17
        Regenerable   :      11
        Spilled       :       0
        
    Routine stack
        Variables     :       8 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       2 [5.20e-01 ~ 1.8%]
        Spills        :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: MP::RECEIVE_INTEGER_ARRAY

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (MP::RECEIVE_INTEGER_ARRAY) [90] mp.f90(1066,14)


    Report from: Loop nest, Vector & Auto-parallelization optimizations [loop, vec, par]


LOOP BEGIN at mp.f90(1076,20)
<Multiversioned v1>
   remark #25233: Loop multiversioned for stride tests on Assumed shape arrays
   remark #15300: LOOP WAS VECTORIZED
LOOP END

LOOP BEGIN at mp.f90(1076,20)
<Remainder loop for vectorization, Multiversioned v1>
LOOP END

LOOP BEGIN at mp.f90(1076,20)
<Multiversioned v2>
   remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
   remark #25439: unrolled with remainder by 2  
LOOP END

LOOP BEGIN at mp.f90(1076,20)
<Remainder, Multiversioned v2>
LOOP END

LOOP BEGIN at mp.f90(1076,20)
<Multiversioned v1>
   remark #25233: Loop multiversioned for stride tests on Assumed shape arrays
   remark #15300: LOOP WAS VECTORIZED
LOOP END

LOOP BEGIN at mp.f90(1076,20)
<Alternate Alignment Vectorized Loop, Multiversioned v1>
LOOP END

LOOP BEGIN at mp.f90(1076,20)
<Remainder loop for vectorization, Multiversioned v1>
LOOP END

LOOP BEGIN at mp.f90(1076,20)
<Multiversioned v2>
   remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
   remark #25439: unrolled with remainder by 2  
LOOP END

LOOP BEGIN at mp.f90(1076,20)
<Remainder, Multiversioned v2>
LOOP END

    Report from: Code generation optimizations [cg]

mp.f90(1066,14):remark #34051: REGISTER ALLOCATION : [mp_mp_receive_integer_array_] mp.f90:1066

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :   15[ rax rdx rcx rbx rsi rdi r8-r15 zmm0]
        
    Routine temporaries
        Total         :      76
            Global    :      37
            Local     :      39
        Regenerable   :      12
        Spilled       :       5
        
    Routine stack
        Variables     :      12 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       3 [1.52e+00 ~ 1.2%]
        Spills        :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: MP::RECEIVE_REAL

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (MP::RECEIVE_REAL) [91] mp.f90(1080,14)


    Report from: Code generation optimizations [cg]

mp.f90(1080,14):remark #34051: REGISTER ALLOCATION : [mp_mp_receive_real_] mp.f90:1080

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :    7[ rax rdx rcx rsi rdi r8-r9]
        
    Routine temporaries
        Total         :      26
            Global    :       9
            Local     :      17
        Regenerable   :      11
        Spilled       :       0
        
    Routine stack
        Variables     :       8 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       2 [5.20e-01 ~ 1.8%]
        Spills        :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: MP::RECEIVE_REAL_ARRAY

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (MP::RECEIVE_REAL_ARRAY) [92] mp.f90(1094,14)


    Report from: Loop nest, Vector & Auto-parallelization optimizations [loop, vec, par]


LOOP BEGIN at mp.f90(1104,20)
<Multiversioned v1>
   remark #25233: Loop multiversioned for stride tests on Assumed shape arrays
   remark #15300: LOOP WAS VECTORIZED
LOOP END

LOOP BEGIN at mp.f90(1104,20)
<Remainder loop for vectorization, Multiversioned v1>
LOOP END

LOOP BEGIN at mp.f90(1104,20)
<Multiversioned v2>
   remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
   remark #25439: unrolled with remainder by 2  
LOOP END

LOOP BEGIN at mp.f90(1104,20)
<Remainder, Multiversioned v2>
LOOP END

LOOP BEGIN at mp.f90(1104,20)
<Multiversioned v1>
   remark #25233: Loop multiversioned for stride tests on Assumed shape arrays
   remark #15300: LOOP WAS VECTORIZED
LOOP END

LOOP BEGIN at mp.f90(1104,20)
<Alternate Alignment Vectorized Loop, Multiversioned v1>
LOOP END

LOOP BEGIN at mp.f90(1104,20)
<Remainder loop for vectorization, Multiversioned v1>
LOOP END

LOOP BEGIN at mp.f90(1104,20)
<Multiversioned v2>
   remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
   remark #25439: unrolled with remainder by 2  
LOOP END

LOOP BEGIN at mp.f90(1104,20)
<Remainder, Multiversioned v2>
LOOP END

    Report from: Code generation optimizations [cg]

mp.f90(1094,14):remark #34051: REGISTER ALLOCATION : [mp_mp_receive_real_array_] mp.f90:1094

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :   15[ rax rdx rcx rbx rsi rdi r8-r15 zmm0]
        
    Routine temporaries
        Total         :      76
            Global    :      37
            Local     :      39
        Regenerable   :      12
        Spilled       :       5
        
    Routine stack
        Variables     :      12 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       3 [1.52e+00 ~ 1.2%]
        Spills        :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: MP::RECEIVE_DOUBLE

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (MP::RECEIVE_DOUBLE) [93] mp.f90(1108,14)


    Report from: Code generation optimizations [cg]

mp.f90(1108,14):remark #34051: REGISTER ALLOCATION : [mp_mp_receive_double_] mp.f90:1108

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :    7[ rax rdx rcx rsi rdi r8-r9]
        
    Routine temporaries
        Total         :      26
            Global    :       9
            Local     :      17
        Regenerable   :      11
        Spilled       :       0
        
    Routine stack
        Variables     :       8 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       2 [5.20e-01 ~ 1.8%]
        Spills        :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: MP::RECEIVE_DOUBLE_ARRAY

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (MP::RECEIVE_DOUBLE_ARRAY) [94] mp.f90(1122,14)


    Report from: Loop nest, Vector & Auto-parallelization optimizations [loop, vec, par]


LOOP BEGIN at mp.f90(1132,20)
<Multiversioned v1>
   remark #25233: Loop multiversioned for stride tests on Assumed shape arrays
   remark #15300: LOOP WAS VECTORIZED
LOOP END

LOOP BEGIN at mp.f90(1132,20)
<Remainder loop for vectorization, Multiversioned v1>
LOOP END

LOOP BEGIN at mp.f90(1132,20)
<Multiversioned v2>
   remark #15300: LOOP WAS VECTORIZED
LOOP END

LOOP BEGIN at mp.f90(1132,20)
<Remainder loop for vectorization, Multiversioned v2>
LOOP END

LOOP BEGIN at mp.f90(1132,20)
<Multiversioned v1>
   remark #25233: Loop multiversioned for stride tests on Assumed shape arrays
   remark #15300: LOOP WAS VECTORIZED
LOOP END

LOOP BEGIN at mp.f90(1132,20)
<Alternate Alignment Vectorized Loop, Multiversioned v1>
LOOP END

LOOP BEGIN at mp.f90(1132,20)
<Remainder loop for vectorization, Multiversioned v1>
LOOP END

LOOP BEGIN at mp.f90(1132,20)
<Multiversioned v2>
   remark #15300: LOOP WAS VECTORIZED
LOOP END

LOOP BEGIN at mp.f90(1132,20)
<Remainder loop for vectorization, Multiversioned v2>
LOOP END

    Report from: Code generation optimizations [cg]

mp.f90(1122,14):remark #34051: REGISTER ALLOCATION : [mp_mp_receive_double_array_] mp.f90:1122

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :   15[ rax rdx rcx rbx rsi rdi r8-r15 zmm0]
        
    Routine temporaries
        Total         :      67
            Global    :      31
            Local     :      36
        Regenerable   :      12
        Spilled       :       5
        
    Routine stack
        Variables     :      12 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       3 [1.52e+00 ~ 1.0%]
        Spills        :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: MP::RECEIVE_COMPLEX

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (MP::RECEIVE_COMPLEX) [95] mp.f90(1137,14)


    Report from: Code generation optimizations [cg]

mp.f90(1137,14):remark #34051: REGISTER ALLOCATION : [mp_mp_receive_complex_] mp.f90:1137

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :    7[ rax rdx rcx rsi rdi r8-r9]
        
    Routine temporaries
        Total         :      26
            Global    :       9
            Local     :      17
        Regenerable   :      11
        Spilled       :       0
        
    Routine stack
        Variables     :       8 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       2 [5.20e-01 ~ 1.8%]
        Spills        :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: MP::RECEIVE_COMPLEX_ARRAY

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (MP::RECEIVE_COMPLEX_ARRAY) [96] mp.f90(1151,14)


    Report from: Loop nest, Vector & Auto-parallelization optimizations [loop, vec, par]


LOOP BEGIN at mp.f90(1161,20)
<Multiversioned v1>
   remark #25233: Loop multiversioned for stride tests on Assumed shape arrays
   remark #15300: LOOP WAS VECTORIZED
LOOP END

LOOP BEGIN at mp.f90(1161,20)
<Remainder loop for vectorization, Multiversioned v1>
LOOP END

LOOP BEGIN at mp.f90(1161,20)
<Multiversioned v2>
   remark #15300: LOOP WAS VECTORIZED
LOOP END

LOOP BEGIN at mp.f90(1161,20)
<Remainder loop for vectorization, Multiversioned v2>
LOOP END

LOOP BEGIN at mp.f90(1161,20)
<Multiversioned v1>
   remark #25233: Loop multiversioned for stride tests on Assumed shape arrays
   remark #15300: LOOP WAS VECTORIZED
LOOP END

LOOP BEGIN at mp.f90(1161,20)
<Alternate Alignment Vectorized Loop, Multiversioned v1>
LOOP END

LOOP BEGIN at mp.f90(1161,20)
<Remainder loop for vectorization, Multiversioned v1>
LOOP END

LOOP BEGIN at mp.f90(1161,20)
<Multiversioned v2>
   remark #15300: LOOP WAS VECTORIZED
LOOP END

LOOP BEGIN at mp.f90(1161,20)
<Remainder loop for vectorization, Multiversioned v2>
LOOP END

    Report from: Code generation optimizations [cg]

mp.f90(1151,14):remark #34051: REGISTER ALLOCATION : [mp_mp_receive_complex_array_] mp.f90:1151

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :   15[ rax rdx rcx rbx rsi rdi r8-r15 zmm0]
        
    Routine temporaries
        Total         :      67
            Global    :      31
            Local     :      36
        Regenerable   :      12
        Spilled       :       5
        
    Routine stack
        Variables     :      12 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       3 [1.52e+00 ~ 1.0%]
        Spills        :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: MP::RECEIVE_DOUBLE_COMPLEX

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (MP::RECEIVE_DOUBLE_COMPLEX) [97] mp.f90(1165,14)


    Report from: Code generation optimizations [cg]

mp.f90(1165,14):remark #34051: REGISTER ALLOCATION : [mp_mp_receive_double_complex_] mp.f90:1165

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :    7[ rax rdx rcx rsi rdi r8-r9]
        
    Routine temporaries
        Total         :      26
            Global    :       9
            Local     :      17
        Regenerable   :      11
        Spilled       :       0
        
    Routine stack
        Variables     :       8 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       2 [5.20e-01 ~ 1.8%]
        Spills        :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: MP::RECEIVE_DOUBLE_COMPLEX_ARRAY

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (MP::RECEIVE_DOUBLE_COMPLEX_ARRAY) [98] mp.f90(1179,14)


    Report from: Loop nest, Vector & Auto-parallelization optimizations [loop, vec, par]


LOOP BEGIN at mp.f90(1189,20)
<Multiversioned v1>
   remark #25233: Loop multiversioned for stride tests on Assumed shape arrays
   remark #15516: loop was not vectorized: cost model has chosen vectorlength of 1 -- maybe possible to override via pragma/directive with vectorlength clause
   remark #25439: unrolled with remainder by 2  
LOOP END

LOOP BEGIN at mp.f90(1189,20)
<Remainder, Multiversioned v1>
LOOP END

LOOP BEGIN at mp.f90(1189,20)
<Multiversioned v2>
   remark #15516: loop was not vectorized: cost model has chosen vectorlength of 1 -- maybe possible to override via pragma/directive with vectorlength clause
   remark #25439: unrolled with remainder by 2  
LOOP END

LOOP BEGIN at mp.f90(1189,20)
<Remainder, Multiversioned v2>
LOOP END

LOOP BEGIN at mp.f90(1189,20)
<Multiversioned v1>
   remark #25233: Loop multiversioned for stride tests on Assumed shape arrays
   remark #15516: loop was not vectorized: cost model has chosen vectorlength of 1 -- maybe possible to override via pragma/directive with vectorlength clause
   remark #25439: unrolled with remainder by 2  
LOOP END

LOOP BEGIN at mp.f90(1189,20)
<Remainder, Multiversioned v1>
LOOP END

LOOP BEGIN at mp.f90(1189,20)
<Multiversioned v2>
   remark #15516: loop was not vectorized: cost model has chosen vectorlength of 1 -- maybe possible to override via pragma/directive with vectorlength clause
   remark #25439: unrolled with remainder by 2  
LOOP END

LOOP BEGIN at mp.f90(1189,20)
<Remainder, Multiversioned v2>
LOOP END

    Report from: Code generation optimizations [cg]

mp.f90(1179,14):remark #34051: REGISTER ALLOCATION : [mp_mp_receive_double_complex_array_] mp.f90:1179

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :   16[ rax rdx rcx rbx rsi rdi r8-r15 zmm0-zmm1]
        
    Routine temporaries
        Total         :      86
            Global    :      42
            Local     :      44
        Regenerable   :      12
        Spilled       :       5
        
    Routine stack
        Variables     :      12 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       3 [1.52e+00 ~ 1.5%]
        Spills        :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: MP::RECEIVE_LOGICAL

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (MP::RECEIVE_LOGICAL) [99] mp.f90(1194,14)


    Report from: Code generation optimizations [cg]

mp.f90(1194,14):remark #34051: REGISTER ALLOCATION : [mp_mp_receive_logical_] mp.f90:1194

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :    7[ rax rdx rcx rsi rdi r8-r9]
        
    Routine temporaries
        Total         :      26
            Global    :       9
            Local     :      17
        Regenerable   :      11
        Spilled       :       0
        
    Routine stack
        Variables     :       8 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       2 [5.20e-01 ~ 1.8%]
        Spills        :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: MP::RECEIVE_LOGICAL_ARRAY

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (MP::RECEIVE_LOGICAL_ARRAY) [100] mp.f90(1208,14)


    Report from: Loop nest, Vector & Auto-parallelization optimizations [loop, vec, par]


LOOP BEGIN at mp.f90(1218,20)
<Multiversioned v1>
   remark #25233: Loop multiversioned for stride tests on Assumed shape arrays
   remark #15300: LOOP WAS VECTORIZED
LOOP END

LOOP BEGIN at mp.f90(1218,20)
<Remainder loop for vectorization, Multiversioned v1>
LOOP END

LOOP BEGIN at mp.f90(1218,20)
<Multiversioned v2>
   remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
   remark #25439: unrolled with remainder by 2  
LOOP END

LOOP BEGIN at mp.f90(1218,20)
<Remainder, Multiversioned v2>
LOOP END

LOOP BEGIN at mp.f90(1218,20)
<Multiversioned v1>
   remark #25233: Loop multiversioned for stride tests on Assumed shape arrays
   remark #15300: LOOP WAS VECTORIZED
LOOP END

LOOP BEGIN at mp.f90(1218,20)
<Alternate Alignment Vectorized Loop, Multiversioned v1>
LOOP END

LOOP BEGIN at mp.f90(1218,20)
<Remainder loop for vectorization, Multiversioned v1>
LOOP END

LOOP BEGIN at mp.f90(1218,20)
<Multiversioned v2>
   remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
   remark #25439: unrolled with remainder by 2  
LOOP END

LOOP BEGIN at mp.f90(1218,20)
<Remainder, Multiversioned v2>
LOOP END

    Report from: Code generation optimizations [cg]

mp.f90(1208,14):remark #34051: REGISTER ALLOCATION : [mp_mp_receive_logical_array_] mp.f90:1208

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :   15[ rax rdx rcx rbx rsi rdi r8-r15 zmm0]
        
    Routine temporaries
        Total         :      76
            Global    :      37
            Local     :      39
        Regenerable   :      12
        Spilled       :       5
        
    Routine stack
        Variables     :      12 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       3 [1.52e+00 ~ 1.2%]
        Spills        :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: MP::ISEND_INTEGER

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (MP::ISEND_INTEGER) [101] mp.f90(1225,14)


    Report from: Code generation optimizations [cg]

mp.f90(1225,14):remark #34051: REGISTER ALLOCATION : [mp_mp_isend_integer_] mp.f90:1225

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :    7[ rax rdx rcx rsi rdi r8-r9]
        
    Routine temporaries
        Total         :      27
            Global    :      10
            Local     :      17
        Regenerable   :      10
        Spilled       :       0
        
    Routine stack
        Variables     :       8 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       2 [5.20e-01 ~ 1.7%]
        Spills        :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: MP::ISEND_INTEGER_ARRAY

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (MP::ISEND_INTEGER_ARRAY) [102] mp.f90(1238,14)


    Report from: Loop nest, Vector & Auto-parallelization optimizations [loop, vec, par]


LOOP BEGIN at mp.f90(1248,21)
<Multiversioned v1>
   remark #25233: Loop multiversioned for stride tests on Assumed shape arrays
   remark #15300: LOOP WAS VECTORIZED
LOOP END

LOOP BEGIN at mp.f90(1248,21)
<Remainder loop for vectorization, Multiversioned v1>
LOOP END

LOOP BEGIN at mp.f90(1248,21)
<Multiversioned v2>
   remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
   remark #25439: unrolled with remainder by 2  
LOOP END

LOOP BEGIN at mp.f90(1248,21)
<Remainder, Multiversioned v2>
LOOP END

    Report from: Code generation optimizations [cg]

mp.f90(1238,14):remark #34051: REGISTER ALLOCATION : [mp_mp_isend_integer_array_] mp.f90:1238

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :   13[ rax rdx rcx rsi rdi r8-r14 zmm0]
        
    Routine temporaries
        Total         :      55
            Global    :      25
            Local     :      30
        Regenerable   :      11
        Spilled       :       3
        
    Routine stack
        Variables     :      12 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       3 [1.52e+00 ~ 2.0%]
        Spills        :       8 bytes*
            Reads     :       1 [2.25e-01 ~ 0.3%]
            Writes    :       1 [2.25e-01 ~ 0.3%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: MP::ISEND_REAL

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (MP::ISEND_REAL) [103] mp.f90(1251,14)


    Report from: Code generation optimizations [cg]

mp.f90(1251,14):remark #34051: REGISTER ALLOCATION : [mp_mp_isend_real_] mp.f90:1251

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :    7[ rax rdx rcx rsi rdi r8-r9]
        
    Routine temporaries
        Total         :      27
            Global    :      10
            Local     :      17
        Regenerable   :      10
        Spilled       :       0
        
    Routine stack
        Variables     :       8 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       2 [5.20e-01 ~ 1.7%]
        Spills        :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: MP::ISEND_REAL_ARRAY

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (MP::ISEND_REAL_ARRAY) [104] mp.f90(1264,14)


    Report from: Loop nest, Vector & Auto-parallelization optimizations [loop, vec, par]


LOOP BEGIN at mp.f90(1274,21)
<Multiversioned v1>
   remark #25233: Loop multiversioned for stride tests on Assumed shape arrays
   remark #15300: LOOP WAS VECTORIZED
LOOP END

LOOP BEGIN at mp.f90(1274,21)
<Remainder loop for vectorization, Multiversioned v1>
LOOP END

LOOP BEGIN at mp.f90(1274,21)
<Multiversioned v2>
   remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
   remark #25439: unrolled with remainder by 2  
LOOP END

LOOP BEGIN at mp.f90(1274,21)
<Remainder, Multiversioned v2>
LOOP END

    Report from: Code generation optimizations [cg]

mp.f90(1264,14):remark #34051: REGISTER ALLOCATION : [mp_mp_isend_real_array_] mp.f90:1264

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :   13[ rax rdx rcx rsi rdi r8-r14 zmm0]
        
    Routine temporaries
        Total         :      55
            Global    :      25
            Local     :      30
        Regenerable   :      11
        Spilled       :       3
        
    Routine stack
        Variables     :      12 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       3 [1.52e+00 ~ 2.0%]
        Spills        :       8 bytes*
            Reads     :       1 [2.25e-01 ~ 0.3%]
            Writes    :       1 [2.25e-01 ~ 0.3%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: MP::ISEND_DOUBLE

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (MP::ISEND_DOUBLE) [105] mp.f90(1277,14)


    Report from: Code generation optimizations [cg]

mp.f90(1277,14):remark #34051: REGISTER ALLOCATION : [mp_mp_isend_double_] mp.f90:1277

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :    7[ rax rdx rcx rsi rdi r8-r9]
        
    Routine temporaries
        Total         :      27
            Global    :      10
            Local     :      17
        Regenerable   :      10
        Spilled       :       0
        
    Routine stack
        Variables     :       8 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       2 [5.20e-01 ~ 1.7%]
        Spills        :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: MP::ISEND_DOUBLE_ARRAY

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (MP::ISEND_DOUBLE_ARRAY) [106] mp.f90(1290,14)


    Report from: Loop nest, Vector & Auto-parallelization optimizations [loop, vec, par]


LOOP BEGIN at mp.f90(1300,21)
<Multiversioned v1>
   remark #25233: Loop multiversioned for stride tests on Assumed shape arrays
   remark #15300: LOOP WAS VECTORIZED
LOOP END

LOOP BEGIN at mp.f90(1300,21)
<Remainder loop for vectorization, Multiversioned v1>
LOOP END

LOOP BEGIN at mp.f90(1300,21)
<Multiversioned v2>
   remark #15300: LOOP WAS VECTORIZED
LOOP END

LOOP BEGIN at mp.f90(1300,21)
<Remainder loop for vectorization, Multiversioned v2>
LOOP END

    Report from: Code generation optimizations [cg]

mp.f90(1290,14):remark #34051: REGISTER ALLOCATION : [mp_mp_isend_double_array_] mp.f90:1290

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :   11[ rax rdx rcx rbx rsi rdi r8-r11 zmm0]
        
    Routine temporaries
        Total         :      51
            Global    :      22
            Local     :      29
        Regenerable   :      11
        Spilled       :       1
        
    Routine stack
        Variables     :      12 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       3 [1.52e+00 ~ 1.8%]
        Spills        :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: MP::ISEND_COMPLEX

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (MP::ISEND_COMPLEX) [107] mp.f90(1304,14)


    Report from: Code generation optimizations [cg]

mp.f90(1304,14):remark #34051: REGISTER ALLOCATION : [mp_mp_isend_complex_] mp.f90:1304

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :    7[ rax rdx rcx rsi rdi r8-r9]
        
    Routine temporaries
        Total         :      27
            Global    :      10
            Local     :      17
        Regenerable   :      10
        Spilled       :       0
        
    Routine stack
        Variables     :       8 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       2 [5.20e-01 ~ 1.7%]
        Spills        :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: MP::ISEND_COMPLEX_ARRAY

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (MP::ISEND_COMPLEX_ARRAY) [108] mp.f90(1317,14)


    Report from: Loop nest, Vector & Auto-parallelization optimizations [loop, vec, par]


LOOP BEGIN at mp.f90(1327,21)
<Multiversioned v1>
   remark #25233: Loop multiversioned for stride tests on Assumed shape arrays
   remark #15300: LOOP WAS VECTORIZED
LOOP END

LOOP BEGIN at mp.f90(1327,21)
<Remainder loop for vectorization, Multiversioned v1>
LOOP END

LOOP BEGIN at mp.f90(1327,21)
<Multiversioned v2>
   remark #15300: LOOP WAS VECTORIZED
LOOP END

LOOP BEGIN at mp.f90(1327,21)
<Remainder loop for vectorization, Multiversioned v2>
LOOP END

    Report from: Code generation optimizations [cg]

mp.f90(1317,14):remark #34051: REGISTER ALLOCATION : [mp_mp_isend_complex_array_] mp.f90:1317

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :   11[ rax rdx rcx rbx rsi rdi r8-r11 zmm0]
        
    Routine temporaries
        Total         :      51
            Global    :      22
            Local     :      29
        Regenerable   :      11
        Spilled       :       1
        
    Routine stack
        Variables     :      12 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       3 [1.52e+00 ~ 1.8%]
        Spills        :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: MP::ISEND_DOUBLE_COMPLEX

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (MP::ISEND_DOUBLE_COMPLEX) [109] mp.f90(1330,14)


    Report from: Code generation optimizations [cg]

mp.f90(1330,14):remark #34051: REGISTER ALLOCATION : [mp_mp_isend_double_complex_] mp.f90:1330

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :    7[ rax rdx rcx rsi rdi r8-r9]
        
    Routine temporaries
        Total         :      27
            Global    :      10
            Local     :      17
        Regenerable   :      10
        Spilled       :       0
        
    Routine stack
        Variables     :       8 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       2 [5.20e-01 ~ 1.7%]
        Spills        :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: MP::ISEND_DOUBLE_COMPLEX_ARRAY

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (MP::ISEND_DOUBLE_COMPLEX_ARRAY) [110] mp.f90(1343,14)


    Report from: Loop nest, Vector & Auto-parallelization optimizations [loop, vec, par]


LOOP BEGIN at mp.f90(1353,21)
<Multiversioned v1>
   remark #25233: Loop multiversioned for stride tests on Assumed shape arrays
   remark #15516: loop was not vectorized: cost model has chosen vectorlength of 1 -- maybe possible to override via pragma/directive with vectorlength clause
   remark #25439: unrolled with remainder by 2  
LOOP END

LOOP BEGIN at mp.f90(1353,21)
<Remainder, Multiversioned v1>
LOOP END

LOOP BEGIN at mp.f90(1353,21)
<Multiversioned v2>
   remark #15516: loop was not vectorized: cost model has chosen vectorlength of 1 -- maybe possible to override via pragma/directive with vectorlength clause
   remark #25439: unrolled with remainder by 2  
LOOP END

LOOP BEGIN at mp.f90(1353,21)
<Remainder, Multiversioned v2>
LOOP END

    Report from: Code generation optimizations [cg]

mp.f90(1343,14):remark #34051: REGISTER ALLOCATION : [mp_mp_isend_double_complex_array_] mp.f90:1343

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :   14[ rax rdx rcx rsi rdi r8-r14 zmm0-zmm1]
        
    Routine temporaries
        Total         :      59
            Global    :      26
            Local     :      33
        Regenerable   :      11
        Spilled       :       3
        
    Routine stack
        Variables     :      12 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       3 [1.52e+00 ~ 2.1%]
        Spills        :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: MP::ISEND_LOGICAL

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (MP::ISEND_LOGICAL) [111] mp.f90(1356,14)


    Report from: Code generation optimizations [cg]

mp.f90(1356,14):remark #34051: REGISTER ALLOCATION : [mp_mp_isend_logical_] mp.f90:1356

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :    7[ rax rdx rcx rsi rdi r8-r9]
        
    Routine temporaries
        Total         :      27
            Global    :      10
            Local     :      17
        Regenerable   :      10
        Spilled       :       0
        
    Routine stack
        Variables     :       8 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       2 [5.20e-01 ~ 1.7%]
        Spills        :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: MP::ISEND_LOGICAL_ARRAY

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (MP::ISEND_LOGICAL_ARRAY) [112] mp.f90(1369,14)


    Report from: Loop nest, Vector & Auto-parallelization optimizations [loop, vec, par]


LOOP BEGIN at mp.f90(1379,21)
<Multiversioned v1>
   remark #25233: Loop multiversioned for stride tests on Assumed shape arrays
   remark #15300: LOOP WAS VECTORIZED
LOOP END

LOOP BEGIN at mp.f90(1379,21)
<Remainder loop for vectorization, Multiversioned v1>
LOOP END

LOOP BEGIN at mp.f90(1379,21)
<Multiversioned v2>
   remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
   remark #25439: unrolled with remainder by 2  
LOOP END

LOOP BEGIN at mp.f90(1379,21)
<Remainder, Multiversioned v2>
LOOP END

    Report from: Code generation optimizations [cg]

mp.f90(1369,14):remark #34051: REGISTER ALLOCATION : [mp_mp_isend_logical_array_] mp.f90:1369

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :   13[ rax rdx rcx rsi rdi r8-r14 zmm0]
        
    Routine temporaries
        Total         :      55
            Global    :      25
            Local     :      30
        Regenerable   :      11
        Spilled       :       3
        
    Routine stack
        Variables     :      12 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       3 [1.52e+00 ~ 2.0%]
        Spills        :       8 bytes*
            Reads     :       1 [2.25e-01 ~ 0.3%]
            Writes    :       1 [2.25e-01 ~ 0.3%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: MP::IRECEIVE_INTEGER

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (MP::IRECEIVE_INTEGER) [113] mp.f90(1382,14)


    Report from: Code generation optimizations [cg]

mp.f90(1382,14):remark #34051: REGISTER ALLOCATION : [mp_mp_ireceive_integer_] mp.f90:1382

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :    7[ rax rdx rcx rsi rdi r8-r9]
        
    Routine temporaries
        Total         :      27
            Global    :      10
            Local     :      17
        Regenerable   :      10
        Spilled       :       0
        
    Routine stack
        Variables     :       8 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       2 [5.20e-01 ~ 1.7%]
        Spills        :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: MP::IRECEIVE_INTEGER_ARRAY

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (MP::IRECEIVE_INTEGER_ARRAY) [114] mp.f90(1396,14)


    Report from: Loop nest, Vector & Auto-parallelization optimizations [loop, vec, par]


LOOP BEGIN at mp.f90(1406,21)
<Multiversioned v1>
   remark #25233: Loop multiversioned for stride tests on Assumed shape arrays
   remark #15300: LOOP WAS VECTORIZED
LOOP END

LOOP BEGIN at mp.f90(1406,21)
<Remainder loop for vectorization, Multiversioned v1>
LOOP END

LOOP BEGIN at mp.f90(1406,21)
<Multiversioned v2>
   remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
   remark #25439: unrolled with remainder by 2  
LOOP END

LOOP BEGIN at mp.f90(1406,21)
<Remainder, Multiversioned v2>
LOOP END

LOOP BEGIN at mp.f90(1406,21)
<Multiversioned v1>
   remark #25233: Loop multiversioned for stride tests on Assumed shape arrays
   remark #15300: LOOP WAS VECTORIZED
LOOP END

LOOP BEGIN at mp.f90(1406,21)
<Alternate Alignment Vectorized Loop, Multiversioned v1>
LOOP END

LOOP BEGIN at mp.f90(1406,21)
<Remainder loop for vectorization, Multiversioned v1>
LOOP END

LOOP BEGIN at mp.f90(1406,21)
<Multiversioned v2>
   remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
   remark #25439: unrolled with remainder by 2  
LOOP END

LOOP BEGIN at mp.f90(1406,21)
<Remainder, Multiversioned v2>
LOOP END

    Report from: Code generation optimizations [cg]

mp.f90(1396,14):remark #34051: REGISTER ALLOCATION : [mp_mp_ireceive_integer_array_] mp.f90:1396

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :   15[ rax rdx rcx rbx rsi rdi r8-r15 zmm0]
        
    Routine temporaries
        Total         :      77
            Global    :      38
            Local     :      39
        Regenerable   :      11
        Spilled       :       6
        
    Routine stack
        Variables     :      12 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       3 [1.52e+00 ~ 1.2%]
        Spills        :       8 bytes*
            Reads     :       1 [2.25e-01 ~ 0.2%]
            Writes    :       1 [2.25e-01 ~ 0.2%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: MP::IRECEIVE_REAL

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (MP::IRECEIVE_REAL) [115] mp.f90(1410,14)


    Report from: Code generation optimizations [cg]

mp.f90(1410,14):remark #34051: REGISTER ALLOCATION : [mp_mp_ireceive_real_] mp.f90:1410

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :    7[ rax rdx rcx rsi rdi r8-r9]
        
    Routine temporaries
        Total         :      27
            Global    :      10
            Local     :      17
        Regenerable   :      10
        Spilled       :       0
        
    Routine stack
        Variables     :       8 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       2 [5.20e-01 ~ 1.7%]
        Spills        :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: MP::IRECEIVE_REAL_ARRAY

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (MP::IRECEIVE_REAL_ARRAY) [116] mp.f90(1424,14)


    Report from: Loop nest, Vector & Auto-parallelization optimizations [loop, vec, par]


LOOP BEGIN at mp.f90(1434,21)
<Multiversioned v1>
   remark #25233: Loop multiversioned for stride tests on Assumed shape arrays
   remark #15300: LOOP WAS VECTORIZED
LOOP END

LOOP BEGIN at mp.f90(1434,21)
<Remainder loop for vectorization, Multiversioned v1>
LOOP END

LOOP BEGIN at mp.f90(1434,21)
<Multiversioned v2>
   remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
   remark #25439: unrolled with remainder by 2  
LOOP END

LOOP BEGIN at mp.f90(1434,21)
<Remainder, Multiversioned v2>
LOOP END

LOOP BEGIN at mp.f90(1434,21)
<Multiversioned v1>
   remark #25233: Loop multiversioned for stride tests on Assumed shape arrays
   remark #15300: LOOP WAS VECTORIZED
LOOP END

LOOP BEGIN at mp.f90(1434,21)
<Alternate Alignment Vectorized Loop, Multiversioned v1>
LOOP END

LOOP BEGIN at mp.f90(1434,21)
<Remainder loop for vectorization, Multiversioned v1>
LOOP END

LOOP BEGIN at mp.f90(1434,21)
<Multiversioned v2>
   remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
   remark #25439: unrolled with remainder by 2  
LOOP END

LOOP BEGIN at mp.f90(1434,21)
<Remainder, Multiversioned v2>
LOOP END

    Report from: Code generation optimizations [cg]

mp.f90(1424,14):remark #34051: REGISTER ALLOCATION : [mp_mp_ireceive_real_array_] mp.f90:1424

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :   15[ rax rdx rcx rbx rsi rdi r8-r15 zmm0]
        
    Routine temporaries
        Total         :      77
            Global    :      38
            Local     :      39
        Regenerable   :      11
        Spilled       :       6
        
    Routine stack
        Variables     :      12 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       3 [1.52e+00 ~ 1.2%]
        Spills        :       8 bytes*
            Reads     :       1 [2.25e-01 ~ 0.2%]
            Writes    :       1 [2.25e-01 ~ 0.2%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: MP::IRECEIVE_DOUBLE

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (MP::IRECEIVE_DOUBLE) [117] mp.f90(1438,14)


    Report from: Code generation optimizations [cg]

mp.f90(1438,14):remark #34051: REGISTER ALLOCATION : [mp_mp_ireceive_double_] mp.f90:1438

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :    7[ rax rdx rcx rsi rdi r8-r9]
        
    Routine temporaries
        Total         :      27
            Global    :      10
            Local     :      17
        Regenerable   :      10
        Spilled       :       0
        
    Routine stack
        Variables     :       8 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       2 [5.20e-01 ~ 1.7%]
        Spills        :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: MP::IRECEIVE_DOUBLE_ARRAY

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (MP::IRECEIVE_DOUBLE_ARRAY) [118] mp.f90(1452,14)


    Report from: Loop nest, Vector & Auto-parallelization optimizations [loop, vec, par]


LOOP BEGIN at mp.f90(1462,21)
<Multiversioned v1>
   remark #25233: Loop multiversioned for stride tests on Assumed shape arrays
   remark #15300: LOOP WAS VECTORIZED
LOOP END

LOOP BEGIN at mp.f90(1462,21)
<Remainder loop for vectorization, Multiversioned v1>
LOOP END

LOOP BEGIN at mp.f90(1462,21)
<Multiversioned v2>
   remark #15300: LOOP WAS VECTORIZED
LOOP END

LOOP BEGIN at mp.f90(1462,21)
<Remainder loop for vectorization, Multiversioned v2>
LOOP END

LOOP BEGIN at mp.f90(1462,21)
<Multiversioned v1>
   remark #25233: Loop multiversioned for stride tests on Assumed shape arrays
   remark #15300: LOOP WAS VECTORIZED
LOOP END

LOOP BEGIN at mp.f90(1462,21)
<Alternate Alignment Vectorized Loop, Multiversioned v1>
LOOP END

LOOP BEGIN at mp.f90(1462,21)
<Remainder loop for vectorization, Multiversioned v1>
LOOP END

LOOP BEGIN at mp.f90(1462,21)
<Multiversioned v2>
   remark #15300: LOOP WAS VECTORIZED
LOOP END

LOOP BEGIN at mp.f90(1462,21)
<Remainder loop for vectorization, Multiversioned v2>
LOOP END

    Report from: Code generation optimizations [cg]

mp.f90(1452,14):remark #34051: REGISTER ALLOCATION : [mp_mp_ireceive_double_array_] mp.f90:1452

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :   15[ rax rdx rcx rbx rsi rdi r8-r15 zmm0]
        
    Routine temporaries
        Total         :      68
            Global    :      32
            Local     :      36
        Regenerable   :      11
        Spilled       :       5
        
    Routine stack
        Variables     :      12 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       3 [1.52e+00 ~ 1.0%]
        Spills        :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: MP::IRECEIVE_COMPLEX

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (MP::IRECEIVE_COMPLEX) [119] mp.f90(1467,14)


    Report from: Code generation optimizations [cg]

mp.f90(1467,14):remark #34051: REGISTER ALLOCATION : [mp_mp_ireceive_complex_] mp.f90:1467

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :    7[ rax rdx rcx rsi rdi r8-r9]
        
    Routine temporaries
        Total         :      27
            Global    :      10
            Local     :      17
        Regenerable   :      10
        Spilled       :       0
        
    Routine stack
        Variables     :       8 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       2 [5.20e-01 ~ 1.7%]
        Spills        :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: MP::IRECEIVE_COMPLEX_ARRAY

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (MP::IRECEIVE_COMPLEX_ARRAY) [120] mp.f90(1481,14)


    Report from: Loop nest, Vector & Auto-parallelization optimizations [loop, vec, par]


LOOP BEGIN at mp.f90(1491,21)
<Multiversioned v1>
   remark #25233: Loop multiversioned for stride tests on Assumed shape arrays
   remark #15300: LOOP WAS VECTORIZED
LOOP END

LOOP BEGIN at mp.f90(1491,21)
<Remainder loop for vectorization, Multiversioned v1>
LOOP END

LOOP BEGIN at mp.f90(1491,21)
<Multiversioned v2>
   remark #15300: LOOP WAS VECTORIZED
LOOP END

LOOP BEGIN at mp.f90(1491,21)
<Remainder loop for vectorization, Multiversioned v2>
LOOP END

LOOP BEGIN at mp.f90(1491,21)
<Multiversioned v1>
   remark #25233: Loop multiversioned for stride tests on Assumed shape arrays
   remark #15300: LOOP WAS VECTORIZED
LOOP END

LOOP BEGIN at mp.f90(1491,21)
<Alternate Alignment Vectorized Loop, Multiversioned v1>
LOOP END

LOOP BEGIN at mp.f90(1491,21)
<Remainder loop for vectorization, Multiversioned v1>
LOOP END

LOOP BEGIN at mp.f90(1491,21)
<Multiversioned v2>
   remark #15300: LOOP WAS VECTORIZED
LOOP END

LOOP BEGIN at mp.f90(1491,21)
<Remainder loop for vectorization, Multiversioned v2>
LOOP END

    Report from: Code generation optimizations [cg]

mp.f90(1481,14):remark #34051: REGISTER ALLOCATION : [mp_mp_ireceive_complex_array_] mp.f90:1481

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :   15[ rax rdx rcx rbx rsi rdi r8-r15 zmm0]
        
    Routine temporaries
        Total         :      68
            Global    :      32
            Local     :      36
        Regenerable   :      11
        Spilled       :       5
        
    Routine stack
        Variables     :      12 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       3 [1.52e+00 ~ 1.0%]
        Spills        :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: MP::IRECEIVE_DOUBLE_COMPLEX

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (MP::IRECEIVE_DOUBLE_COMPLEX) [121] mp.f90(1495,14)


    Report from: Code generation optimizations [cg]

mp.f90(1495,14):remark #34051: REGISTER ALLOCATION : [mp_mp_ireceive_double_complex_] mp.f90:1495

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :    7[ rax rdx rcx rsi rdi r8-r9]
        
    Routine temporaries
        Total         :      27
            Global    :      10
            Local     :      17
        Regenerable   :      10
        Spilled       :       0
        
    Routine stack
        Variables     :       8 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       2 [5.20e-01 ~ 1.7%]
        Spills        :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: MP::IRECEIVE_DOUBLE_COMPLEX_ARRAY

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (MP::IRECEIVE_DOUBLE_COMPLEX_ARRAY) [122] mp.f90(1509,14)


    Report from: Loop nest, Vector & Auto-parallelization optimizations [loop, vec, par]


LOOP BEGIN at mp.f90(1519,21)
<Multiversioned v1>
   remark #25233: Loop multiversioned for stride tests on Assumed shape arrays
   remark #15516: loop was not vectorized: cost model has chosen vectorlength of 1 -- maybe possible to override via pragma/directive with vectorlength clause
   remark #25439: unrolled with remainder by 2  
LOOP END

LOOP BEGIN at mp.f90(1519,21)
<Remainder, Multiversioned v1>
LOOP END

LOOP BEGIN at mp.f90(1519,21)
<Multiversioned v2>
   remark #15516: loop was not vectorized: cost model has chosen vectorlength of 1 -- maybe possible to override via pragma/directive with vectorlength clause
   remark #25439: unrolled with remainder by 2  
LOOP END

LOOP BEGIN at mp.f90(1519,21)
<Remainder, Multiversioned v2>
LOOP END

LOOP BEGIN at mp.f90(1519,21)
<Multiversioned v1>
   remark #25233: Loop multiversioned for stride tests on Assumed shape arrays
   remark #15516: loop was not vectorized: cost model has chosen vectorlength of 1 -- maybe possible to override via pragma/directive with vectorlength clause
   remark #25439: unrolled with remainder by 2  
LOOP END

LOOP BEGIN at mp.f90(1519,21)
<Remainder, Multiversioned v1>
LOOP END

LOOP BEGIN at mp.f90(1519,21)
<Multiversioned v2>
   remark #15516: loop was not vectorized: cost model has chosen vectorlength of 1 -- maybe possible to override via pragma/directive with vectorlength clause
   remark #25439: unrolled with remainder by 2  
LOOP END

LOOP BEGIN at mp.f90(1519,21)
<Remainder, Multiversioned v2>
LOOP END

    Report from: Code generation optimizations [cg]

mp.f90(1509,14):remark #34051: REGISTER ALLOCATION : [mp_mp_ireceive_double_complex_array_] mp.f90:1509

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :   16[ rax rdx rcx rbx rsi rdi r8-r15 zmm0-zmm1]
        
    Routine temporaries
        Total         :      87
            Global    :      43
            Local     :      44
        Regenerable   :      11
        Spilled       :       7
        
    Routine stack
        Variables     :      12 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       3 [1.52e+00 ~ 1.5%]
        Spills        :       8 bytes*
            Reads     :       1 [2.25e-01 ~ 0.2%]
            Writes    :       1 [2.25e-01 ~ 0.2%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: MP::IRECEIVE_LOGICAL

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (MP::IRECEIVE_LOGICAL) [123] mp.f90(1524,14)


    Report from: Code generation optimizations [cg]

mp.f90(1524,14):remark #34051: REGISTER ALLOCATION : [mp_mp_ireceive_logical_] mp.f90:1524

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :    7[ rax rdx rcx rsi rdi r8-r9]
        
    Routine temporaries
        Total         :      27
            Global    :      10
            Local     :      17
        Regenerable   :      10
        Spilled       :       0
        
    Routine stack
        Variables     :       8 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       2 [5.20e-01 ~ 1.7%]
        Spills        :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: MP::IRECEIVE_LOGICAL_ARRAY

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (MP::IRECEIVE_LOGICAL_ARRAY) [124] mp.f90(1538,14)


    Report from: Loop nest, Vector & Auto-parallelization optimizations [loop, vec, par]


LOOP BEGIN at mp.f90(1548,21)
<Multiversioned v1>
   remark #25233: Loop multiversioned for stride tests on Assumed shape arrays
   remark #15300: LOOP WAS VECTORIZED
LOOP END

LOOP BEGIN at mp.f90(1548,21)
<Remainder loop for vectorization, Multiversioned v1>
LOOP END

LOOP BEGIN at mp.f90(1548,21)
<Multiversioned v2>
   remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
   remark #25439: unrolled with remainder by 2  
LOOP END

LOOP BEGIN at mp.f90(1548,21)
<Remainder, Multiversioned v2>
LOOP END

LOOP BEGIN at mp.f90(1548,21)
<Multiversioned v1>
   remark #25233: Loop multiversioned for stride tests on Assumed shape arrays
   remark #15300: LOOP WAS VECTORIZED
LOOP END

LOOP BEGIN at mp.f90(1548,21)
<Alternate Alignment Vectorized Loop, Multiversioned v1>
LOOP END

LOOP BEGIN at mp.f90(1548,21)
<Remainder loop for vectorization, Multiversioned v1>
LOOP END

LOOP BEGIN at mp.f90(1548,21)
<Multiversioned v2>
   remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
   remark #25439: unrolled with remainder by 2  
LOOP END

LOOP BEGIN at mp.f90(1548,21)
<Remainder, Multiversioned v2>
LOOP END

    Report from: Code generation optimizations [cg]

mp.f90(1538,14):remark #34051: REGISTER ALLOCATION : [mp_mp_ireceive_logical_array_] mp.f90:1538

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :   15[ rax rdx rcx rbx rsi rdi r8-r15 zmm0]
        
    Routine temporaries
        Total         :      77
            Global    :      38
            Local     :      39
        Regenerable   :      11
        Spilled       :       6
        
    Routine stack
        Variables     :      12 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       3 [1.52e+00 ~ 1.2%]
        Spills        :       8 bytes*
            Reads     :       1 [2.25e-01 ~ 0.2%]
            Writes    :       1 [2.25e-01 ~ 0.2%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: MP::RSEND_INTEGER

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (MP::RSEND_INTEGER) [125] mp.f90(1554,14)


    Report from: Code generation optimizations [cg]

mp.f90(1554,14):remark #34051: REGISTER ALLOCATION : [mp_mp_rsend_integer_] mp.f90:1554

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :    7[ rax rdx rcx rsi rdi r8-r9]
        
    Routine temporaries
        Total         :      25
            Global    :       9
            Local     :      16
        Regenerable   :      10
        Spilled       :       0
        
    Routine stack
        Variables     :       8 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       2 [5.20e-01 ~ 1.9%]
        Spills        :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: MP::RSEND_INTEGER_ARRAY

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (MP::RSEND_INTEGER_ARRAY) [126] mp.f90(1566,14)


    Report from: Loop nest, Vector & Auto-parallelization optimizations [loop, vec, par]


LOOP BEGIN at mp.f90(1575,21)
<Multiversioned v1>
   remark #25233: Loop multiversioned for stride tests on Assumed shape arrays
   remark #15300: LOOP WAS VECTORIZED
LOOP END

LOOP BEGIN at mp.f90(1575,21)
<Remainder loop for vectorization, Multiversioned v1>
LOOP END

LOOP BEGIN at mp.f90(1575,21)
<Multiversioned v2>
   remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
   remark #25439: unrolled with remainder by 2  
LOOP END

LOOP BEGIN at mp.f90(1575,21)
<Remainder, Multiversioned v2>
LOOP END

    Report from: Code generation optimizations [cg]

mp.f90(1566,14):remark #34051: REGISTER ALLOCATION : [mp_mp_rsend_integer_array_] mp.f90:1566

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :   12[ rax rdx rcx rsi rdi r8-r12 r14 zmm0]
        
    Routine temporaries
        Total         :      53
            Global    :      24
            Local     :      29
        Regenerable   :      11
        Spilled       :       2
        
    Routine stack
        Variables     :      12 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       3 [1.52e+00 ~ 2.1%]
        Spills        :       8 bytes*
            Reads     :       1 [2.25e-01 ~ 0.3%]
            Writes    :       1 [2.25e-01 ~ 0.3%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: MP::RSEND_REAL

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (MP::RSEND_REAL) [127] mp.f90(1578,14)


    Report from: Code generation optimizations [cg]

mp.f90(1578,14):remark #34051: REGISTER ALLOCATION : [mp_mp_rsend_real_] mp.f90:1578

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :    7[ rax rdx rcx rsi rdi r8-r9]
        
    Routine temporaries
        Total         :      25
            Global    :       9
            Local     :      16
        Regenerable   :      10
        Spilled       :       0
        
    Routine stack
        Variables     :       8 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       2 [5.20e-01 ~ 1.9%]
        Spills        :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: MP::RSEND_REAL_ARRAY

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (MP::RSEND_REAL_ARRAY) [128] mp.f90(1590,14)


    Report from: Loop nest, Vector & Auto-parallelization optimizations [loop, vec, par]


LOOP BEGIN at mp.f90(1599,21)
<Multiversioned v1>
   remark #25233: Loop multiversioned for stride tests on Assumed shape arrays
   remark #15300: LOOP WAS VECTORIZED
LOOP END

LOOP BEGIN at mp.f90(1599,21)
<Remainder loop for vectorization, Multiversioned v1>
LOOP END

LOOP BEGIN at mp.f90(1599,21)
<Multiversioned v2>
   remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
   remark #25439: unrolled with remainder by 2  
LOOP END

LOOP BEGIN at mp.f90(1599,21)
<Remainder, Multiversioned v2>
LOOP END

    Report from: Code generation optimizations [cg]

mp.f90(1590,14):remark #34051: REGISTER ALLOCATION : [mp_mp_rsend_real_array_] mp.f90:1590

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :   12[ rax rdx rcx rsi rdi r8-r12 r14 zmm0]
        
    Routine temporaries
        Total         :      53
            Global    :      24
            Local     :      29
        Regenerable   :      11
        Spilled       :       2
        
    Routine stack
        Variables     :      12 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       3 [1.52e+00 ~ 2.1%]
        Spills        :       8 bytes*
            Reads     :       1 [2.25e-01 ~ 0.3%]
            Writes    :       1 [2.25e-01 ~ 0.3%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: MP::RSEND_DOUBLE

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (MP::RSEND_DOUBLE) [129] mp.f90(1602,14)


    Report from: Code generation optimizations [cg]

mp.f90(1602,14):remark #34051: REGISTER ALLOCATION : [mp_mp_rsend_double_] mp.f90:1602

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :    7[ rax rdx rcx rsi rdi r8-r9]
        
    Routine temporaries
        Total         :      25
            Global    :       9
            Local     :      16
        Regenerable   :      10
        Spilled       :       0
        
    Routine stack
        Variables     :       8 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       2 [5.20e-01 ~ 1.9%]
        Spills        :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: MP::RSEND_DOUBLE_ARRAY

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (MP::RSEND_DOUBLE_ARRAY) [130] mp.f90(1614,14)


    Report from: Loop nest, Vector & Auto-parallelization optimizations [loop, vec, par]


LOOP BEGIN at mp.f90(1623,21)
<Multiversioned v1>
   remark #25233: Loop multiversioned for stride tests on Assumed shape arrays
   remark #15300: LOOP WAS VECTORIZED
LOOP END

LOOP BEGIN at mp.f90(1623,21)
<Remainder loop for vectorization, Multiversioned v1>
LOOP END

LOOP BEGIN at mp.f90(1623,21)
<Multiversioned v2>
   remark #15300: LOOP WAS VECTORIZED
LOOP END

LOOP BEGIN at mp.f90(1623,21)
<Remainder loop for vectorization, Multiversioned v2>
LOOP END

    Report from: Code generation optimizations [cg]

mp.f90(1614,14):remark #34051: REGISTER ALLOCATION : [mp_mp_rsend_double_array_] mp.f90:1614

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :   11[ rax rdx rcx rsi rdi r8-r11 r13 zmm0]
        
    Routine temporaries
        Total         :      49
            Global    :      21
            Local     :      28
        Regenerable   :      11
        Spilled       :       1
        
    Routine stack
        Variables     :      12 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       3 [1.52e+00 ~ 1.9%]
        Spills        :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: MP::RSEND_COMPLEX

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (MP::RSEND_COMPLEX) [131] mp.f90(1627,14)


    Report from: Code generation optimizations [cg]

mp.f90(1627,14):remark #34051: REGISTER ALLOCATION : [mp_mp_rsend_complex_] mp.f90:1627

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :    7[ rax rdx rcx rsi rdi r8-r9]
        
    Routine temporaries
        Total         :      25
            Global    :       9
            Local     :      16
        Regenerable   :      10
        Spilled       :       0
        
    Routine stack
        Variables     :       8 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       2 [5.20e-01 ~ 1.9%]
        Spills        :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: MP::RSEND_COMPLEX_ARRAY

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (MP::RSEND_COMPLEX_ARRAY) [132] mp.f90(1639,14)


    Report from: Loop nest, Vector & Auto-parallelization optimizations [loop, vec, par]


LOOP BEGIN at mp.f90(1648,21)
<Multiversioned v1>
   remark #25233: Loop multiversioned for stride tests on Assumed shape arrays
   remark #15300: LOOP WAS VECTORIZED
LOOP END

LOOP BEGIN at mp.f90(1648,21)
<Remainder loop for vectorization, Multiversioned v1>
LOOP END

LOOP BEGIN at mp.f90(1648,21)
<Multiversioned v2>
   remark #15300: LOOP WAS VECTORIZED
LOOP END

LOOP BEGIN at mp.f90(1648,21)
<Remainder loop for vectorization, Multiversioned v2>
LOOP END

    Report from: Code generation optimizations [cg]

mp.f90(1639,14):remark #34051: REGISTER ALLOCATION : [mp_mp_rsend_complex_array_] mp.f90:1639

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :   11[ rax rdx rcx rsi rdi r8-r11 r13 zmm0]
        
    Routine temporaries
        Total         :      49
            Global    :      21
            Local     :      28
        Regenerable   :      11
        Spilled       :       1
        
    Routine stack
        Variables     :      12 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       3 [1.52e+00 ~ 1.9%]
        Spills        :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: MP::RSEND_DOUBLE_COMPLEX

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (MP::RSEND_DOUBLE_COMPLEX) [133] mp.f90(1651,14)


    Report from: Code generation optimizations [cg]

mp.f90(1651,14):remark #34051: REGISTER ALLOCATION : [mp_mp_rsend_double_complex_] mp.f90:1651

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :    7[ rax rdx rcx rsi rdi r8-r9]
        
    Routine temporaries
        Total         :      25
            Global    :       9
            Local     :      16
        Regenerable   :      10
        Spilled       :       0
        
    Routine stack
        Variables     :       8 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       2 [5.20e-01 ~ 1.9%]
        Spills        :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: MP::RSEND_DOUBLE_COMPLEX_ARRAY

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (MP::RSEND_DOUBLE_COMPLEX_ARRAY) [134] mp.f90(1663,14)


    Report from: Loop nest, Vector & Auto-parallelization optimizations [loop, vec, par]


LOOP BEGIN at mp.f90(1672,21)
<Multiversioned v1>
   remark #25233: Loop multiversioned for stride tests on Assumed shape arrays
   remark #15516: loop was not vectorized: cost model has chosen vectorlength of 1 -- maybe possible to override via pragma/directive with vectorlength clause
   remark #25439: unrolled with remainder by 2  
LOOP END

LOOP BEGIN at mp.f90(1672,21)
<Remainder, Multiversioned v1>
LOOP END

LOOP BEGIN at mp.f90(1672,21)
<Multiversioned v2>
   remark #15516: loop was not vectorized: cost model has chosen vectorlength of 1 -- maybe possible to override via pragma/directive with vectorlength clause
   remark #25439: unrolled with remainder by 2  
LOOP END

LOOP BEGIN at mp.f90(1672,21)
<Remainder, Multiversioned v2>
LOOP END

    Report from: Code generation optimizations [cg]

mp.f90(1663,14):remark #34051: REGISTER ALLOCATION : [mp_mp_rsend_double_complex_array_] mp.f90:1663

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :   13[ rax rdx rcx rsi rdi r8-r11 r13-r14 zmm0-zmm1]
        
    Routine temporaries
        Total         :      57
            Global    :      25
            Local     :      32
        Regenerable   :      11
        Spilled       :       2
        
    Routine stack
        Variables     :      12 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       3 [1.52e+00 ~ 2.2%]
        Spills        :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: MP::RSEND_LOGICAL

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (MP::RSEND_LOGICAL) [135] mp.f90(1675,14)


    Report from: Code generation optimizations [cg]

mp.f90(1675,14):remark #34051: REGISTER ALLOCATION : [mp_mp_rsend_logical_] mp.f90:1675

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :    7[ rax rdx rcx rsi rdi r8-r9]
        
    Routine temporaries
        Total         :      25
            Global    :       9
            Local     :      16
        Regenerable   :      10
        Spilled       :       0
        
    Routine stack
        Variables     :       8 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       2 [5.20e-01 ~ 1.9%]
        Spills        :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: MP::RSEND_LOGICAL_ARRAY

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (MP::RSEND_LOGICAL_ARRAY) [136] mp.f90(1687,14)


    Report from: Loop nest, Vector & Auto-parallelization optimizations [loop, vec, par]


LOOP BEGIN at mp.f90(1696,21)
<Multiversioned v1>
   remark #25233: Loop multiversioned for stride tests on Assumed shape arrays
   remark #15300: LOOP WAS VECTORIZED
LOOP END

LOOP BEGIN at mp.f90(1696,21)
<Remainder loop for vectorization, Multiversioned v1>
LOOP END

LOOP BEGIN at mp.f90(1696,21)
<Multiversioned v2>
   remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
   remark #25439: unrolled with remainder by 2  
LOOP END

LOOP BEGIN at mp.f90(1696,21)
<Remainder, Multiversioned v2>
LOOP END

    Report from: Code generation optimizations [cg]

mp.f90(1687,14):remark #34051: REGISTER ALLOCATION : [mp_mp_rsend_logical_array_] mp.f90:1687

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :   12[ rax rdx rcx rsi rdi r8-r12 r14 zmm0]
        
    Routine temporaries
        Total         :      53
            Global    :      24
            Local     :      29
        Regenerable   :      11
        Spilled       :       2
        
    Routine stack
        Variables     :      12 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       3 [1.52e+00 ~ 2.1%]
        Spills        :       8 bytes*
            Reads     :       1 [2.25e-01 ~ 0.3%]
            Writes    :       1 [2.25e-01 ~ 0.3%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: MP::IRSEND_INTEGER

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (MP::IRSEND_INTEGER) [137] mp.f90(1699,14)


    Report from: Code generation optimizations [cg]

mp.f90(1699,14):remark #34051: REGISTER ALLOCATION : [mp_mp_irsend_integer_] mp.f90:1699

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :    7[ rax rdx rcx rsi rdi r8-r9]
        
    Routine temporaries
        Total         :      27
            Global    :      10
            Local     :      17
        Regenerable   :      10
        Spilled       :       0
        
    Routine stack
        Variables     :       8 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       2 [5.20e-01 ~ 1.7%]
        Spills        :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: MP::IRSEND_INTEGER_ARRAY

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (MP::IRSEND_INTEGER_ARRAY) [138] mp.f90(1712,14)


    Report from: Loop nest, Vector & Auto-parallelization optimizations [loop, vec, par]


LOOP BEGIN at mp.f90(1722,22)
<Multiversioned v1>
   remark #25233: Loop multiversioned for stride tests on Assumed shape arrays
   remark #15300: LOOP WAS VECTORIZED
LOOP END

LOOP BEGIN at mp.f90(1722,22)
<Remainder loop for vectorization, Multiversioned v1>
LOOP END

LOOP BEGIN at mp.f90(1722,22)
<Multiversioned v2>
   remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
   remark #25439: unrolled with remainder by 2  
LOOP END

LOOP BEGIN at mp.f90(1722,22)
<Remainder, Multiversioned v2>
LOOP END

    Report from: Code generation optimizations [cg]

mp.f90(1712,14):remark #34051: REGISTER ALLOCATION : [mp_mp_irsend_integer_array_] mp.f90:1712

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :   13[ rax rdx rcx rsi rdi r8-r14 zmm0]
        
    Routine temporaries
        Total         :      55
            Global    :      25
            Local     :      30
        Regenerable   :      11
        Spilled       :       3
        
    Routine stack
        Variables     :      12 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       3 [1.52e+00 ~ 2.0%]
        Spills        :       8 bytes*
            Reads     :       1 [2.25e-01 ~ 0.3%]
            Writes    :       1 [2.25e-01 ~ 0.3%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: MP::IRSEND_REAL

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (MP::IRSEND_REAL) [139] mp.f90(1725,14)


    Report from: Code generation optimizations [cg]

mp.f90(1725,14):remark #34051: REGISTER ALLOCATION : [mp_mp_irsend_real_] mp.f90:1725

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :    7[ rax rdx rcx rsi rdi r8-r9]
        
    Routine temporaries
        Total         :      27
            Global    :      10
            Local     :      17
        Regenerable   :      10
        Spilled       :       0
        
    Routine stack
        Variables     :       8 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       2 [5.20e-01 ~ 1.7%]
        Spills        :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: MP::IRSEND_REAL_ARRAY

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (MP::IRSEND_REAL_ARRAY) [140] mp.f90(1738,14)


    Report from: Loop nest, Vector & Auto-parallelization optimizations [loop, vec, par]


LOOP BEGIN at mp.f90(1748,22)
<Multiversioned v1>
   remark #25233: Loop multiversioned for stride tests on Assumed shape arrays
   remark #15300: LOOP WAS VECTORIZED
LOOP END

LOOP BEGIN at mp.f90(1748,22)
<Remainder loop for vectorization, Multiversioned v1>
LOOP END

LOOP BEGIN at mp.f90(1748,22)
<Multiversioned v2>
   remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
   remark #25439: unrolled with remainder by 2  
LOOP END

LOOP BEGIN at mp.f90(1748,22)
<Remainder, Multiversioned v2>
LOOP END

    Report from: Code generation optimizations [cg]

mp.f90(1738,14):remark #34051: REGISTER ALLOCATION : [mp_mp_irsend_real_array_] mp.f90:1738

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :   13[ rax rdx rcx rsi rdi r8-r14 zmm0]
        
    Routine temporaries
        Total         :      55
            Global    :      25
            Local     :      30
        Regenerable   :      11
        Spilled       :       3
        
    Routine stack
        Variables     :      12 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       3 [1.52e+00 ~ 2.0%]
        Spills        :       8 bytes*
            Reads     :       1 [2.25e-01 ~ 0.3%]
            Writes    :       1 [2.25e-01 ~ 0.3%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: MP::IRSEND_DOUBLE

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (MP::IRSEND_DOUBLE) [141] mp.f90(1751,14)


    Report from: Code generation optimizations [cg]

mp.f90(1751,14):remark #34051: REGISTER ALLOCATION : [mp_mp_irsend_double_] mp.f90:1751

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :    7[ rax rdx rcx rsi rdi r8-r9]
        
    Routine temporaries
        Total         :      27
            Global    :      10
            Local     :      17
        Regenerable   :      10
        Spilled       :       0
        
    Routine stack
        Variables     :       8 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       2 [5.20e-01 ~ 1.7%]
        Spills        :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: MP::IRSEND_DOUBLE_ARRAY

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (MP::IRSEND_DOUBLE_ARRAY) [142] mp.f90(1764,14)


    Report from: Loop nest, Vector & Auto-parallelization optimizations [loop, vec, par]


LOOP BEGIN at mp.f90(1774,22)
<Multiversioned v1>
   remark #25233: Loop multiversioned for stride tests on Assumed shape arrays
   remark #15300: LOOP WAS VECTORIZED
LOOP END

LOOP BEGIN at mp.f90(1774,22)
<Remainder loop for vectorization, Multiversioned v1>
LOOP END

LOOP BEGIN at mp.f90(1774,22)
<Multiversioned v2>
   remark #15300: LOOP WAS VECTORIZED
LOOP END

LOOP BEGIN at mp.f90(1774,22)
<Remainder loop for vectorization, Multiversioned v2>
LOOP END

    Report from: Code generation optimizations [cg]

mp.f90(1764,14):remark #34051: REGISTER ALLOCATION : [mp_mp_irsend_double_array_] mp.f90:1764

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :   11[ rax rdx rcx rbx rsi rdi r8-r11 zmm0]
        
    Routine temporaries
        Total         :      51
            Global    :      22
            Local     :      29
        Regenerable   :      11
        Spilled       :       1
        
    Routine stack
        Variables     :      12 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       3 [1.52e+00 ~ 1.8%]
        Spills        :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: MP::IRSEND_COMPLEX

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (MP::IRSEND_COMPLEX) [143] mp.f90(1778,14)


    Report from: Code generation optimizations [cg]

mp.f90(1778,14):remark #34051: REGISTER ALLOCATION : [mp_mp_irsend_complex_] mp.f90:1778

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :    7[ rax rdx rcx rsi rdi r8-r9]
        
    Routine temporaries
        Total         :      27
            Global    :      10
            Local     :      17
        Regenerable   :      10
        Spilled       :       0
        
    Routine stack
        Variables     :       8 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       2 [5.20e-01 ~ 1.7%]
        Spills        :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: MP::IRSEND_COMPLEX_ARRAY

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (MP::IRSEND_COMPLEX_ARRAY) [144] mp.f90(1791,14)


    Report from: Loop nest, Vector & Auto-parallelization optimizations [loop, vec, par]


LOOP BEGIN at mp.f90(1801,22)
<Multiversioned v1>
   remark #25233: Loop multiversioned for stride tests on Assumed shape arrays
   remark #15300: LOOP WAS VECTORIZED
LOOP END

LOOP BEGIN at mp.f90(1801,22)
<Remainder loop for vectorization, Multiversioned v1>
LOOP END

LOOP BEGIN at mp.f90(1801,22)
<Multiversioned v2>
   remark #15300: LOOP WAS VECTORIZED
LOOP END

LOOP BEGIN at mp.f90(1801,22)
<Remainder loop for vectorization, Multiversioned v2>
LOOP END

    Report from: Code generation optimizations [cg]

mp.f90(1791,14):remark #34051: REGISTER ALLOCATION : [mp_mp_irsend_complex_array_] mp.f90:1791

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :   11[ rax rdx rcx rbx rsi rdi r8-r11 zmm0]
        
    Routine temporaries
        Total         :      51
            Global    :      22
            Local     :      29
        Regenerable   :      11
        Spilled       :       1
        
    Routine stack
        Variables     :      12 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       3 [1.52e+00 ~ 1.8%]
        Spills        :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: MP::IRSEND_DOUBLE_COMPLEX

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (MP::IRSEND_DOUBLE_COMPLEX) [145] mp.f90(1804,14)


    Report from: Code generation optimizations [cg]

mp.f90(1804,14):remark #34051: REGISTER ALLOCATION : [mp_mp_irsend_double_complex_] mp.f90:1804

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :    7[ rax rdx rcx rsi rdi r8-r9]
        
    Routine temporaries
        Total         :      27
            Global    :      10
            Local     :      17
        Regenerable   :      10
        Spilled       :       0
        
    Routine stack
        Variables     :       8 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       2 [5.20e-01 ~ 1.7%]
        Spills        :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: MP::IRSEND_DOUBLE_COMPLEX_ARRAY

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (MP::IRSEND_DOUBLE_COMPLEX_ARRAY) [146] mp.f90(1817,14)


    Report from: Loop nest, Vector & Auto-parallelization optimizations [loop, vec, par]


LOOP BEGIN at mp.f90(1827,22)
<Multiversioned v1>
   remark #25233: Loop multiversioned for stride tests on Assumed shape arrays
   remark #15516: loop was not vectorized: cost model has chosen vectorlength of 1 -- maybe possible to override via pragma/directive with vectorlength clause
   remark #25439: unrolled with remainder by 2  
LOOP END

LOOP BEGIN at mp.f90(1827,22)
<Remainder, Multiversioned v1>
LOOP END

LOOP BEGIN at mp.f90(1827,22)
<Multiversioned v2>
   remark #15516: loop was not vectorized: cost model has chosen vectorlength of 1 -- maybe possible to override via pragma/directive with vectorlength clause
   remark #25439: unrolled with remainder by 2  
LOOP END

LOOP BEGIN at mp.f90(1827,22)
<Remainder, Multiversioned v2>
LOOP END

    Report from: Code generation optimizations [cg]

mp.f90(1817,14):remark #34051: REGISTER ALLOCATION : [mp_mp_irsend_double_complex_array_] mp.f90:1817

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :   14[ rax rdx rcx rsi rdi r8-r14 zmm0-zmm1]
        
    Routine temporaries
        Total         :      59
            Global    :      26
            Local     :      33
        Regenerable   :      11
        Spilled       :       3
        
    Routine stack
        Variables     :      12 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       3 [1.52e+00 ~ 2.1%]
        Spills        :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: MP::IRSEND_LOGICAL

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (MP::IRSEND_LOGICAL) [147] mp.f90(1830,14)


    Report from: Code generation optimizations [cg]

mp.f90(1830,14):remark #34051: REGISTER ALLOCATION : [mp_mp_irsend_logical_] mp.f90:1830

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :    7[ rax rdx rcx rsi rdi r8-r9]
        
    Routine temporaries
        Total         :      27
            Global    :      10
            Local     :      17
        Regenerable   :      10
        Spilled       :       0
        
    Routine stack
        Variables     :       8 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       2 [5.20e-01 ~ 1.7%]
        Spills        :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: MP::IRSEND_LOGICAL_ARRAY

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (MP::IRSEND_LOGICAL_ARRAY) [148] mp.f90(1843,14)


    Report from: Loop nest, Vector & Auto-parallelization optimizations [loop, vec, par]


LOOP BEGIN at mp.f90(1853,22)
<Multiversioned v1>
   remark #25233: Loop multiversioned for stride tests on Assumed shape arrays
   remark #15300: LOOP WAS VECTORIZED
LOOP END

LOOP BEGIN at mp.f90(1853,22)
<Remainder loop for vectorization, Multiversioned v1>
LOOP END

LOOP BEGIN at mp.f90(1853,22)
<Multiversioned v2>
   remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
   remark #25439: unrolled with remainder by 2  
LOOP END

LOOP BEGIN at mp.f90(1853,22)
<Remainder, Multiversioned v2>
LOOP END

    Report from: Code generation optimizations [cg]

mp.f90(1843,14):remark #34051: REGISTER ALLOCATION : [mp_mp_irsend_logical_array_] mp.f90:1843

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :   13[ rax rdx rcx rsi rdi r8-r14 zmm0]
        
    Routine temporaries
        Total         :      55
            Global    :      25
            Local     :      30
        Regenerable   :      11
        Spilled       :       3
        
    Routine stack
        Variables     :      12 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       3 [1.52e+00 ~ 2.0%]
        Spills        :       8 bytes*
            Reads     :       1 [2.25e-01 ~ 0.3%]
            Writes    :       1 [2.25e-01 ~ 0.3%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: MP::MAX_REDUCE_INTEGER

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (MP::MAX_REDUCE_INTEGER) [149] mp.f90(1857,14)


    Report from: Code generation optimizations [cg]

mp.f90(1857,14):remark #34051: REGISTER ALLOCATION : [mp_mp_max_reduce_integer_] mp.f90:1857

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :    9[ rax rdx rcx rsi rdi r8-r11]
        
    Routine temporaries
        Total         :      24
            Global    :       6
            Local     :      18
        Regenerable   :      11
        Spilled       :       0
        
    Routine stack
        Variables     :       8 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       1 [1.00e+00 ~ 3.6%]
        Spills        :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: MP::MAX_REDUCE_INTEGER_ARRAY

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (MP::MAX_REDUCE_INTEGER_ARRAY) [150] mp.f90(1867,14)


    Report from: Loop nest, Vector & Auto-parallelization optimizations [loop, vec, par]


LOOP BEGIN at mp.f90(1873,5)
<Multiversioned v1>
   remark #25233: Loop multiversioned for stride tests on Assumed shape arrays
   remark #15300: LOOP WAS VECTORIZED
LOOP END

LOOP BEGIN at mp.f90(1873,5)
<Remainder loop for vectorization, Multiversioned v1>
LOOP END

LOOP BEGIN at mp.f90(1873,5)
<Multiversioned v2>
   remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
   remark #25439: unrolled with remainder by 2  
LOOP END

LOOP BEGIN at mp.f90(1873,5)
<Remainder, Multiversioned v2>
LOOP END

LOOP BEGIN at mp.f90(1875,15)
<Multiversioned v1>
   remark #25233: Loop multiversioned for stride tests on Assumed shape arrays
   remark #15300: LOOP WAS VECTORIZED
LOOP END

LOOP BEGIN at mp.f90(1875,15)
<Remainder loop for vectorization, Multiversioned v1>
LOOP END

LOOP BEGIN at mp.f90(1875,15)
<Multiversioned v2>
   remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
   remark #25439: unrolled with remainder by 2  
LOOP END

LOOP BEGIN at mp.f90(1875,15)
<Remainder, Multiversioned v2>
LOOP END

LOOP BEGIN at mp.f90(1875,15)
<Multiversioned v1>
   remark #25233: Loop multiversioned for stride tests on Assumed shape arrays
   remark #15300: LOOP WAS VECTORIZED
LOOP END

LOOP BEGIN at mp.f90(1875,15)
<Alternate Alignment Vectorized Loop, Multiversioned v1>
LOOP END

LOOP BEGIN at mp.f90(1875,15)
<Remainder loop for vectorization, Multiversioned v1>
LOOP END

LOOP BEGIN at mp.f90(1875,15)
<Multiversioned v2>
   remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
   remark #25439: unrolled with remainder by 2  
LOOP END

LOOP BEGIN at mp.f90(1875,15)
<Remainder, Multiversioned v2>
LOOP END

    Report from: Code generation optimizations [cg]

mp.f90(1867,14):remark #34051: REGISTER ALLOCATION : [mp_mp_max_reduce_integer_array_] mp.f90:1867

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :   15[ rax rdx rcx rbx rsi rdi r8-r15 zmm0]
        
    Routine temporaries
        Total         :      97
            Global    :      51
            Local     :      46
        Regenerable   :      11
        Spilled       :       7
        
    Routine stack
        Variables     :       8 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       1 [1.00e+00 ~ 0.6%]
        Spills        :      16 bytes*
            Reads     :       2 [1.23e+00 ~ 0.7%]
            Writes    :       2 [1.13e+00 ~ 0.6%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: MP::MAX_REDUCE_DOUBLE

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (MP::MAX_REDUCE_DOUBLE) [151] mp.f90(1878,14)


    Report from: Code generation optimizations [cg]

mp.f90(1878,14):remark #34051: REGISTER ALLOCATION : [mp_mp_max_reduce_double_] mp.f90:1878

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :    9[ rax rdx rcx rsi rdi r8-r11]
        
    Routine temporaries
        Total         :      24
            Global    :       6
            Local     :      18
        Regenerable   :      11
        Spilled       :       0
        
    Routine stack
        Variables     :      12 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       1 [1.00e+00 ~ 3.6%]
        Spills        :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: MP::MAX_REDUCE_DOUBLE_ARRAY

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (MP::MAX_REDUCE_DOUBLE_ARRAY) [152] mp.f90(1889,14)


    Report from: Loop nest, Vector & Auto-parallelization optimizations [loop, vec, par]


LOOP BEGIN at mp.f90(1895,5)
<Multiversioned v1>
   remark #25233: Loop multiversioned for stride tests on Assumed shape arrays
   remark #15300: LOOP WAS VECTORIZED
LOOP END

LOOP BEGIN at mp.f90(1895,5)
<Remainder loop for vectorization, Multiversioned v1>
LOOP END

LOOP BEGIN at mp.f90(1895,5)
<Multiversioned v2>
   remark #15300: LOOP WAS VECTORIZED
LOOP END

LOOP BEGIN at mp.f90(1895,5)
<Remainder loop for vectorization, Multiversioned v2>
LOOP END

LOOP BEGIN at mp.f90(1897,15)
<Multiversioned v1>
   remark #25233: Loop multiversioned for stride tests on Assumed shape arrays
   remark #15300: LOOP WAS VECTORIZED
LOOP END

LOOP BEGIN at mp.f90(1897,15)
<Remainder loop for vectorization, Multiversioned v1>
LOOP END

LOOP BEGIN at mp.f90(1897,15)
<Multiversioned v2>
   remark #15300: LOOP WAS VECTORIZED
LOOP END

LOOP BEGIN at mp.f90(1897,15)
<Remainder loop for vectorization, Multiversioned v2>
LOOP END

LOOP BEGIN at mp.f90(1897,15)
<Multiversioned v1>
   remark #25233: Loop multiversioned for stride tests on Assumed shape arrays
   remark #15300: LOOP WAS VECTORIZED
LOOP END

LOOP BEGIN at mp.f90(1897,15)
<Alternate Alignment Vectorized Loop, Multiversioned v1>
LOOP END

LOOP BEGIN at mp.f90(1897,15)
<Remainder loop for vectorization, Multiversioned v1>
LOOP END

LOOP BEGIN at mp.f90(1897,15)
<Multiversioned v2>
   remark #15300: LOOP WAS VECTORIZED
LOOP END

LOOP BEGIN at mp.f90(1897,15)
<Remainder loop for vectorization, Multiversioned v2>
LOOP END

    Report from: Code generation optimizations [cg]

mp.f90(1889,14):remark #34051: REGISTER ALLOCATION : [mp_mp_max_reduce_double_array_] mp.f90:1889

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :   15[ rax rdx rcx rbx rsi rdi r8-r15 zmm0]
        
    Routine temporaries
        Total         :      84
            Global    :      42
            Local     :      42
        Regenerable   :      11
        Spilled       :       6
        
    Routine stack
        Variables     :       8 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       1 [1.00e+00 ~ 0.4%]
        Spills        :       8 bytes*
            Reads     :       8 [2.08e+00 ~ 0.9%]
            Writes    :       1 [3.00e-01 ~ 0.1%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: MP::MAX_REDUCE_REAL

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (MP::MAX_REDUCE_REAL) [153] mp.f90(1901,14)


    Report from: Code generation optimizations [cg]

mp.f90(1901,14):remark #34051: REGISTER ALLOCATION : [mp_mp_max_reduce_real_] mp.f90:1901

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :    9[ rax rdx rcx rsi rdi r8-r11]
        
    Routine temporaries
        Total         :      24
            Global    :       6
            Local     :      18
        Regenerable   :      11
        Spilled       :       0
        
    Routine stack
        Variables     :       8 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       1 [1.00e+00 ~ 3.6%]
        Spills        :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: MP::MAX_REDUCE_REAL_ARRAY

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (MP::MAX_REDUCE_REAL_ARRAY) [154] mp.f90(1912,14)


    Report from: Loop nest, Vector & Auto-parallelization optimizations [loop, vec, par]


LOOP BEGIN at mp.f90(1918,5)
<Multiversioned v1>
   remark #25233: Loop multiversioned for stride tests on Assumed shape arrays
   remark #15300: LOOP WAS VECTORIZED
LOOP END

LOOP BEGIN at mp.f90(1918,5)
<Remainder loop for vectorization, Multiversioned v1>
LOOP END

LOOP BEGIN at mp.f90(1918,5)
<Multiversioned v2>
   remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
   remark #25439: unrolled with remainder by 2  
LOOP END

LOOP BEGIN at mp.f90(1918,5)
<Remainder, Multiversioned v2>
LOOP END

LOOP BEGIN at mp.f90(1920,15)
<Multiversioned v1>
   remark #25233: Loop multiversioned for stride tests on Assumed shape arrays
   remark #15300: LOOP WAS VECTORIZED
LOOP END

LOOP BEGIN at mp.f90(1920,15)
<Remainder loop for vectorization, Multiversioned v1>
LOOP END

LOOP BEGIN at mp.f90(1920,15)
<Multiversioned v2>
   remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
   remark #25439: unrolled with remainder by 2  
LOOP END

LOOP BEGIN at mp.f90(1920,15)
<Remainder, Multiversioned v2>
LOOP END

LOOP BEGIN at mp.f90(1920,15)
<Multiversioned v1>
   remark #25233: Loop multiversioned for stride tests on Assumed shape arrays
   remark #15300: LOOP WAS VECTORIZED
LOOP END

LOOP BEGIN at mp.f90(1920,15)
<Alternate Alignment Vectorized Loop, Multiversioned v1>
LOOP END

LOOP BEGIN at mp.f90(1920,15)
<Remainder loop for vectorization, Multiversioned v1>
LOOP END

LOOP BEGIN at mp.f90(1920,15)
<Multiversioned v2>
   remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
   remark #25439: unrolled with remainder by 2  
LOOP END

LOOP BEGIN at mp.f90(1920,15)
<Remainder, Multiversioned v2>
LOOP END

    Report from: Code generation optimizations [cg]

mp.f90(1912,14):remark #34051: REGISTER ALLOCATION : [mp_mp_max_reduce_real_array_] mp.f90:1912

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :   15[ rax rdx rcx rbx rsi rdi r8-r15 zmm0]
        
    Routine temporaries
        Total         :      97
            Global    :      51
            Local     :      46
        Regenerable   :      11
        Spilled       :       7
        
    Routine stack
        Variables     :       8 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       1 [1.00e+00 ~ 0.6%]
        Spills        :      16 bytes*
            Reads     :       2 [1.23e+00 ~ 0.7%]
            Writes    :       2 [1.13e+00 ~ 0.6%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: MP::MAX_ALLREDUCE_INTEGER

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (MP::MAX_ALLREDUCE_INTEGER) [155] mp.f90(1924,14)


    Report from: Code generation optimizations [cg]

mp.f90(1924,14):remark #34051: REGISTER ALLOCATION : [mp_mp_max_allreduce_integer_] mp.f90:1924

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :    7[ rax rdx rcx rsi rdi r8-r9]
        
    Routine temporaries
        Total         :      22
            Global    :       6
            Local     :      16
        Regenerable   :      12
        Spilled       :       0
        
    Routine stack
        Variables     :       8 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       1 [1.00e+00 ~ 3.8%]
        Spills        :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: MP::MAX_ALLREDUCE_INTEGER_ARRAY

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (MP::MAX_ALLREDUCE_INTEGER_ARRAY) [156] mp.f90(1933,14)


    Report from: Loop nest, Vector & Auto-parallelization optimizations [loop, vec, par]


LOOP BEGIN at mp.f90(1938,5)
<Multiversioned v1>
   remark #25233: Loop multiversioned for stride tests on Assumed shape arrays
   remark #15300: LOOP WAS VECTORIZED
LOOP END

LOOP BEGIN at mp.f90(1938,5)
<Remainder loop for vectorization, Multiversioned v1>
LOOP END

LOOP BEGIN at mp.f90(1938,5)
<Multiversioned v2>
   remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
   remark #25439: unrolled with remainder by 2  
LOOP END

LOOP BEGIN at mp.f90(1938,5)
<Remainder, Multiversioned v2>
LOOP END

LOOP BEGIN at mp.f90(1940,15)
<Multiversioned v1>
   remark #25233: Loop multiversioned for stride tests on Assumed shape arrays
   remark #15300: LOOP WAS VECTORIZED
LOOP END

LOOP BEGIN at mp.f90(1940,15)
<Remainder loop for vectorization, Multiversioned v1>
LOOP END

LOOP BEGIN at mp.f90(1940,15)
<Multiversioned v2>
   remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
   remark #25439: unrolled with remainder by 2  
LOOP END

LOOP BEGIN at mp.f90(1940,15)
<Remainder, Multiversioned v2>
LOOP END

LOOP BEGIN at mp.f90(1940,15)
<Multiversioned v1>
   remark #25233: Loop multiversioned for stride tests on Assumed shape arrays
   remark #15300: LOOP WAS VECTORIZED
LOOP END

LOOP BEGIN at mp.f90(1940,15)
<Alternate Alignment Vectorized Loop, Multiversioned v1>
LOOP END

LOOP BEGIN at mp.f90(1940,15)
<Remainder loop for vectorization, Multiversioned v1>
LOOP END

LOOP BEGIN at mp.f90(1940,15)
<Multiversioned v2>
   remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
   remark #25439: unrolled with remainder by 2  
LOOP END

LOOP BEGIN at mp.f90(1940,15)
<Remainder, Multiversioned v2>
LOOP END

    Report from: Code generation optimizations [cg]

mp.f90(1933,14):remark #34051: REGISTER ALLOCATION : [mp_mp_max_allreduce_integer_array_] mp.f90:1933

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :   15[ rax rdx rcx rbx rsi rdi r8-r15 zmm0]
        
    Routine temporaries
        Total         :      95
            Global    :      50
            Local     :      45
        Regenerable   :      12
        Spilled       :       6
        
    Routine stack
        Variables     :       8 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       1 [1.00e+00 ~ 0.6%]
        Spills        :       8 bytes*
            Reads     :       1 [1.00e+00 ~ 0.6%]
            Writes    :       1 [9.00e-01 ~ 0.5%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: MP::MAX_ALLREDUCE_REAL

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (MP::MAX_ALLREDUCE_REAL) [157] mp.f90(1943,14)


    Report from: Code generation optimizations [cg]

mp.f90(1943,14):remark #34051: REGISTER ALLOCATION : [mp_mp_max_allreduce_real_] mp.f90:1943

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :    7[ rax rdx rcx rsi rdi r8-r9]
        
    Routine temporaries
        Total         :      22
            Global    :       6
            Local     :      16
        Regenerable   :      12
        Spilled       :       0
        
    Routine stack
        Variables     :       8 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       1 [1.00e+00 ~ 3.8%]
        Spills        :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: MP::MAX_ALLREDUCE_REAL_ARRAY

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (MP::MAX_ALLREDUCE_REAL_ARRAY) [158] mp.f90(1953,14)


    Report from: Loop nest, Vector & Auto-parallelization optimizations [loop, vec, par]


LOOP BEGIN at mp.f90(1958,5)
<Multiversioned v1>
   remark #25233: Loop multiversioned for stride tests on Assumed shape arrays
   remark #15300: LOOP WAS VECTORIZED
LOOP END

LOOP BEGIN at mp.f90(1958,5)
<Remainder loop for vectorization, Multiversioned v1>
LOOP END

LOOP BEGIN at mp.f90(1958,5)
<Multiversioned v2>
   remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
   remark #25439: unrolled with remainder by 2  
LOOP END

LOOP BEGIN at mp.f90(1958,5)
<Remainder, Multiversioned v2>
LOOP END

LOOP BEGIN at mp.f90(1960,15)
<Multiversioned v1>
   remark #25233: Loop multiversioned for stride tests on Assumed shape arrays
   remark #15300: LOOP WAS VECTORIZED
LOOP END

LOOP BEGIN at mp.f90(1960,15)
<Remainder loop for vectorization, Multiversioned v1>
LOOP END

LOOP BEGIN at mp.f90(1960,15)
<Multiversioned v2>
   remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
   remark #25439: unrolled with remainder by 2  
LOOP END

LOOP BEGIN at mp.f90(1960,15)
<Remainder, Multiversioned v2>
LOOP END

LOOP BEGIN at mp.f90(1960,15)
<Multiversioned v1>
   remark #25233: Loop multiversioned for stride tests on Assumed shape arrays
   remark #15300: LOOP WAS VECTORIZED
LOOP END

LOOP BEGIN at mp.f90(1960,15)
<Alternate Alignment Vectorized Loop, Multiversioned v1>
LOOP END

LOOP BEGIN at mp.f90(1960,15)
<Remainder loop for vectorization, Multiversioned v1>
LOOP END

LOOP BEGIN at mp.f90(1960,15)
<Multiversioned v2>
   remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
   remark #25439: unrolled with remainder by 2  
LOOP END

LOOP BEGIN at mp.f90(1960,15)
<Remainder, Multiversioned v2>
LOOP END

    Report from: Code generation optimizations [cg]

mp.f90(1953,14):remark #34051: REGISTER ALLOCATION : [mp_mp_max_allreduce_real_array_] mp.f90:1953

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :   15[ rax rdx rcx rbx rsi rdi r8-r15 zmm0]
        
    Routine temporaries
        Total         :      95
            Global    :      50
            Local     :      45
        Regenerable   :      12
        Spilled       :       6
        
    Routine stack
        Variables     :       8 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       1 [1.00e+00 ~ 0.6%]
        Spills        :       8 bytes*
            Reads     :       1 [1.00e+00 ~ 0.6%]
            Writes    :       1 [9.00e-01 ~ 0.5%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: MP::MAX_ALLREDUCE_DOUBLE

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (MP::MAX_ALLREDUCE_DOUBLE) [159] mp.f90(1963,14)


    Report from: Code generation optimizations [cg]

mp.f90(1963,14):remark #34051: REGISTER ALLOCATION : [mp_mp_max_allreduce_double_] mp.f90:1963

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :    7[ rax rdx rcx rsi rdi r8-r9]
        
    Routine temporaries
        Total         :      22
            Global    :       6
            Local     :      16
        Regenerable   :      12
        Spilled       :       0
        
    Routine stack
        Variables     :      12 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       1 [1.00e+00 ~ 3.8%]
        Spills        :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: MP::MAX_ALLREDUCE_DOUBLE_ARRAY

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (MP::MAX_ALLREDUCE_DOUBLE_ARRAY) [160] mp.f90(1973,14)


    Report from: Loop nest, Vector & Auto-parallelization optimizations [loop, vec, par]


LOOP BEGIN at mp.f90(1978,5)
<Multiversioned v1>
   remark #25233: Loop multiversioned for stride tests on Assumed shape arrays
   remark #15300: LOOP WAS VECTORIZED
LOOP END

LOOP BEGIN at mp.f90(1978,5)
<Remainder loop for vectorization, Multiversioned v1>
LOOP END

LOOP BEGIN at mp.f90(1978,5)
<Multiversioned v2>
   remark #15300: LOOP WAS VECTORIZED
LOOP END

LOOP BEGIN at mp.f90(1978,5)
<Remainder loop for vectorization, Multiversioned v2>
LOOP END

LOOP BEGIN at mp.f90(1980,15)
<Multiversioned v1>
   remark #25233: Loop multiversioned for stride tests on Assumed shape arrays
   remark #15300: LOOP WAS VECTORIZED
LOOP END

LOOP BEGIN at mp.f90(1980,15)
<Remainder loop for vectorization, Multiversioned v1>
LOOP END

LOOP BEGIN at mp.f90(1980,15)
<Multiversioned v2>
   remark #15300: LOOP WAS VECTORIZED
LOOP END

LOOP BEGIN at mp.f90(1980,15)
<Remainder loop for vectorization, Multiversioned v2>
LOOP END

LOOP BEGIN at mp.f90(1980,15)
<Multiversioned v1>
   remark #25233: Loop multiversioned for stride tests on Assumed shape arrays
   remark #15300: LOOP WAS VECTORIZED
LOOP END

LOOP BEGIN at mp.f90(1980,15)
<Alternate Alignment Vectorized Loop, Multiversioned v1>
LOOP END

LOOP BEGIN at mp.f90(1980,15)
<Remainder loop for vectorization, Multiversioned v1>
LOOP END

LOOP BEGIN at mp.f90(1980,15)
<Multiversioned v2>
   remark #15300: LOOP WAS VECTORIZED
LOOP END

LOOP BEGIN at mp.f90(1980,15)
<Remainder loop for vectorization, Multiversioned v2>
LOOP END

    Report from: Code generation optimizations [cg]

mp.f90(1973,14):remark #34051: REGISTER ALLOCATION : [mp_mp_max_allreduce_double_array_] mp.f90:1973

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :   15[ rax rdx rcx rbx rsi rdi r8-r15 zmm0]
        
    Routine temporaries
        Total         :      82
            Global    :      41
            Local     :      41
        Regenerable   :      12
        Spilled       :       6
        
    Routine stack
        Variables     :       8 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       1 [1.00e+00 ~ 0.5%]
        Spills        :       8 bytes*
            Reads     :       8 [2.08e+00 ~ 0.9%]
            Writes    :       1 [3.00e-01 ~ 0.1%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: MP::MIN_REDUCE_INTEGER

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (MP::MIN_REDUCE_INTEGER) [161] mp.f90(1984,14)


    Report from: Code generation optimizations [cg]

mp.f90(1984,14):remark #34051: REGISTER ALLOCATION : [mp_mp_min_reduce_integer_] mp.f90:1984

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :    9[ rax rdx rcx rsi rdi r8-r11]
        
    Routine temporaries
        Total         :      24
            Global    :       6
            Local     :      18
        Regenerable   :      11
        Spilled       :       0
        
    Routine stack
        Variables     :       8 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       1 [1.00e+00 ~ 3.6%]
        Spills        :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: MP::MIN_REDUCE_INTEGER_ARRAY

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (MP::MIN_REDUCE_INTEGER_ARRAY) [162] mp.f90(1995,14)


    Report from: Loop nest, Vector & Auto-parallelization optimizations [loop, vec, par]


LOOP BEGIN at mp.f90(2001,5)
<Multiversioned v1>
   remark #25233: Loop multiversioned for stride tests on Assumed shape arrays
   remark #15300: LOOP WAS VECTORIZED
LOOP END

LOOP BEGIN at mp.f90(2001,5)
<Remainder loop for vectorization, Multiversioned v1>
LOOP END

LOOP BEGIN at mp.f90(2001,5)
<Multiversioned v2>
   remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
   remark #25439: unrolled with remainder by 2  
LOOP END

LOOP BEGIN at mp.f90(2001,5)
<Remainder, Multiversioned v2>
LOOP END

LOOP BEGIN at mp.f90(2003,15)
<Multiversioned v1>
   remark #25233: Loop multiversioned for stride tests on Assumed shape arrays
   remark #15300: LOOP WAS VECTORIZED
LOOP END

LOOP BEGIN at mp.f90(2003,15)
<Remainder loop for vectorization, Multiversioned v1>
LOOP END

LOOP BEGIN at mp.f90(2003,15)
<Multiversioned v2>
   remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
   remark #25439: unrolled with remainder by 2  
LOOP END

LOOP BEGIN at mp.f90(2003,15)
<Remainder, Multiversioned v2>
LOOP END

LOOP BEGIN at mp.f90(2003,15)
<Multiversioned v1>
   remark #25233: Loop multiversioned for stride tests on Assumed shape arrays
   remark #15300: LOOP WAS VECTORIZED
LOOP END

LOOP BEGIN at mp.f90(2003,15)
<Alternate Alignment Vectorized Loop, Multiversioned v1>
LOOP END

LOOP BEGIN at mp.f90(2003,15)
<Remainder loop for vectorization, Multiversioned v1>
LOOP END

LOOP BEGIN at mp.f90(2003,15)
<Multiversioned v2>
   remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
   remark #25439: unrolled with remainder by 2  
LOOP END

LOOP BEGIN at mp.f90(2003,15)
<Remainder, Multiversioned v2>
LOOP END

    Report from: Code generation optimizations [cg]

mp.f90(1995,14):remark #34051: REGISTER ALLOCATION : [mp_mp_min_reduce_integer_array_] mp.f90:1995

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :   15[ rax rdx rcx rbx rsi rdi r8-r15 zmm0]
        
    Routine temporaries
        Total         :      97
            Global    :      51
            Local     :      46
        Regenerable   :      11
        Spilled       :       7
        
    Routine stack
        Variables     :       8 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       1 [1.00e+00 ~ 0.6%]
        Spills        :      16 bytes*
            Reads     :       2 [1.23e+00 ~ 0.7%]
            Writes    :       2 [1.13e+00 ~ 0.6%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: MP::MIN_REDUCE_REAL

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (MP::MIN_REDUCE_REAL) [163] mp.f90(2006,14)


    Report from: Code generation optimizations [cg]

mp.f90(2006,14):remark #34051: REGISTER ALLOCATION : [mp_mp_min_reduce_real_] mp.f90:2006

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :    9[ rax rdx rcx rsi rdi r8-r11]
        
    Routine temporaries
        Total         :      24
            Global    :       6
            Local     :      18
        Regenerable   :      11
        Spilled       :       0
        
    Routine stack
        Variables     :       8 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       1 [1.00e+00 ~ 3.6%]
        Spills        :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: MP::MIN_REDUCE_REAL_ARRAY

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (MP::MIN_REDUCE_REAL_ARRAY) [164] mp.f90(2017,14)


    Report from: Loop nest, Vector & Auto-parallelization optimizations [loop, vec, par]


LOOP BEGIN at mp.f90(2023,5)
<Multiversioned v1>
   remark #25233: Loop multiversioned for stride tests on Assumed shape arrays
   remark #15300: LOOP WAS VECTORIZED
LOOP END

LOOP BEGIN at mp.f90(2023,5)
<Remainder loop for vectorization, Multiversioned v1>
LOOP END

LOOP BEGIN at mp.f90(2023,5)
<Multiversioned v2>
   remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
   remark #25439: unrolled with remainder by 2  
LOOP END

LOOP BEGIN at mp.f90(2023,5)
<Remainder, Multiversioned v2>
LOOP END

LOOP BEGIN at mp.f90(2025,15)
<Multiversioned v1>
   remark #25233: Loop multiversioned for stride tests on Assumed shape arrays
   remark #15300: LOOP WAS VECTORIZED
LOOP END

LOOP BEGIN at mp.f90(2025,15)
<Remainder loop for vectorization, Multiversioned v1>
LOOP END

LOOP BEGIN at mp.f90(2025,15)
<Multiversioned v2>
   remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
   remark #25439: unrolled with remainder by 2  
LOOP END

LOOP BEGIN at mp.f90(2025,15)
<Remainder, Multiversioned v2>
LOOP END

LOOP BEGIN at mp.f90(2025,15)
<Multiversioned v1>
   remark #25233: Loop multiversioned for stride tests on Assumed shape arrays
   remark #15300: LOOP WAS VECTORIZED
LOOP END

LOOP BEGIN at mp.f90(2025,15)
<Alternate Alignment Vectorized Loop, Multiversioned v1>
LOOP END

LOOP BEGIN at mp.f90(2025,15)
<Remainder loop for vectorization, Multiversioned v1>
LOOP END

LOOP BEGIN at mp.f90(2025,15)
<Multiversioned v2>
   remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
   remark #25439: unrolled with remainder by 2  
LOOP END

LOOP BEGIN at mp.f90(2025,15)
<Remainder, Multiversioned v2>
LOOP END

    Report from: Code generation optimizations [cg]

mp.f90(2017,14):remark #34051: REGISTER ALLOCATION : [mp_mp_min_reduce_real_array_] mp.f90:2017

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :   15[ rax rdx rcx rbx rsi rdi r8-r15 zmm0]
        
    Routine temporaries
        Total         :      97
            Global    :      51
            Local     :      46
        Regenerable   :      11
        Spilled       :       7
        
    Routine stack
        Variables     :       8 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       1 [1.00e+00 ~ 0.6%]
        Spills        :      16 bytes*
            Reads     :       2 [1.23e+00 ~ 0.7%]
            Writes    :       2 [1.13e+00 ~ 0.6%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: MP::MIN_REDUCE_DOUBLE

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (MP::MIN_REDUCE_DOUBLE) [165] mp.f90(2028,14)


    Report from: Code generation optimizations [cg]

mp.f90(2028,14):remark #34051: REGISTER ALLOCATION : [mp_mp_min_reduce_double_] mp.f90:2028

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :    9[ rax rdx rcx rsi rdi r8-r11]
        
    Routine temporaries
        Total         :      24
            Global    :       6
            Local     :      18
        Regenerable   :      11
        Spilled       :       0
        
    Routine stack
        Variables     :      12 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       1 [1.00e+00 ~ 3.6%]
        Spills        :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: MP::MIN_REDUCE_DOUBLE_ARRAY

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (MP::MIN_REDUCE_DOUBLE_ARRAY) [166] mp.f90(2039,14)


    Report from: Loop nest, Vector & Auto-parallelization optimizations [loop, vec, par]


LOOP BEGIN at mp.f90(2045,5)
<Multiversioned v1>
   remark #25233: Loop multiversioned for stride tests on Assumed shape arrays
   remark #15300: LOOP WAS VECTORIZED
LOOP END

LOOP BEGIN at mp.f90(2045,5)
<Remainder loop for vectorization, Multiversioned v1>
LOOP END

LOOP BEGIN at mp.f90(2045,5)
<Multiversioned v2>
   remark #15300: LOOP WAS VECTORIZED
LOOP END

LOOP BEGIN at mp.f90(2045,5)
<Remainder loop for vectorization, Multiversioned v2>
LOOP END

LOOP BEGIN at mp.f90(2047,15)
<Multiversioned v1>
   remark #25233: Loop multiversioned for stride tests on Assumed shape arrays
   remark #15300: LOOP WAS VECTORIZED
LOOP END

LOOP BEGIN at mp.f90(2047,15)
<Remainder loop for vectorization, Multiversioned v1>
LOOP END

LOOP BEGIN at mp.f90(2047,15)
<Multiversioned v2>
   remark #15300: LOOP WAS VECTORIZED
LOOP END

LOOP BEGIN at mp.f90(2047,15)
<Remainder loop for vectorization, Multiversioned v2>
LOOP END

LOOP BEGIN at mp.f90(2047,15)
<Multiversioned v1>
   remark #25233: Loop multiversioned for stride tests on Assumed shape arrays
   remark #15300: LOOP WAS VECTORIZED
LOOP END

LOOP BEGIN at mp.f90(2047,15)
<Alternate Alignment Vectorized Loop, Multiversioned v1>
LOOP END

LOOP BEGIN at mp.f90(2047,15)
<Remainder loop for vectorization, Multiversioned v1>
LOOP END

LOOP BEGIN at mp.f90(2047,15)
<Multiversioned v2>
   remark #15300: LOOP WAS VECTORIZED
LOOP END

LOOP BEGIN at mp.f90(2047,15)
<Remainder loop for vectorization, Multiversioned v2>
LOOP END

    Report from: Code generation optimizations [cg]

mp.f90(2039,14):remark #34051: REGISTER ALLOCATION : [mp_mp_min_reduce_double_array_] mp.f90:2039

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :   15[ rax rdx rcx rbx rsi rdi r8-r15 zmm0]
        
    Routine temporaries
        Total         :      84
            Global    :      42
            Local     :      42
        Regenerable   :      11
        Spilled       :       6
        
    Routine stack
        Variables     :       8 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       1 [1.00e+00 ~ 0.4%]
        Spills        :       8 bytes*
            Reads     :       8 [2.08e+00 ~ 0.9%]
            Writes    :       1 [3.00e-01 ~ 0.1%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: MP::MIN_ALLREDUCE_INTEGER

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (MP::MIN_ALLREDUCE_INTEGER) [167] mp.f90(2051,14)


    Report from: Code generation optimizations [cg]

mp.f90(2051,14):remark #34051: REGISTER ALLOCATION : [mp_mp_min_allreduce_integer_] mp.f90:2051

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :    7[ rax rdx rcx rsi rdi r8-r9]
        
    Routine temporaries
        Total         :      22
            Global    :       6
            Local     :      16
        Regenerable   :      12
        Spilled       :       0
        
    Routine stack
        Variables     :       8 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       1 [1.00e+00 ~ 3.8%]
        Spills        :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: MP::MIN_ALLREDUCE_INTEGER_ARRAY

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (MP::MIN_ALLREDUCE_INTEGER_ARRAY) [168] mp.f90(2060,14)


    Report from: Loop nest, Vector & Auto-parallelization optimizations [loop, vec, par]


LOOP BEGIN at mp.f90(2065,5)
<Multiversioned v1>
   remark #25233: Loop multiversioned for stride tests on Assumed shape arrays
   remark #15300: LOOP WAS VECTORIZED
LOOP END

LOOP BEGIN at mp.f90(2065,5)
<Remainder loop for vectorization, Multiversioned v1>
LOOP END

LOOP BEGIN at mp.f90(2065,5)
<Multiversioned v2>
   remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
   remark #25439: unrolled with remainder by 2  
LOOP END

LOOP BEGIN at mp.f90(2065,5)
<Remainder, Multiversioned v2>
LOOP END

LOOP BEGIN at mp.f90(2067,15)
<Multiversioned v1>
   remark #25233: Loop multiversioned for stride tests on Assumed shape arrays
   remark #15300: LOOP WAS VECTORIZED
LOOP END

LOOP BEGIN at mp.f90(2067,15)
<Remainder loop for vectorization, Multiversioned v1>
LOOP END

LOOP BEGIN at mp.f90(2067,15)
<Multiversioned v2>
   remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
   remark #25439: unrolled with remainder by 2  
LOOP END

LOOP BEGIN at mp.f90(2067,15)
<Remainder, Multiversioned v2>
LOOP END

LOOP BEGIN at mp.f90(2067,15)
<Multiversioned v1>
   remark #25233: Loop multiversioned for stride tests on Assumed shape arrays
   remark #15300: LOOP WAS VECTORIZED
LOOP END

LOOP BEGIN at mp.f90(2067,15)
<Alternate Alignment Vectorized Loop, Multiversioned v1>
LOOP END

LOOP BEGIN at mp.f90(2067,15)
<Remainder loop for vectorization, Multiversioned v1>
LOOP END

LOOP BEGIN at mp.f90(2067,15)
<Multiversioned v2>
   remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
   remark #25439: unrolled with remainder by 2  
LOOP END

LOOP BEGIN at mp.f90(2067,15)
<Remainder, Multiversioned v2>
LOOP END

    Report from: Code generation optimizations [cg]

mp.f90(2060,14):remark #34051: REGISTER ALLOCATION : [mp_mp_min_allreduce_integer_array_] mp.f90:2060

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :   15[ rax rdx rcx rbx rsi rdi r8-r15 zmm0]
        
    Routine temporaries
        Total         :      95
            Global    :      50
            Local     :      45
        Regenerable   :      12
        Spilled       :       6
        
    Routine stack
        Variables     :       8 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       1 [1.00e+00 ~ 0.6%]
        Spills        :       8 bytes*
            Reads     :       1 [1.00e+00 ~ 0.6%]
            Writes    :       1 [9.00e-01 ~ 0.5%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: MP::MIN_ALLREDUCE_REAL

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (MP::MIN_ALLREDUCE_REAL) [169] mp.f90(2070,14)


    Report from: Code generation optimizations [cg]

mp.f90(2070,14):remark #34051: REGISTER ALLOCATION : [mp_mp_min_allreduce_real_] mp.f90:2070

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :    7[ rax rdx rcx rsi rdi r8-r9]
        
    Routine temporaries
        Total         :      22
            Global    :       6
            Local     :      16
        Regenerable   :      12
        Spilled       :       0
        
    Routine stack
        Variables     :       8 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       1 [1.00e+00 ~ 3.8%]
        Spills        :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: MP::MIN_ALLREDUCE_REAL_ARRAY

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (MP::MIN_ALLREDUCE_REAL_ARRAY) [170] mp.f90(2080,14)


    Report from: Loop nest, Vector & Auto-parallelization optimizations [loop, vec, par]


LOOP BEGIN at mp.f90(2085,5)
<Multiversioned v1>
   remark #25233: Loop multiversioned for stride tests on Assumed shape arrays
   remark #15300: LOOP WAS VECTORIZED
LOOP END

LOOP BEGIN at mp.f90(2085,5)
<Remainder loop for vectorization, Multiversioned v1>
LOOP END

LOOP BEGIN at mp.f90(2085,5)
<Multiversioned v2>
   remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
   remark #25439: unrolled with remainder by 2  
LOOP END

LOOP BEGIN at mp.f90(2085,5)
<Remainder, Multiversioned v2>
LOOP END

LOOP BEGIN at mp.f90(2087,15)
<Multiversioned v1>
   remark #25233: Loop multiversioned for stride tests on Assumed shape arrays
   remark #15300: LOOP WAS VECTORIZED
LOOP END

LOOP BEGIN at mp.f90(2087,15)
<Remainder loop for vectorization, Multiversioned v1>
LOOP END

LOOP BEGIN at mp.f90(2087,15)
<Multiversioned v2>
   remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
   remark #25439: unrolled with remainder by 2  
LOOP END

LOOP BEGIN at mp.f90(2087,15)
<Remainder, Multiversioned v2>
LOOP END

LOOP BEGIN at mp.f90(2087,15)
<Multiversioned v1>
   remark #25233: Loop multiversioned for stride tests on Assumed shape arrays
   remark #15300: LOOP WAS VECTORIZED
LOOP END

LOOP BEGIN at mp.f90(2087,15)
<Alternate Alignment Vectorized Loop, Multiversioned v1>
LOOP END

LOOP BEGIN at mp.f90(2087,15)
<Remainder loop for vectorization, Multiversioned v1>
LOOP END

LOOP BEGIN at mp.f90(2087,15)
<Multiversioned v2>
   remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
   remark #25439: unrolled with remainder by 2  
LOOP END

LOOP BEGIN at mp.f90(2087,15)
<Remainder, Multiversioned v2>
LOOP END

    Report from: Code generation optimizations [cg]

mp.f90(2080,14):remark #34051: REGISTER ALLOCATION : [mp_mp_min_allreduce_real_array_] mp.f90:2080

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :   15[ rax rdx rcx rbx rsi rdi r8-r15 zmm0]
        
    Routine temporaries
        Total         :      95
            Global    :      50
            Local     :      45
        Regenerable   :      12
        Spilled       :       6
        
    Routine stack
        Variables     :       8 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       1 [1.00e+00 ~ 0.6%]
        Spills        :       8 bytes*
            Reads     :       1 [1.00e+00 ~ 0.6%]
            Writes    :       1 [9.00e-01 ~ 0.5%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: MP::MIN_ALLREDUCE_DOUBLE

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (MP::MIN_ALLREDUCE_DOUBLE) [171] mp.f90(2090,14)


    Report from: Code generation optimizations [cg]

mp.f90(2090,14):remark #34051: REGISTER ALLOCATION : [mp_mp_min_allreduce_double_] mp.f90:2090

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :    7[ rax rdx rcx rsi rdi r8-r9]
        
    Routine temporaries
        Total         :      22
            Global    :       6
            Local     :      16
        Regenerable   :      12
        Spilled       :       0
        
    Routine stack
        Variables     :      12 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       1 [1.00e+00 ~ 3.8%]
        Spills        :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: MP::MIN_ALLREDUCE_DOUBLE_ARRAY

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (MP::MIN_ALLREDUCE_DOUBLE_ARRAY) [172] mp.f90(2100,14)


    Report from: Loop nest, Vector & Auto-parallelization optimizations [loop, vec, par]


LOOP BEGIN at mp.f90(2105,5)
<Multiversioned v1>
   remark #25233: Loop multiversioned for stride tests on Assumed shape arrays
   remark #15300: LOOP WAS VECTORIZED
LOOP END

LOOP BEGIN at mp.f90(2105,5)
<Remainder loop for vectorization, Multiversioned v1>
LOOP END

LOOP BEGIN at mp.f90(2105,5)
<Multiversioned v2>
   remark #15300: LOOP WAS VECTORIZED
LOOP END

LOOP BEGIN at mp.f90(2105,5)
<Remainder loop for vectorization, Multiversioned v2>
LOOP END

LOOP BEGIN at mp.f90(2107,15)
<Multiversioned v1>
   remark #25233: Loop multiversioned for stride tests on Assumed shape arrays
   remark #15300: LOOP WAS VECTORIZED
LOOP END

LOOP BEGIN at mp.f90(2107,15)
<Remainder loop for vectorization, Multiversioned v1>
LOOP END

LOOP BEGIN at mp.f90(2107,15)
<Multiversioned v2>
   remark #15300: LOOP WAS VECTORIZED
LOOP END

LOOP BEGIN at mp.f90(2107,15)
<Remainder loop for vectorization, Multiversioned v2>
LOOP END

LOOP BEGIN at mp.f90(2107,15)
<Multiversioned v1>
   remark #25233: Loop multiversioned for stride tests on Assumed shape arrays
   remark #15300: LOOP WAS VECTORIZED
LOOP END

LOOP BEGIN at mp.f90(2107,15)
<Alternate Alignment Vectorized Loop, Multiversioned v1>
LOOP END

LOOP BEGIN at mp.f90(2107,15)
<Remainder loop for vectorization, Multiversioned v1>
LOOP END

LOOP BEGIN at mp.f90(2107,15)
<Multiversioned v2>
   remark #15300: LOOP WAS VECTORIZED
LOOP END

LOOP BEGIN at mp.f90(2107,15)
<Remainder loop for vectorization, Multiversioned v2>
LOOP END

    Report from: Code generation optimizations [cg]

mp.f90(2100,14):remark #34051: REGISTER ALLOCATION : [mp_mp_min_allreduce_double_array_] mp.f90:2100

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :   15[ rax rdx rcx rbx rsi rdi r8-r15 zmm0]
        
    Routine temporaries
        Total         :      82
            Global    :      41
            Local     :      41
        Regenerable   :      12
        Spilled       :       6
        
    Routine stack
        Variables     :       8 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       1 [1.00e+00 ~ 0.5%]
        Spills        :       8 bytes*
            Reads     :       8 [2.08e+00 ~ 0.9%]
            Writes    :       1 [3.00e-01 ~ 0.1%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: MP::OR_ALLREDUCE

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (MP::OR_ALLREDUCE) [173] mp.f90(2110,14)


    Report from: Code generation optimizations [cg]

mp.f90(2110,14):remark #34051: REGISTER ALLOCATION : [mp_mp_or_allreduce_] mp.f90:2110

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :    7[ rax rdx rcx rsi rdi r8-r9]
        
    Routine temporaries
        Total         :      22
            Global    :       6
            Local     :      16
        Regenerable   :      12
        Spilled       :       0
        
    Routine stack
        Variables     :       8 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       1 [1.00e+00 ~ 3.8%]
        Spills        :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: MP::GETTIME

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (MP::GETTIME) [174] mp.f90(168,12)


    Report from: Code generation optimizations [cg]

mp.f90(168,12):remark #34051: REGISTER ALLOCATION : [mp_mp_gettime_] mp.f90:168

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :    3[ rax zmm0-zmm1]
        
    Routine temporaries
        Total         :      12
            Global    :       8
            Local     :       4
        Regenerable   :       1
        Spilled       :       0
        
    Routine stack
        Variables     :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
        Spills        :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: MP::ABORT_MP

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (MP::ABORT_MP) [175] mp.f90(350,14)


    Report from: Code generation optimizations [cg]

mp.f90(350,14):remark #34051: REGISTER ALLOCATION : [mp_mp_abort_mp_] mp.f90:350

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :    3[ rax rsi rdi]
        
    Routine temporaries
        Total         :      11
            Global    :       6
            Local     :       5
        Regenerable   :       5
        Spilled       :       0
        
    Routine stack
        Variables     :       4 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
        Spills        :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: MP::INIT_MP_THREAD

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (MP::INIT_MP_THREAD) [176] mp.f90(308,14)
  -> (318,12) MP::FINISH_MP
  -> (325,12) MP::GETTIME


    Report from: Code generation optimizations [cg]

mp.f90(308,14):remark #34051: REGISTER ALLOCATION : [mp_mp_init_mp_thread_] mp.f90:308

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :   10[ rax rdx rcx rbp rsi rdi r8-r9 r12 zmm0]
        
    Routine temporaries
        Total         :      79
            Global    :      12
            Local     :      67
        Regenerable   :      60
        Spilled       :       2
        
    Routine stack
        Variables     :     140 bytes*
            Reads     :       2 [2.00e+00 ~ 2.8%]
            Writes    :      12 [6.50e+00 ~ 9.2%]
        Spills        :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: MP::INIT_MP

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (MP::INIT_MP) [177] mp.f90(295,14)
  -> (304,12) MP::GETTIME


    Report from: Code generation optimizations [cg]

mp.f90(295,14):remark #34051: REGISTER ALLOCATION : [mp_mp_init_mp_] mp.f90:295

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :    6[ rax rdx rcx rsi rdi zmm0]
        
    Routine temporaries
        Total         :      27
            Global    :       8
            Local     :      19
        Regenerable   :      10
        Spilled       :       0
        
    Routine stack
        Variables     :       4 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
        Spills        :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================
