Intel(R) Advisor can now assist with vectorization and show optimization
  report messages with your source code.
See "https://software.intel.com/en-us/intel-advisor-xe" for details.


    Report from: Interprocedural optimizations [ipo]

INLINING OPTION VALUES:
  -inline-factor: 100
  -inline-min-size: 30
  -inline-max-size: 230
  -inline-max-total-size: 2000
  -inline-max-per-routine: 10000
  -inline-max-per-compile: 500000


Begin optimization report for: stepping._

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (stepping._) [1] stepping.f90(205,14)


    Report from: Code generation optimizations [cg]

stepping.f90(205,14):remark #34051: REGISTER ALLOCATION : [stepping._] stepping.f90:205

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :    0[ reg_null]
        
    Routine temporaries
        Total         :       6
            Global    :       0
            Local     :       6
        Regenerable   :       0
        Spilled       :       0
        
    Routine stack
        Variables     :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
        Spills        :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: STEPPING::STEP2D

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (STEPPING::STEP2D) [2] stepping.f90(213,18)


    Report from: Loop nest, Vector & Auto-parallelization optimizations [loop, vec, par]


LOOP BEGIN at stepping.f90(226,36)
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at stepping.f90(225,9)
   <Peeled loop for vectorization>
   LOOP END

   LOOP BEGIN at stepping.f90(225,9)
      remark #15300: LOOP WAS VECTORIZED
   LOOP END

   LOOP BEGIN at stepping.f90(225,9)
   <Alternate Alignment Vectorized Loop>
   LOOP END

   LOOP BEGIN at stepping.f90(225,9)
   <Remainder loop for vectorization>
      remark #15335: remainder loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
   LOOP END
LOOP END

LOOP BEGIN at stepping.f90(236,26)
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at stepping.f90(235,9)
   <Peeled loop for vectorization>
   LOOP END

   LOOP BEGIN at stepping.f90(235,9)
      remark #15300: LOOP WAS VECTORIZED
   LOOP END

   LOOP BEGIN at stepping.f90(235,9)
   <Alternate Alignment Vectorized Loop>
   LOOP END

   LOOP BEGIN at stepping.f90(235,9)
   <Remainder loop for vectorization>
   LOOP END
LOOP END

    Report from: Code generation optimizations [cg]

stepping.f90(213,18):remark #34051: REGISTER ALLOCATION : [stepping_mp_step2d_] stepping.f90:213

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :   29[ rax rdx rcx rbx rbp rsi rdi r8-r13 zmm0-zmm15]
        
    Routine temporaries
        Total         :     192
            Global    :      50
            Local     :     142
        Regenerable   :       4
        Spilled       :       4
        
    Routine stack
        Variables     :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
        Spills        :      32 bytes*
            Reads     :       7 [3.50e+00 ~ 0.0%]
            Writes    :       7 [3.50e+00 ~ 0.0%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: STEPPING::STEP1D_X

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (STEPPING::STEP1D_X) [3] stepping.f90(248,18)


    Report from: Loop nest, Vector & Auto-parallelization optimizations [loop, vec, par]


LOOP BEGIN at stepping.f90(260,32)
<Peeled loop for vectorization>
LOOP END

LOOP BEGIN at stepping.f90(260,32)
   remark #15300: LOOP WAS VECTORIZED
LOOP END

LOOP BEGIN at stepping.f90(260,32)
<Alternate Alignment Vectorized Loop>
LOOP END

LOOP BEGIN at stepping.f90(260,32)
<Remainder loop for vectorization>
   remark #15335: remainder loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
LOOP END

LOOP BEGIN at stepping.f90(268,22)
<Peeled loop for vectorization>
LOOP END

LOOP BEGIN at stepping.f90(268,22)
   remark #15300: LOOP WAS VECTORIZED
LOOP END

LOOP BEGIN at stepping.f90(268,22)
<Alternate Alignment Vectorized Loop>
LOOP END

LOOP BEGIN at stepping.f90(268,22)
<Remainder loop for vectorization>
LOOP END

    Report from: Code generation optimizations [cg]

stepping.f90(248,18):remark #34051: REGISTER ALLOCATION : [stepping_mp_step1d_x_] stepping.f90:248

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :   23[ rax rdx rcx rsi rdi r8-r10 zmm0-zmm14]
        
    Routine temporaries
        Total         :     166
            Global    :      27
            Local     :     139
        Regenerable   :       3
        Spilled       :       0
        
    Routine stack
        Variables     :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
        Spills        :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: STEPPING::STEP1D_Z

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (STEPPING::STEP1D_Z) [4] stepping.f90(279,18)


    Report from: Loop nest, Vector & Auto-parallelization optimizations [loop, vec, par]


LOOP BEGIN at stepping.f90(291,32)
<Peeled loop for vectorization>
LOOP END

LOOP BEGIN at stepping.f90(291,32)
   remark #15300: LOOP WAS VECTORIZED
LOOP END

LOOP BEGIN at stepping.f90(291,32)
<Alternate Alignment Vectorized Loop>
LOOP END

LOOP BEGIN at stepping.f90(291,32)
<Remainder loop for vectorization>
   remark #15335: remainder loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
LOOP END

LOOP BEGIN at stepping.f90(299,22)
<Peeled loop for vectorization>
LOOP END

LOOP BEGIN at stepping.f90(299,22)
   remark #15300: LOOP WAS VECTORIZED
LOOP END

LOOP BEGIN at stepping.f90(299,22)
<Alternate Alignment Vectorized Loop>
LOOP END

LOOP BEGIN at stepping.f90(299,22)
<Remainder loop for vectorization>
LOOP END

    Report from: Code generation optimizations [cg]

stepping.f90(279,18):remark #34051: REGISTER ALLOCATION : [stepping_mp_step1d_z_] stepping.f90:279

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :   23[ rax rdx rcx rsi rdi r8-r10 zmm0-zmm14]
        
    Routine temporaries
        Total         :     166
            Global    :      27
            Local     :     139
        Regenerable   :       3
        Spilled       :       0
        
    Routine stack
        Variables     :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
        Spills        :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================
